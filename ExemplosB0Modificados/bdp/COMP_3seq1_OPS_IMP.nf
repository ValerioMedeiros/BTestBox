Normalised(
THEORY MagicNumberX IS
  MagicNumber(Implementation(COMP_3seq1_OPS_IMP))==(3.5)
END
&
THEORY UpperLevelX IS
  First_Level(Implementation(COMP_3seq1_OPS_IMP))==(Machine(COMP_3seq1_OPS));
  Level(Implementation(COMP_3seq1_OPS_IMP))==(1);
  Upper_Level(Implementation(COMP_3seq1_OPS_IMP))==(Machine(COMP_3seq1_OPS))
END
&
THEORY LoadedStructureX IS
  Implementation(COMP_3seq1_OPS_IMP)
END
&
THEORY ListSeesX IS
  List_Sees(Implementation(COMP_3seq1_OPS_IMP))==(?)
END
&
THEORY ListIncludesX IS
  List_Includes(Implementation(COMP_3seq1_OPS_IMP))==(COMPIMP);
  Inherited_List_Includes(Implementation(COMP_3seq1_OPS_IMP))==(COMPIMP)
END
&
THEORY ListPromotesX IS
  List_Promotes(Implementation(COMP_3seq1_OPS_IMP))==(?)
END
&
THEORY ListExtendsX IS
  List_Extends(Implementation(COMP_3seq1_OPS_IMP))==(?)
END
&
THEORY ListVariablesX IS
  External_Context_List_Variables(Implementation(COMP_3seq1_OPS_IMP))==(?);
  Context_List_Variables(Implementation(COMP_3seq1_OPS_IMP))==(?);
  Abstract_List_Variables(Implementation(COMP_3seq1_OPS_IMP))==(check_OPER_CALL,check_WHILE,check_SEQUENCE,check_CASE,check_IF,check_BECOME,check_BLOCK,check_boolexp,cond1,max_counter,counter);
  Local_List_Variables(Implementation(COMP_3seq1_OPS_IMP))==(?);
  List_Variables(Implementation(COMP_3seq1_OPS_IMP))==(?);
  External_List_Variables(Implementation(COMP_3seq1_OPS_IMP))==(?)
END
&
THEORY ListVisibleVariablesX IS
  Inherited_List_VisibleVariables(Implementation(COMP_3seq1_OPS_IMP))==(?);
  Abstract_List_VisibleVariables(Implementation(COMP_3seq1_OPS_IMP))==(?);
  External_List_VisibleVariables(Implementation(COMP_3seq1_OPS_IMP))==(?);
  Expanded_List_VisibleVariables(Implementation(COMP_3seq1_OPS_IMP))==(?);
  List_VisibleVariables(Implementation(COMP_3seq1_OPS_IMP))==(check_OPER_CALL,check_WHILE,check_SEQUENCE,check_CASE,check_IF,check_BECOME,check_BLOCK,check_boolexp,cond1,max_counter,counter);
  Internal_List_VisibleVariables(Implementation(COMP_3seq1_OPS_IMP))==(check_OPER_CALL,check_WHILE,check_SEQUENCE,check_CASE,check_IF,check_BECOME,check_BLOCK,check_boolexp,cond1,max_counter,counter)
END
&
THEORY ListInvariantX IS
  Gluing_Seen_List_Invariant(Implementation(COMP_3seq1_OPS_IMP))==(btrue);
  Abstract_List_Invariant(Implementation(COMP_3seq1_OPS_IMP))==(counter: NAT & max_counter: NAT & cond1: BOOL & check_boolexp: BOOL & check_BLOCK: INT & check_BECOME: INT & check_IF: INT & check_CASE: INT & check_SEQUENCE: INT & check_WHILE: INT & check_OPER_CALL: INT);
  Expanded_List_Invariant(Implementation(COMP_3seq1_OPS_IMP))==(btrue);
  Context_List_Invariant(Implementation(COMP_3seq1_OPS_IMP))==(btrue);
  List_Invariant(Implementation(COMP_3seq1_OPS_IMP))==(counter: NAT & max_counter: NAT & cond1: BOOL & check_boolexp: BOOL & check_BLOCK: INT & check_BECOME: INT & check_IF: INT & check_CASE: INT & check_SEQUENCE: INT & check_WHILE: INT & check_OPER_CALL: INT)
END
&
THEORY ListAssertionsX IS
  Abstract_List_Assertions(Implementation(COMP_3seq1_OPS_IMP))==(btrue);
  Expanded_List_Assertions(Implementation(COMP_3seq1_OPS_IMP))==(btrue);
  Context_List_Assertions(Implementation(COMP_3seq1_OPS_IMP))==(btrue);
  List_Assertions(Implementation(COMP_3seq1_OPS_IMP))==(btrue)
END
&
THEORY ListCoverageX IS
  List_Coverage(Implementation(COMP_3seq1_OPS_IMP))==(btrue)
END
&
THEORY ListExclusivityX IS
  List_Exclusivity(Implementation(COMP_3seq1_OPS_IMP))==(btrue)
END
&
THEORY ListInitialisationX IS
  Expanded_List_Initialisation(Implementation(COMP_3seq1_OPS_IMP))==((1: INT | counter:=1);(1024: INT | max_counter:=1024);cond1:=TRUE;check_boolexp:=TRUE;(0: INT | check_BLOCK:=0);(0: INT | check_BECOME:=0);(0: INT | check_IF:=0);(0: INT | check_CASE:=0);(0: INT | check_SEQUENCE:=0);(0: INT | check_WHILE:=0);(0: INT | check_OPER_CALL:=0));
  Context_List_Initialisation(Implementation(COMP_3seq1_OPS_IMP))==(skip);
  List_Initialisation(Implementation(COMP_3seq1_OPS_IMP))==(counter:=1;max_counter:=1024;cond1:=TRUE;check_boolexp:=TRUE;check_BLOCK:=0;check_BECOME:=0;check_IF:=0;check_CASE:=0;check_SEQUENCE:=0;check_WHILE:=0;check_OPER_CALL:=0)
END
&
THEORY ListParametersX IS
  List_Parameters(Implementation(COMP_3seq1_OPS_IMP))==(?)
END
&
THEORY ListInstanciatedParametersX IS
  List_Instanciated_Parameters(Implementation(COMP_3seq1_OPS_IMP),Machine(COMPIMP))==(?)
END
&
THEORY ListConstraintsX IS
  List_Constraints(Implementation(COMP_3seq1_OPS_IMP),Machine(COMPIMP))==(btrue);
  List_Constraints(Implementation(COMP_3seq1_OPS_IMP))==(btrue);
  List_Context_Constraints(Implementation(COMP_3seq1_OPS_IMP))==(btrue)
END
&
THEORY ListOperationsX IS
  Internal_List_Operations(Implementation(COMP_3seq1_OPS_IMP))==(ID00000,ID00001,ID00002,ID00003,ID00004,ID00005,ID00006,ID00007,ID00008,ID00009,ID00010,ID00011,ID00012,ID00013,ID00014,ID00015,ID00016,ID00017,ID00018,ID00019,ID00020,ID00021,ID00022,ID00023,ID00024,ID00025,ID00026,ID00027,ID00028,ID00029,ID00030,ID00031,ID00032,ID00033,ID00034,ID00035,ID00036,ID00037,ID00038,ID00039,ID00040,ID00041,ID00042,ID00043,ID00044,ID00045,ID00046,ID00047,ID00048,ID00049,ID00050,ID00051,ID00052,ID00053,ID00054,ID00055,ID00056,ID00057,ID00058,ID00059,ID00060,ID00061,ID00062,ID00063,ID00064,ID00065,ID00066,ID00067,ID00068,ID00069,ID00070,ID00071,ID00072,ID00073,ID00074,ID00075,ID00076,ID00077,ID00078,ID00079,ID00080,ID00081,ID00082,ID00083,ID00084,ID00085,ID00086,ID00087,ID00088,ID00089,ID00090,ID00091,ID00092,ID00093,ID00094,ID00095,ID00096,ID00097,ID00098,ID00099,ID00100,ID00101,ID00102,ID00103,ID00104,ID00105,ID00106,ID00107,ID00108,ID00109,ID00110,ID00111,ID00112,ID00113,ID00114,ID00115,ID00116,ID00117,ID00118,ID00119,ID00120,ID00121,ID00122,ID00123,ID00124,ID00125,ID00126,ID00127,ID00128,ID00129,ID00130,ID00131,ID00132,ID00133,ID00134,ID00135,ID00136,ID00137,ID00138,ID00139,ID00140,ID00141,ID00142,ID00143,ID00144,ID00145,ID00146,ID00147,ID00148,ID00149,ID00150,ID00151,ID00152,ID00153,ID00154,ID00155,ID00156,ID00157,ID00158,ID00159,ID00160,ID00161,ID00162,ID00163,ID00164,ID00165,ID00166,ID00167,ID00168,ID00169,ID00170,ID00171,ID00172,ID00173,ID00174,ID00175,ID00176,ID00177,ID00178,ID00179,ID00180,ID00181,ID00182,ID00183,ID00184,ID00185,ID00186,ID00187,ID00188,ID00189,ID00190,ID00191,ID00192,ID00193,ID00194,ID00195,ID00196,ID00197,ID00198,ID00199,ID00200,ID00201,ID00202,ID00203,ID00204,ID00205,ID00206,ID00207,ID00208,ID00209,ID00210,ID00211,ID00212,ID00213,ID00214,ID00215,ID00216,ID00217,ID00218,ID00219,ID00220,ID00221,ID00222,ID00223,ID00224,ID00225,ID00226,ID00227,ID00228,ID00229,ID00230,ID00231,ID00232,ID00233,ID00234,ID00235,ID00236,ID00237,ID00238,ID00239,ID00240,ID00241,ID00242,ID00243,ID00244,ID00245,ID00246,ID00247,ID00248,ID00249,ID00250,ID00251,ID00252,ID00253,ID00254,ID00255,ID00256,ID00257,ID00258,ID00259,ID00260,ID00261,ID00262,ID00263,ID00264,ID00265,ID00266,ID00267,ID00268,ID00269,ID00270,ID00271,ID00272,ID00273,ID00274,ID00275,ID00276,ID00277,ID00278,ID00279,ID00280,ID00281,ID00282,ID00283,ID00284,ID00285,ID00286,ID00287,ID00288,ID00289,ID00290,ID00291,ID00292,ID00293,ID00294,ID00295,ID00296,ID00297,ID00298,ID00299,ID00300,ID00301,ID00302,ID00303,ID00304,ID00305,ID00306,ID00307,ID00308,ID00309,ID00310,ID00311,ID00312,ID00313,ID00314,ID00315,ID00316,ID00317,ID00318,ID00319,ID00320,ID00321,ID00322,ID00323,ID00324,ID00325,ID00326,ID00327,ID00328,ID00329,ID00330,ID00331,ID00332,ID00333,ID00334,ID00335,ID00336,ID00337,ID00338,ID00339,ID00340,ID00341,ID00342,ID00343,ID00344,ID00345,ID00346,ID00347,ID00348,ID00349,ID00350,ID00351,ID00352,ID00353,ID00354,ID00355,ID00356,ID00357,ID00358,ID00359,ID00360,ID00361,ID00362,ID00363,ID00364,ID00365,ID00366,ID00367,ID00368,ID00369,ID00370,ID00371,ID00372,ID00373,ID00374,ID00375,ID00376,ID00377,ID00378,ID00379,ID00380,ID00381,ID00382,ID00383,ID00384,ID00385,ID00386,ID00387,ID00388,ID00389,ID00390,ID00391,ID00392,ID00393,ID00394,ID00395,ID00396,ID00397,ID00398,ID00399,ID00400,ID00401,ID00402,ID00403,ID00404,ID00405,ID00406,ID00407,ID00408,ID00409,ID00410,ID00411,ID00412,ID00413,ID00414,ID00415,ID00416,ID00417,ID00418,ID00419,ID00420,ID00421,ID00422,ID00423,ID00424,ID00425,ID00426,ID00427,ID00428,ID00429,ID00430,ID00431,ID00432,ID00433,ID00434,ID00435,ID00436,ID00437,ID00438,ID00439,ID00440,ID00441,ID00442,ID00443,ID00444,ID00445,ID00446,ID00447,ID00448,ID00449,ID00450,ID00451,ID00452,ID00453,ID00454,ID00455,ID00456,ID00457,ID00458,ID00459,ID00460,ID00461,ID00462,ID00463,ID00464,ID00465,ID00466,ID00467,ID00468,ID00469,ID00470,ID00471,ID00472,ID00473,ID00474,ID00475,ID00476,ID00477,ID00478,ID00479,ID00480,ID00481,ID00482,ID00483,ID00484,ID00485,ID00486,ID00487,ID00488,ID00489,ID00490,ID00491,ID00492,ID00493,ID00494,ID00495,ID00496,ID00497,ID00498,ID00499,ID00500,ID00501,ID00502,ID00503,ID00504,ID00505,ID00506,ID00507,ID00508,ID00509,ID00510,ID00511,ID00512,ID00513,ID00514,ID00515,ID00516,ID00517,ID00518,ID00519,ID00520,ID00521,ID00522,ID00523,ID00524,ID00525,ID00526,ID00527,ID00528,ID00529,ID00530,ID00531,ID00532,ID00533,ID00534,ID00535,ID00536,ID00537,ID00538,ID00539,ID00540,ID00541,ID00542,ID00543,ID00544,ID00545,ID00546,ID00547,ID00548,ID00549,ID00550,ID00551,ID00552,ID00553,ID00554,ID00555,ID00556,ID00557,ID00558,ID00559,ID00560,ID00561,ID00562,ID00563,ID00564,ID00565,ID00566,ID00567,ID00568,ID00569,ID00570,ID00571,ID00572,ID00573,ID00574,ID00575,ID00576,ID00577,ID00578,ID00579,ID00580,ID00581,ID00582,ID00583,ID00584,ID00585,ID00586,ID00587,ID00588,ID00589,ID00590,ID00591,ID00592,ID00593,ID00594,ID00595,ID00596,ID00597,ID00598,ID00599,ID00600,ID00601,ID00602,ID00603,ID00604,ID00605,ID00606,ID00607,ID00608,ID00609,ID00610,ID00611,ID00612,ID00613,ID00614,ID00615,ID00616,ID00617,ID00618,ID00619,ID00620,ID00621,ID00622,ID00623,ID00624,ID00625,ID00626,ID00627,ID00628,ID00629,ID00630,ID00631,ID00632,ID00633,ID00634,ID00635,ID00636,ID00637,ID00638,ID00639,ID00640,ID00641,ID00642,ID00643,ID00644,ID00645,ID00646,ID00647,ID00648,ID00649,ID00650,ID00651,ID00652,ID00653,ID00654,ID00655,ID00656,ID00657,ID00658,ID00659,ID00660,ID00661,ID00662,ID00663,ID00664,ID00665,ID00666,ID00667,ID00668,ID00669,ID00670,ID00671,ID00672,ID00673,ID00674,ID00675,ID00676,ID00677,ID00678,ID00679,ID00680,ID00681,ID00682,ID00683,ID00684,ID00685,ID00686,ID00687,ID00688,ID00689,ID00690,ID00691,ID00692,ID00693,ID00694,ID00695,ID00696,ID00697,ID00698,ID00699,ID00700,ID00701,ID00702,ID00703,ID00704,ID00705,ID00706,ID00707,ID00708,ID00709,ID00710,ID00711,ID00712,ID00713,ID00714,ID00715,ID00716,ID00717,ID00718,ID00719,ID00720,ID00721,ID00722,ID00723,ID00724,ID00725,ID00726,ID00727,ID00728,ID00729,ID00730,ID00731,ID00732,ID00733,ID00734,ID00735,ID00736,ID00737,ID00738,ID00739,ID00740,ID00741,ID00742,ID00743,ID00744,ID00745,ID00746,ID00747,ID00748,ID00749,ID00750,ID00751,ID00752,ID00753,ID00754,ID00755,ID00756,ID00757,ID00758,ID00759,ID00760,ID00761,ID00762,ID00763,ID00764,ID00765,ID00766,ID00767,ID00768,ID00769,ID00770,ID00771,ID00772,ID00773,ID00774,ID00775,ID00776,ID00777,ID00778,ID00779,ID00780,ID00781,ID00782,ID00783,ID00784,ID00785,ID00786,ID00787,ID00788,ID00789,ID00790,ID00791,ID00792,ID00793,ID00794,ID00795,ID00796,ID00797,ID00798,ID00799,ID00800,ID00801,ID00802,ID00803,ID00804,ID00805,ID00806,ID00807,ID00808,ID00809,ID00810,ID00811,ID00812,ID00813,ID00814,ID00815,ID00816,ID00817,ID00818,ID00819,ID00820,ID00821,ID00822,ID00823,ID00824,ID00825,ID00826,ID00827,ID00828,ID00829,ID00830,ID00831,ID00832,ID00833,ID00834,ID00835,ID00836,ID00837,ID00838,ID00839,ID00840,ID00841,ID00842,ID00843,ID00844,ID00845,ID00846,ID00847,ID00848,ID00849,ID00850,ID00851,ID00852,ID00853,ID00854,ID00855,ID00856,ID00857,ID00858,ID00859,ID00860,ID00861,ID00862,ID00863,ID00864,ID00865,ID00866,ID00867,ID00868,ID00869,ID00870,ID00871,ID00872,ID00873,ID00874,ID00875,ID00876,ID00877,ID00878,ID00879,ID00880,ID00881,ID00882,ID00883,ID00884,ID00885,ID00886,ID00887,ID00888,ID00889,ID00890,ID00891,ID00892,ID00893,ID00894,ID00895,ID00896,ID00897,ID00898,ID00899,ID00900,ID00901,ID00902,ID00903,ID00904,ID00905,ID00906,ID00907,ID00908,ID00909,ID00910,ID00911,ID00912,ID00913,ID00914,ID00915,ID00916,ID00917,ID00918,ID00919,ID00920,ID00921,ID00922,ID00923,ID00924,ID00925,ID00926,ID00927,ID00928,ID00929,ID00930,ID00931,ID00932,ID00933,ID00934,ID00935,ID00936,ID00937,ID00938,ID00939,ID00940,ID00941,ID00942,ID00943,ID00944,ID00945,ID00946,ID00947,ID00948,ID00949,ID00950,ID00951,ID00952,ID00953,ID00954,ID00955,ID00956,ID00957,ID00958,ID00959,ID00960,ID00961,ID00962,ID00963,ID00964,ID00965,ID00966,ID00967,ID00968,ID00969,ID00970,ID00971,ID00972,ID00973,ID00974,ID00975,ID00976,ID00977,ID00978,ID00979,ID00980,ID00981,ID00982,ID00983,ID00984,ID00985,ID00986,ID00987,ID00988,ID00989,ID00990,ID00991,ID00992,ID00993,ID00994,ID00995,ID00996,ID00997,ID00998,ID00999);
  List_Operations(Implementation(COMP_3seq1_OPS_IMP))==(ID00000,ID00001,ID00002,ID00003,ID00004,ID00005,ID00006,ID00007,ID00008,ID00009,ID00010,ID00011,ID00012,ID00013,ID00014,ID00015,ID00016,ID00017,ID00018,ID00019,ID00020,ID00021,ID00022,ID00023,ID00024,ID00025,ID00026,ID00027,ID00028,ID00029,ID00030,ID00031,ID00032,ID00033,ID00034,ID00035,ID00036,ID00037,ID00038,ID00039,ID00040,ID00041,ID00042,ID00043,ID00044,ID00045,ID00046,ID00047,ID00048,ID00049,ID00050,ID00051,ID00052,ID00053,ID00054,ID00055,ID00056,ID00057,ID00058,ID00059,ID00060,ID00061,ID00062,ID00063,ID00064,ID00065,ID00066,ID00067,ID00068,ID00069,ID00070,ID00071,ID00072,ID00073,ID00074,ID00075,ID00076,ID00077,ID00078,ID00079,ID00080,ID00081,ID00082,ID00083,ID00084,ID00085,ID00086,ID00087,ID00088,ID00089,ID00090,ID00091,ID00092,ID00093,ID00094,ID00095,ID00096,ID00097,ID00098,ID00099,ID00100,ID00101,ID00102,ID00103,ID00104,ID00105,ID00106,ID00107,ID00108,ID00109,ID00110,ID00111,ID00112,ID00113,ID00114,ID00115,ID00116,ID00117,ID00118,ID00119,ID00120,ID00121,ID00122,ID00123,ID00124,ID00125,ID00126,ID00127,ID00128,ID00129,ID00130,ID00131,ID00132,ID00133,ID00134,ID00135,ID00136,ID00137,ID00138,ID00139,ID00140,ID00141,ID00142,ID00143,ID00144,ID00145,ID00146,ID00147,ID00148,ID00149,ID00150,ID00151,ID00152,ID00153,ID00154,ID00155,ID00156,ID00157,ID00158,ID00159,ID00160,ID00161,ID00162,ID00163,ID00164,ID00165,ID00166,ID00167,ID00168,ID00169,ID00170,ID00171,ID00172,ID00173,ID00174,ID00175,ID00176,ID00177,ID00178,ID00179,ID00180,ID00181,ID00182,ID00183,ID00184,ID00185,ID00186,ID00187,ID00188,ID00189,ID00190,ID00191,ID00192,ID00193,ID00194,ID00195,ID00196,ID00197,ID00198,ID00199,ID00200,ID00201,ID00202,ID00203,ID00204,ID00205,ID00206,ID00207,ID00208,ID00209,ID00210,ID00211,ID00212,ID00213,ID00214,ID00215,ID00216,ID00217,ID00218,ID00219,ID00220,ID00221,ID00222,ID00223,ID00224,ID00225,ID00226,ID00227,ID00228,ID00229,ID00230,ID00231,ID00232,ID00233,ID00234,ID00235,ID00236,ID00237,ID00238,ID00239,ID00240,ID00241,ID00242,ID00243,ID00244,ID00245,ID00246,ID00247,ID00248,ID00249,ID00250,ID00251,ID00252,ID00253,ID00254,ID00255,ID00256,ID00257,ID00258,ID00259,ID00260,ID00261,ID00262,ID00263,ID00264,ID00265,ID00266,ID00267,ID00268,ID00269,ID00270,ID00271,ID00272,ID00273,ID00274,ID00275,ID00276,ID00277,ID00278,ID00279,ID00280,ID00281,ID00282,ID00283,ID00284,ID00285,ID00286,ID00287,ID00288,ID00289,ID00290,ID00291,ID00292,ID00293,ID00294,ID00295,ID00296,ID00297,ID00298,ID00299,ID00300,ID00301,ID00302,ID00303,ID00304,ID00305,ID00306,ID00307,ID00308,ID00309,ID00310,ID00311,ID00312,ID00313,ID00314,ID00315,ID00316,ID00317,ID00318,ID00319,ID00320,ID00321,ID00322,ID00323,ID00324,ID00325,ID00326,ID00327,ID00328,ID00329,ID00330,ID00331,ID00332,ID00333,ID00334,ID00335,ID00336,ID00337,ID00338,ID00339,ID00340,ID00341,ID00342,ID00343,ID00344,ID00345,ID00346,ID00347,ID00348,ID00349,ID00350,ID00351,ID00352,ID00353,ID00354,ID00355,ID00356,ID00357,ID00358,ID00359,ID00360,ID00361,ID00362,ID00363,ID00364,ID00365,ID00366,ID00367,ID00368,ID00369,ID00370,ID00371,ID00372,ID00373,ID00374,ID00375,ID00376,ID00377,ID00378,ID00379,ID00380,ID00381,ID00382,ID00383,ID00384,ID00385,ID00386,ID00387,ID00388,ID00389,ID00390,ID00391,ID00392,ID00393,ID00394,ID00395,ID00396,ID00397,ID00398,ID00399,ID00400,ID00401,ID00402,ID00403,ID00404,ID00405,ID00406,ID00407,ID00408,ID00409,ID00410,ID00411,ID00412,ID00413,ID00414,ID00415,ID00416,ID00417,ID00418,ID00419,ID00420,ID00421,ID00422,ID00423,ID00424,ID00425,ID00426,ID00427,ID00428,ID00429,ID00430,ID00431,ID00432,ID00433,ID00434,ID00435,ID00436,ID00437,ID00438,ID00439,ID00440,ID00441,ID00442,ID00443,ID00444,ID00445,ID00446,ID00447,ID00448,ID00449,ID00450,ID00451,ID00452,ID00453,ID00454,ID00455,ID00456,ID00457,ID00458,ID00459,ID00460,ID00461,ID00462,ID00463,ID00464,ID00465,ID00466,ID00467,ID00468,ID00469,ID00470,ID00471,ID00472,ID00473,ID00474,ID00475,ID00476,ID00477,ID00478,ID00479,ID00480,ID00481,ID00482,ID00483,ID00484,ID00485,ID00486,ID00487,ID00488,ID00489,ID00490,ID00491,ID00492,ID00493,ID00494,ID00495,ID00496,ID00497,ID00498,ID00499,ID00500,ID00501,ID00502,ID00503,ID00504,ID00505,ID00506,ID00507,ID00508,ID00509,ID00510,ID00511,ID00512,ID00513,ID00514,ID00515,ID00516,ID00517,ID00518,ID00519,ID00520,ID00521,ID00522,ID00523,ID00524,ID00525,ID00526,ID00527,ID00528,ID00529,ID00530,ID00531,ID00532,ID00533,ID00534,ID00535,ID00536,ID00537,ID00538,ID00539,ID00540,ID00541,ID00542,ID00543,ID00544,ID00545,ID00546,ID00547,ID00548,ID00549,ID00550,ID00551,ID00552,ID00553,ID00554,ID00555,ID00556,ID00557,ID00558,ID00559,ID00560,ID00561,ID00562,ID00563,ID00564,ID00565,ID00566,ID00567,ID00568,ID00569,ID00570,ID00571,ID00572,ID00573,ID00574,ID00575,ID00576,ID00577,ID00578,ID00579,ID00580,ID00581,ID00582,ID00583,ID00584,ID00585,ID00586,ID00587,ID00588,ID00589,ID00590,ID00591,ID00592,ID00593,ID00594,ID00595,ID00596,ID00597,ID00598,ID00599,ID00600,ID00601,ID00602,ID00603,ID00604,ID00605,ID00606,ID00607,ID00608,ID00609,ID00610,ID00611,ID00612,ID00613,ID00614,ID00615,ID00616,ID00617,ID00618,ID00619,ID00620,ID00621,ID00622,ID00623,ID00624,ID00625,ID00626,ID00627,ID00628,ID00629,ID00630,ID00631,ID00632,ID00633,ID00634,ID00635,ID00636,ID00637,ID00638,ID00639,ID00640,ID00641,ID00642,ID00643,ID00644,ID00645,ID00646,ID00647,ID00648,ID00649,ID00650,ID00651,ID00652,ID00653,ID00654,ID00655,ID00656,ID00657,ID00658,ID00659,ID00660,ID00661,ID00662,ID00663,ID00664,ID00665,ID00666,ID00667,ID00668,ID00669,ID00670,ID00671,ID00672,ID00673,ID00674,ID00675,ID00676,ID00677,ID00678,ID00679,ID00680,ID00681,ID00682,ID00683,ID00684,ID00685,ID00686,ID00687,ID00688,ID00689,ID00690,ID00691,ID00692,ID00693,ID00694,ID00695,ID00696,ID00697,ID00698,ID00699,ID00700,ID00701,ID00702,ID00703,ID00704,ID00705,ID00706,ID00707,ID00708,ID00709,ID00710,ID00711,ID00712,ID00713,ID00714,ID00715,ID00716,ID00717,ID00718,ID00719,ID00720,ID00721,ID00722,ID00723,ID00724,ID00725,ID00726,ID00727,ID00728,ID00729,ID00730,ID00731,ID00732,ID00733,ID00734,ID00735,ID00736,ID00737,ID00738,ID00739,ID00740,ID00741,ID00742,ID00743,ID00744,ID00745,ID00746,ID00747,ID00748,ID00749,ID00750,ID00751,ID00752,ID00753,ID00754,ID00755,ID00756,ID00757,ID00758,ID00759,ID00760,ID00761,ID00762,ID00763,ID00764,ID00765,ID00766,ID00767,ID00768,ID00769,ID00770,ID00771,ID00772,ID00773,ID00774,ID00775,ID00776,ID00777,ID00778,ID00779,ID00780,ID00781,ID00782,ID00783,ID00784,ID00785,ID00786,ID00787,ID00788,ID00789,ID00790,ID00791,ID00792,ID00793,ID00794,ID00795,ID00796,ID00797,ID00798,ID00799,ID00800,ID00801,ID00802,ID00803,ID00804,ID00805,ID00806,ID00807,ID00808,ID00809,ID00810,ID00811,ID00812,ID00813,ID00814,ID00815,ID00816,ID00817,ID00818,ID00819,ID00820,ID00821,ID00822,ID00823,ID00824,ID00825,ID00826,ID00827,ID00828,ID00829,ID00830,ID00831,ID00832,ID00833,ID00834,ID00835,ID00836,ID00837,ID00838,ID00839,ID00840,ID00841,ID00842,ID00843,ID00844,ID00845,ID00846,ID00847,ID00848,ID00849,ID00850,ID00851,ID00852,ID00853,ID00854,ID00855,ID00856,ID00857,ID00858,ID00859,ID00860,ID00861,ID00862,ID00863,ID00864,ID00865,ID00866,ID00867,ID00868,ID00869,ID00870,ID00871,ID00872,ID00873,ID00874,ID00875,ID00876,ID00877,ID00878,ID00879,ID00880,ID00881,ID00882,ID00883,ID00884,ID00885,ID00886,ID00887,ID00888,ID00889,ID00890,ID00891,ID00892,ID00893,ID00894,ID00895,ID00896,ID00897,ID00898,ID00899,ID00900,ID00901,ID00902,ID00903,ID00904,ID00905,ID00906,ID00907,ID00908,ID00909,ID00910,ID00911,ID00912,ID00913,ID00914,ID00915,ID00916,ID00917,ID00918,ID00919,ID00920,ID00921,ID00922,ID00923,ID00924,ID00925,ID00926,ID00927,ID00928,ID00929,ID00930,ID00931,ID00932,ID00933,ID00934,ID00935,ID00936,ID00937,ID00938,ID00939,ID00940,ID00941,ID00942,ID00943,ID00944,ID00945,ID00946,ID00947,ID00948,ID00949,ID00950,ID00951,ID00952,ID00953,ID00954,ID00955,ID00956,ID00957,ID00958,ID00959,ID00960,ID00961,ID00962,ID00963,ID00964,ID00965,ID00966,ID00967,ID00968,ID00969,ID00970,ID00971,ID00972,ID00973,ID00974,ID00975,ID00976,ID00977,ID00978,ID00979,ID00980,ID00981,ID00982,ID00983,ID00984,ID00985,ID00986,ID00987,ID00988,ID00989,ID00990,ID00991,ID00992,ID00993,ID00994,ID00995,ID00996,ID00997,ID00998,ID00999)
END
&
THEORY ListInputX IS
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00000)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00001)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00002)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00003)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00004)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00005)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00006)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00007)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00008)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00009)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00010)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00011)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00012)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00013)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00014)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00015)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00016)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00017)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00018)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00019)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00020)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00021)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00022)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00023)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00024)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00025)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00026)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00027)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00028)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00029)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00030)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00031)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00032)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00033)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00034)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00035)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00036)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00037)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00038)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00039)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00040)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00041)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00042)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00043)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00044)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00045)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00046)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00047)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00048)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00049)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00050)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00051)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00052)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00053)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00054)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00055)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00056)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00057)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00058)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00059)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00060)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00061)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00062)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00063)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00064)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00065)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00066)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00067)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00068)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00069)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00070)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00071)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00072)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00073)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00074)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00075)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00076)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00077)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00078)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00079)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00080)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00081)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00082)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00083)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00084)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00085)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00086)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00087)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00088)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00089)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00090)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00091)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00092)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00093)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00094)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00095)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00096)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00097)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00098)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00099)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00100)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00101)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00102)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00103)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00104)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00105)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00106)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00107)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00108)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00109)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00110)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00111)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00112)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00113)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00114)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00115)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00116)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00117)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00118)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00119)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00120)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00121)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00122)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00123)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00124)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00125)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00126)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00127)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00128)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00129)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00130)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00131)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00132)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00133)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00134)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00135)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00136)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00137)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00138)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00139)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00140)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00141)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00142)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00143)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00144)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00145)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00146)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00147)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00148)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00149)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00150)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00151)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00152)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00153)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00154)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00155)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00156)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00157)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00158)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00159)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00160)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00161)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00162)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00163)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00164)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00165)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00166)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00167)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00168)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00169)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00170)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00171)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00172)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00173)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00174)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00175)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00176)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00177)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00178)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00179)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00180)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00181)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00182)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00183)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00184)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00185)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00186)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00187)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00188)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00189)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00190)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00191)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00192)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00193)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00194)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00195)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00196)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00197)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00198)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00199)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00200)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00201)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00202)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00203)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00204)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00205)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00206)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00207)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00208)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00209)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00210)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00211)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00212)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00213)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00214)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00215)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00216)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00217)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00218)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00219)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00220)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00221)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00222)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00223)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00224)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00225)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00226)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00227)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00228)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00229)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00230)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00231)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00232)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00233)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00234)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00235)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00236)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00237)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00238)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00239)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00240)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00241)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00242)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00243)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00244)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00245)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00246)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00247)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00248)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00249)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00250)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00251)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00252)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00253)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00254)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00255)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00256)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00257)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00258)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00259)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00260)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00261)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00262)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00263)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00264)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00265)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00266)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00267)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00268)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00269)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00270)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00271)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00272)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00273)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00274)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00275)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00276)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00277)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00278)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00279)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00280)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00281)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00282)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00283)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00284)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00285)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00286)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00287)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00288)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00289)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00290)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00291)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00292)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00293)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00294)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00295)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00296)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00297)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00298)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00299)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00300)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00301)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00302)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00303)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00304)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00305)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00306)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00307)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00308)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00309)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00310)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00311)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00312)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00313)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00314)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00315)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00316)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00317)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00318)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00319)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00320)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00321)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00322)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00323)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00324)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00325)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00326)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00327)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00328)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00329)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00330)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00331)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00332)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00333)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00334)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00335)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00336)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00337)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00338)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00339)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00340)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00341)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00342)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00343)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00344)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00345)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00346)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00347)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00348)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00349)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00350)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00351)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00352)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00353)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00354)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00355)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00356)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00357)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00358)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00359)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00360)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00361)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00362)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00363)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00364)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00365)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00366)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00367)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00368)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00369)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00370)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00371)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00372)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00373)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00374)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00375)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00376)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00377)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00378)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00379)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00380)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00381)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00382)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00383)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00384)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00385)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00386)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00387)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00388)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00389)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00390)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00391)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00392)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00393)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00394)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00395)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00396)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00397)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00398)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00399)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00400)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00401)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00402)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00403)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00404)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00405)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00406)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00407)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00408)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00409)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00410)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00411)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00412)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00413)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00414)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00415)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00416)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00417)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00418)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00419)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00420)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00421)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00422)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00423)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00424)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00425)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00426)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00427)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00428)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00429)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00430)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00431)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00432)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00433)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00434)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00435)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00436)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00437)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00438)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00439)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00440)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00441)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00442)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00443)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00444)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00445)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00446)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00447)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00448)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00449)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00450)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00451)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00452)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00453)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00454)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00455)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00456)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00457)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00458)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00459)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00460)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00461)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00462)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00463)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00464)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00465)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00466)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00467)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00468)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00469)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00470)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00471)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00472)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00473)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00474)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00475)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00476)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00477)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00478)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00479)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00480)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00481)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00482)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00483)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00484)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00485)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00486)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00487)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00488)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00489)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00490)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00491)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00492)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00493)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00494)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00495)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00496)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00497)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00498)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00499)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00500)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00501)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00502)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00503)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00504)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00505)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00506)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00507)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00508)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00509)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00510)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00511)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00512)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00513)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00514)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00515)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00516)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00517)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00518)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00519)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00520)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00521)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00522)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00523)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00524)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00525)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00526)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00527)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00528)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00529)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00530)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00531)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00532)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00533)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00534)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00535)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00536)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00537)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00538)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00539)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00540)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00541)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00542)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00543)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00544)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00545)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00546)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00547)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00548)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00549)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00550)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00551)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00552)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00553)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00554)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00555)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00556)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00557)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00558)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00559)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00560)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00561)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00562)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00563)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00564)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00565)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00566)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00567)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00568)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00569)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00570)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00571)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00572)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00573)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00574)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00575)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00576)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00577)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00578)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00579)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00580)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00581)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00582)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00583)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00584)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00585)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00586)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00587)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00588)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00589)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00590)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00591)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00592)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00593)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00594)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00595)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00596)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00597)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00598)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00599)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00600)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00601)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00602)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00603)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00604)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00605)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00606)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00607)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00608)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00609)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00610)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00611)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00612)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00613)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00614)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00615)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00616)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00617)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00618)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00619)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00620)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00621)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00622)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00623)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00624)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00625)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00626)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00627)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00628)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00629)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00630)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00631)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00632)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00633)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00634)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00635)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00636)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00637)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00638)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00639)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00640)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00641)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00642)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00643)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00644)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00645)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00646)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00647)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00648)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00649)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00650)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00651)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00652)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00653)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00654)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00655)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00656)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00657)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00658)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00659)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00660)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00661)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00662)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00663)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00664)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00665)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00666)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00667)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00668)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00669)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00670)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00671)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00672)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00673)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00674)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00675)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00676)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00677)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00678)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00679)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00680)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00681)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00682)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00683)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00684)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00685)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00686)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00687)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00688)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00689)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00690)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00691)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00692)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00693)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00694)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00695)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00696)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00697)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00698)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00699)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00700)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00701)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00702)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00703)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00704)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00705)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00706)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00707)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00708)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00709)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00710)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00711)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00712)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00713)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00714)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00715)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00716)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00717)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00718)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00719)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00720)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00721)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00722)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00723)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00724)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00725)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00726)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00727)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00728)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00729)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00730)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00731)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00732)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00733)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00734)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00735)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00736)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00737)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00738)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00739)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00740)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00741)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00742)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00743)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00744)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00745)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00746)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00747)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00748)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00749)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00750)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00751)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00752)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00753)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00754)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00755)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00756)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00757)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00758)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00759)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00760)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00761)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00762)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00763)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00764)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00765)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00766)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00767)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00768)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00769)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00770)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00771)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00772)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00773)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00774)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00775)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00776)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00777)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00778)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00779)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00780)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00781)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00782)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00783)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00784)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00785)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00786)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00787)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00788)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00789)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00790)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00791)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00792)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00793)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00794)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00795)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00796)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00797)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00798)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00799)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00800)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00801)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00802)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00803)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00804)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00805)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00806)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00807)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00808)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00809)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00810)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00811)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00812)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00813)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00814)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00815)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00816)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00817)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00818)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00819)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00820)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00821)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00822)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00823)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00824)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00825)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00826)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00827)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00828)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00829)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00830)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00831)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00832)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00833)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00834)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00835)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00836)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00837)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00838)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00839)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00840)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00841)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00842)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00843)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00844)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00845)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00846)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00847)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00848)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00849)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00850)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00851)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00852)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00853)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00854)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00855)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00856)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00857)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00858)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00859)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00860)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00861)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00862)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00863)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00864)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00865)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00866)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00867)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00868)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00869)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00870)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00871)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00872)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00873)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00874)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00875)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00876)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00877)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00878)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00879)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00880)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00881)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00882)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00883)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00884)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00885)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00886)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00887)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00888)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00889)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00890)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00891)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00892)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00893)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00894)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00895)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00896)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00897)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00898)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00899)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00900)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00901)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00902)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00903)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00904)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00905)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00906)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00907)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00908)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00909)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00910)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00911)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00912)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00913)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00914)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00915)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00916)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00917)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00918)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00919)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00920)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00921)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00922)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00923)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00924)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00925)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00926)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00927)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00928)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00929)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00930)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00931)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00932)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00933)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00934)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00935)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00936)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00937)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00938)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00939)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00940)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00941)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00942)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00943)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00944)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00945)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00946)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00947)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00948)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00949)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00950)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00951)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00952)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00953)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00954)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00955)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00956)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00957)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00958)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00959)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00960)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00961)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00962)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00963)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00964)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00965)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00966)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00967)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00968)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00969)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00970)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00971)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00972)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00973)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00974)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00975)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00976)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00977)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00978)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00979)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00980)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00981)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00982)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00983)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00984)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00985)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00986)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00987)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00988)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00989)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00990)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00991)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00992)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00993)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00994)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00995)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00996)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00997)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00998)==(?);
  List_Input(Implementation(COMP_3seq1_OPS_IMP),ID00999)==(?)
END
&
THEORY ListOutputX IS
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00000)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00001)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00002)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00003)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00004)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00005)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00006)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00007)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00008)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00009)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00010)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00011)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00012)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00013)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00014)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00015)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00016)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00017)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00018)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00019)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00020)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00021)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00022)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00023)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00024)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00025)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00026)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00027)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00028)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00029)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00030)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00031)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00032)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00033)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00034)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00035)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00036)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00037)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00038)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00039)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00040)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00041)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00042)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00043)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00044)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00045)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00046)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00047)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00048)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00049)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00050)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00051)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00052)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00053)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00054)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00055)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00056)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00057)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00058)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00059)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00060)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00061)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00062)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00063)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00064)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00065)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00066)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00067)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00068)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00069)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00070)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00071)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00072)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00073)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00074)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00075)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00076)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00077)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00078)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00079)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00080)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00081)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00082)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00083)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00084)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00085)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00086)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00087)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00088)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00089)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00090)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00091)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00092)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00093)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00094)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00095)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00096)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00097)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00098)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00099)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00100)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00101)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00102)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00103)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00104)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00105)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00106)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00107)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00108)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00109)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00110)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00111)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00112)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00113)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00114)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00115)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00116)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00117)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00118)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00119)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00120)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00121)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00122)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00123)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00124)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00125)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00126)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00127)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00128)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00129)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00130)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00131)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00132)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00133)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00134)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00135)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00136)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00137)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00138)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00139)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00140)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00141)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00142)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00143)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00144)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00145)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00146)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00147)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00148)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00149)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00150)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00151)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00152)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00153)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00154)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00155)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00156)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00157)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00158)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00159)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00160)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00161)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00162)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00163)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00164)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00165)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00166)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00167)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00168)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00169)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00170)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00171)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00172)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00173)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00174)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00175)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00176)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00177)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00178)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00179)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00180)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00181)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00182)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00183)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00184)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00185)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00186)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00187)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00188)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00189)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00190)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00191)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00192)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00193)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00194)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00195)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00196)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00197)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00198)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00199)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00200)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00201)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00202)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00203)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00204)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00205)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00206)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00207)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00208)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00209)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00210)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00211)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00212)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00213)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00214)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00215)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00216)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00217)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00218)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00219)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00220)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00221)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00222)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00223)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00224)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00225)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00226)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00227)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00228)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00229)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00230)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00231)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00232)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00233)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00234)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00235)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00236)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00237)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00238)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00239)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00240)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00241)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00242)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00243)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00244)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00245)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00246)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00247)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00248)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00249)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00250)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00251)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00252)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00253)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00254)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00255)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00256)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00257)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00258)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00259)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00260)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00261)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00262)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00263)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00264)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00265)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00266)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00267)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00268)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00269)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00270)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00271)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00272)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00273)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00274)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00275)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00276)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00277)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00278)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00279)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00280)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00281)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00282)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00283)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00284)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00285)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00286)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00287)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00288)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00289)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00290)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00291)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00292)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00293)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00294)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00295)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00296)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00297)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00298)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00299)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00300)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00301)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00302)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00303)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00304)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00305)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00306)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00307)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00308)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00309)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00310)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00311)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00312)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00313)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00314)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00315)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00316)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00317)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00318)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00319)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00320)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00321)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00322)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00323)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00324)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00325)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00326)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00327)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00328)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00329)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00330)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00331)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00332)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00333)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00334)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00335)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00336)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00337)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00338)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00339)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00340)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00341)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00342)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00343)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00344)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00345)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00346)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00347)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00348)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00349)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00350)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00351)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00352)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00353)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00354)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00355)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00356)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00357)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00358)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00359)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00360)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00361)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00362)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00363)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00364)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00365)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00366)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00367)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00368)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00369)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00370)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00371)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00372)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00373)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00374)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00375)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00376)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00377)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00378)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00379)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00380)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00381)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00382)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00383)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00384)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00385)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00386)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00387)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00388)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00389)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00390)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00391)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00392)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00393)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00394)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00395)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00396)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00397)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00398)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00399)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00400)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00401)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00402)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00403)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00404)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00405)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00406)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00407)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00408)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00409)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00410)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00411)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00412)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00413)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00414)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00415)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00416)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00417)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00418)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00419)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00420)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00421)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00422)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00423)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00424)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00425)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00426)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00427)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00428)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00429)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00430)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00431)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00432)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00433)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00434)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00435)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00436)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00437)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00438)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00439)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00440)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00441)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00442)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00443)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00444)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00445)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00446)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00447)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00448)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00449)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00450)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00451)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00452)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00453)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00454)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00455)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00456)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00457)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00458)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00459)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00460)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00461)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00462)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00463)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00464)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00465)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00466)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00467)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00468)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00469)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00470)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00471)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00472)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00473)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00474)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00475)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00476)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00477)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00478)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00479)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00480)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00481)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00482)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00483)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00484)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00485)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00486)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00487)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00488)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00489)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00490)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00491)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00492)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00493)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00494)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00495)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00496)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00497)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00498)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00499)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00500)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00501)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00502)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00503)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00504)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00505)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00506)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00507)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00508)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00509)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00510)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00511)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00512)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00513)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00514)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00515)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00516)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00517)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00518)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00519)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00520)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00521)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00522)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00523)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00524)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00525)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00526)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00527)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00528)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00529)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00530)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00531)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00532)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00533)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00534)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00535)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00536)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00537)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00538)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00539)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00540)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00541)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00542)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00543)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00544)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00545)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00546)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00547)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00548)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00549)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00550)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00551)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00552)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00553)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00554)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00555)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00556)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00557)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00558)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00559)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00560)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00561)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00562)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00563)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00564)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00565)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00566)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00567)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00568)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00569)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00570)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00571)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00572)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00573)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00574)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00575)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00576)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00577)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00578)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00579)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00580)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00581)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00582)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00583)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00584)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00585)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00586)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00587)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00588)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00589)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00590)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00591)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00592)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00593)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00594)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00595)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00596)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00597)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00598)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00599)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00600)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00601)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00602)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00603)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00604)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00605)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00606)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00607)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00608)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00609)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00610)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00611)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00612)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00613)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00614)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00615)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00616)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00617)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00618)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00619)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00620)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00621)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00622)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00623)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00624)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00625)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00626)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00627)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00628)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00629)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00630)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00631)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00632)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00633)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00634)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00635)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00636)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00637)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00638)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00639)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00640)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00641)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00642)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00643)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00644)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00645)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00646)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00647)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00648)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00649)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00650)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00651)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00652)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00653)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00654)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00655)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00656)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00657)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00658)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00659)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00660)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00661)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00662)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00663)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00664)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00665)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00666)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00667)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00668)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00669)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00670)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00671)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00672)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00673)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00674)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00675)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00676)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00677)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00678)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00679)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00680)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00681)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00682)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00683)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00684)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00685)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00686)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00687)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00688)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00689)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00690)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00691)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00692)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00693)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00694)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00695)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00696)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00697)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00698)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00699)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00700)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00701)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00702)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00703)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00704)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00705)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00706)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00707)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00708)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00709)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00710)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00711)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00712)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00713)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00714)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00715)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00716)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00717)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00718)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00719)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00720)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00721)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00722)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00723)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00724)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00725)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00726)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00727)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00728)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00729)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00730)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00731)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00732)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00733)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00734)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00735)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00736)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00737)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00738)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00739)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00740)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00741)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00742)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00743)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00744)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00745)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00746)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00747)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00748)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00749)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00750)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00751)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00752)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00753)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00754)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00755)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00756)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00757)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00758)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00759)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00760)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00761)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00762)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00763)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00764)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00765)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00766)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00767)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00768)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00769)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00770)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00771)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00772)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00773)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00774)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00775)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00776)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00777)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00778)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00779)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00780)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00781)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00782)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00783)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00784)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00785)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00786)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00787)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00788)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00789)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00790)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00791)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00792)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00793)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00794)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00795)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00796)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00797)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00798)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00799)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00800)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00801)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00802)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00803)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00804)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00805)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00806)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00807)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00808)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00809)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00810)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00811)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00812)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00813)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00814)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00815)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00816)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00817)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00818)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00819)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00820)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00821)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00822)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00823)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00824)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00825)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00826)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00827)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00828)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00829)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00830)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00831)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00832)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00833)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00834)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00835)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00836)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00837)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00838)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00839)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00840)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00841)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00842)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00843)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00844)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00845)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00846)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00847)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00848)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00849)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00850)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00851)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00852)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00853)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00854)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00855)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00856)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00857)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00858)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00859)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00860)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00861)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00862)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00863)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00864)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00865)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00866)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00867)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00868)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00869)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00870)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00871)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00872)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00873)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00874)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00875)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00876)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00877)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00878)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00879)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00880)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00881)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00882)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00883)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00884)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00885)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00886)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00887)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00888)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00889)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00890)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00891)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00892)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00893)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00894)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00895)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00896)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00897)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00898)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00899)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00900)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00901)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00902)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00903)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00904)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00905)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00906)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00907)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00908)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00909)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00910)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00911)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00912)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00913)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00914)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00915)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00916)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00917)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00918)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00919)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00920)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00921)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00922)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00923)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00924)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00925)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00926)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00927)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00928)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00929)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00930)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00931)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00932)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00933)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00934)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00935)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00936)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00937)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00938)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00939)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00940)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00941)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00942)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00943)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00944)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00945)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00946)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00947)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00948)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00949)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00950)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00951)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00952)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00953)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00954)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00955)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00956)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00957)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00958)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00959)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00960)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00961)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00962)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00963)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00964)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00965)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00966)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00967)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00968)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00969)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00970)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00971)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00972)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00973)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00974)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00975)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00976)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00977)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00978)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00979)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00980)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00981)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00982)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00983)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00984)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00985)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00986)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00987)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00988)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00989)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00990)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00991)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00992)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00993)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00994)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00995)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00996)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00997)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00998)==(?);
  List_Output(Implementation(COMP_3seq1_OPS_IMP),ID00999)==(?)
END
&
THEORY ListHeaderX IS
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00000)==(ID00000);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00001)==(ID00001);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00002)==(ID00002);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00003)==(ID00003);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00004)==(ID00004);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00005)==(ID00005);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00006)==(ID00006);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00007)==(ID00007);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00008)==(ID00008);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00009)==(ID00009);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00010)==(ID00010);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00011)==(ID00011);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00012)==(ID00012);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00013)==(ID00013);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00014)==(ID00014);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00015)==(ID00015);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00016)==(ID00016);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00017)==(ID00017);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00018)==(ID00018);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00019)==(ID00019);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00020)==(ID00020);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00021)==(ID00021);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00022)==(ID00022);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00023)==(ID00023);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00024)==(ID00024);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00025)==(ID00025);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00026)==(ID00026);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00027)==(ID00027);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00028)==(ID00028);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00029)==(ID00029);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00030)==(ID00030);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00031)==(ID00031);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00032)==(ID00032);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00033)==(ID00033);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00034)==(ID00034);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00035)==(ID00035);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00036)==(ID00036);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00037)==(ID00037);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00038)==(ID00038);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00039)==(ID00039);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00040)==(ID00040);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00041)==(ID00041);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00042)==(ID00042);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00043)==(ID00043);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00044)==(ID00044);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00045)==(ID00045);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00046)==(ID00046);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00047)==(ID00047);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00048)==(ID00048);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00049)==(ID00049);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00050)==(ID00050);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00051)==(ID00051);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00052)==(ID00052);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00053)==(ID00053);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00054)==(ID00054);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00055)==(ID00055);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00056)==(ID00056);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00057)==(ID00057);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00058)==(ID00058);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00059)==(ID00059);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00060)==(ID00060);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00061)==(ID00061);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00062)==(ID00062);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00063)==(ID00063);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00064)==(ID00064);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00065)==(ID00065);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00066)==(ID00066);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00067)==(ID00067);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00068)==(ID00068);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00069)==(ID00069);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00070)==(ID00070);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00071)==(ID00071);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00072)==(ID00072);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00073)==(ID00073);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00074)==(ID00074);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00075)==(ID00075);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00076)==(ID00076);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00077)==(ID00077);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00078)==(ID00078);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00079)==(ID00079);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00080)==(ID00080);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00081)==(ID00081);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00082)==(ID00082);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00083)==(ID00083);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00084)==(ID00084);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00085)==(ID00085);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00086)==(ID00086);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00087)==(ID00087);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00088)==(ID00088);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00089)==(ID00089);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00090)==(ID00090);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00091)==(ID00091);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00092)==(ID00092);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00093)==(ID00093);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00094)==(ID00094);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00095)==(ID00095);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00096)==(ID00096);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00097)==(ID00097);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00098)==(ID00098);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00099)==(ID00099);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00100)==(ID00100);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00101)==(ID00101);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00102)==(ID00102);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00103)==(ID00103);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00104)==(ID00104);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00105)==(ID00105);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00106)==(ID00106);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00107)==(ID00107);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00108)==(ID00108);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00109)==(ID00109);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00110)==(ID00110);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00111)==(ID00111);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00112)==(ID00112);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00113)==(ID00113);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00114)==(ID00114);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00115)==(ID00115);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00116)==(ID00116);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00117)==(ID00117);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00118)==(ID00118);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00119)==(ID00119);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00120)==(ID00120);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00121)==(ID00121);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00122)==(ID00122);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00123)==(ID00123);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00124)==(ID00124);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00125)==(ID00125);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00126)==(ID00126);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00127)==(ID00127);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00128)==(ID00128);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00129)==(ID00129);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00130)==(ID00130);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00131)==(ID00131);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00132)==(ID00132);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00133)==(ID00133);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00134)==(ID00134);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00135)==(ID00135);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00136)==(ID00136);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00137)==(ID00137);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00138)==(ID00138);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00139)==(ID00139);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00140)==(ID00140);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00141)==(ID00141);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00142)==(ID00142);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00143)==(ID00143);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00144)==(ID00144);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00145)==(ID00145);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00146)==(ID00146);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00147)==(ID00147);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00148)==(ID00148);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00149)==(ID00149);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00150)==(ID00150);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00151)==(ID00151);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00152)==(ID00152);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00153)==(ID00153);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00154)==(ID00154);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00155)==(ID00155);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00156)==(ID00156);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00157)==(ID00157);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00158)==(ID00158);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00159)==(ID00159);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00160)==(ID00160);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00161)==(ID00161);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00162)==(ID00162);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00163)==(ID00163);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00164)==(ID00164);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00165)==(ID00165);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00166)==(ID00166);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00167)==(ID00167);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00168)==(ID00168);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00169)==(ID00169);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00170)==(ID00170);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00171)==(ID00171);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00172)==(ID00172);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00173)==(ID00173);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00174)==(ID00174);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00175)==(ID00175);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00176)==(ID00176);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00177)==(ID00177);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00178)==(ID00178);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00179)==(ID00179);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00180)==(ID00180);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00181)==(ID00181);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00182)==(ID00182);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00183)==(ID00183);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00184)==(ID00184);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00185)==(ID00185);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00186)==(ID00186);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00187)==(ID00187);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00188)==(ID00188);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00189)==(ID00189);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00190)==(ID00190);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00191)==(ID00191);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00192)==(ID00192);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00193)==(ID00193);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00194)==(ID00194);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00195)==(ID00195);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00196)==(ID00196);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00197)==(ID00197);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00198)==(ID00198);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00199)==(ID00199);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00200)==(ID00200);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00201)==(ID00201);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00202)==(ID00202);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00203)==(ID00203);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00204)==(ID00204);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00205)==(ID00205);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00206)==(ID00206);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00207)==(ID00207);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00208)==(ID00208);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00209)==(ID00209);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00210)==(ID00210);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00211)==(ID00211);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00212)==(ID00212);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00213)==(ID00213);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00214)==(ID00214);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00215)==(ID00215);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00216)==(ID00216);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00217)==(ID00217);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00218)==(ID00218);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00219)==(ID00219);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00220)==(ID00220);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00221)==(ID00221);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00222)==(ID00222);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00223)==(ID00223);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00224)==(ID00224);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00225)==(ID00225);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00226)==(ID00226);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00227)==(ID00227);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00228)==(ID00228);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00229)==(ID00229);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00230)==(ID00230);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00231)==(ID00231);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00232)==(ID00232);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00233)==(ID00233);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00234)==(ID00234);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00235)==(ID00235);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00236)==(ID00236);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00237)==(ID00237);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00238)==(ID00238);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00239)==(ID00239);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00240)==(ID00240);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00241)==(ID00241);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00242)==(ID00242);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00243)==(ID00243);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00244)==(ID00244);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00245)==(ID00245);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00246)==(ID00246);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00247)==(ID00247);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00248)==(ID00248);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00249)==(ID00249);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00250)==(ID00250);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00251)==(ID00251);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00252)==(ID00252);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00253)==(ID00253);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00254)==(ID00254);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00255)==(ID00255);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00256)==(ID00256);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00257)==(ID00257);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00258)==(ID00258);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00259)==(ID00259);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00260)==(ID00260);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00261)==(ID00261);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00262)==(ID00262);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00263)==(ID00263);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00264)==(ID00264);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00265)==(ID00265);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00266)==(ID00266);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00267)==(ID00267);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00268)==(ID00268);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00269)==(ID00269);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00270)==(ID00270);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00271)==(ID00271);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00272)==(ID00272);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00273)==(ID00273);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00274)==(ID00274);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00275)==(ID00275);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00276)==(ID00276);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00277)==(ID00277);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00278)==(ID00278);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00279)==(ID00279);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00280)==(ID00280);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00281)==(ID00281);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00282)==(ID00282);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00283)==(ID00283);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00284)==(ID00284);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00285)==(ID00285);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00286)==(ID00286);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00287)==(ID00287);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00288)==(ID00288);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00289)==(ID00289);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00290)==(ID00290);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00291)==(ID00291);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00292)==(ID00292);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00293)==(ID00293);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00294)==(ID00294);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00295)==(ID00295);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00296)==(ID00296);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00297)==(ID00297);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00298)==(ID00298);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00299)==(ID00299);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00300)==(ID00300);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00301)==(ID00301);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00302)==(ID00302);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00303)==(ID00303);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00304)==(ID00304);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00305)==(ID00305);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00306)==(ID00306);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00307)==(ID00307);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00308)==(ID00308);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00309)==(ID00309);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00310)==(ID00310);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00311)==(ID00311);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00312)==(ID00312);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00313)==(ID00313);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00314)==(ID00314);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00315)==(ID00315);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00316)==(ID00316);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00317)==(ID00317);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00318)==(ID00318);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00319)==(ID00319);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00320)==(ID00320);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00321)==(ID00321);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00322)==(ID00322);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00323)==(ID00323);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00324)==(ID00324);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00325)==(ID00325);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00326)==(ID00326);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00327)==(ID00327);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00328)==(ID00328);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00329)==(ID00329);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00330)==(ID00330);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00331)==(ID00331);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00332)==(ID00332);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00333)==(ID00333);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00334)==(ID00334);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00335)==(ID00335);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00336)==(ID00336);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00337)==(ID00337);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00338)==(ID00338);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00339)==(ID00339);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00340)==(ID00340);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00341)==(ID00341);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00342)==(ID00342);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00343)==(ID00343);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00344)==(ID00344);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00345)==(ID00345);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00346)==(ID00346);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00347)==(ID00347);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00348)==(ID00348);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00349)==(ID00349);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00350)==(ID00350);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00351)==(ID00351);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00352)==(ID00352);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00353)==(ID00353);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00354)==(ID00354);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00355)==(ID00355);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00356)==(ID00356);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00357)==(ID00357);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00358)==(ID00358);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00359)==(ID00359);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00360)==(ID00360);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00361)==(ID00361);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00362)==(ID00362);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00363)==(ID00363);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00364)==(ID00364);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00365)==(ID00365);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00366)==(ID00366);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00367)==(ID00367);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00368)==(ID00368);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00369)==(ID00369);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00370)==(ID00370);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00371)==(ID00371);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00372)==(ID00372);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00373)==(ID00373);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00374)==(ID00374);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00375)==(ID00375);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00376)==(ID00376);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00377)==(ID00377);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00378)==(ID00378);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00379)==(ID00379);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00380)==(ID00380);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00381)==(ID00381);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00382)==(ID00382);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00383)==(ID00383);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00384)==(ID00384);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00385)==(ID00385);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00386)==(ID00386);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00387)==(ID00387);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00388)==(ID00388);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00389)==(ID00389);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00390)==(ID00390);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00391)==(ID00391);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00392)==(ID00392);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00393)==(ID00393);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00394)==(ID00394);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00395)==(ID00395);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00396)==(ID00396);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00397)==(ID00397);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00398)==(ID00398);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00399)==(ID00399);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00400)==(ID00400);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00401)==(ID00401);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00402)==(ID00402);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00403)==(ID00403);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00404)==(ID00404);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00405)==(ID00405);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00406)==(ID00406);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00407)==(ID00407);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00408)==(ID00408);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00409)==(ID00409);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00410)==(ID00410);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00411)==(ID00411);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00412)==(ID00412);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00413)==(ID00413);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00414)==(ID00414);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00415)==(ID00415);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00416)==(ID00416);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00417)==(ID00417);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00418)==(ID00418);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00419)==(ID00419);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00420)==(ID00420);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00421)==(ID00421);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00422)==(ID00422);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00423)==(ID00423);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00424)==(ID00424);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00425)==(ID00425);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00426)==(ID00426);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00427)==(ID00427);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00428)==(ID00428);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00429)==(ID00429);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00430)==(ID00430);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00431)==(ID00431);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00432)==(ID00432);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00433)==(ID00433);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00434)==(ID00434);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00435)==(ID00435);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00436)==(ID00436);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00437)==(ID00437);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00438)==(ID00438);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00439)==(ID00439);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00440)==(ID00440);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00441)==(ID00441);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00442)==(ID00442);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00443)==(ID00443);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00444)==(ID00444);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00445)==(ID00445);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00446)==(ID00446);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00447)==(ID00447);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00448)==(ID00448);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00449)==(ID00449);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00450)==(ID00450);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00451)==(ID00451);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00452)==(ID00452);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00453)==(ID00453);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00454)==(ID00454);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00455)==(ID00455);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00456)==(ID00456);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00457)==(ID00457);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00458)==(ID00458);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00459)==(ID00459);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00460)==(ID00460);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00461)==(ID00461);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00462)==(ID00462);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00463)==(ID00463);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00464)==(ID00464);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00465)==(ID00465);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00466)==(ID00466);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00467)==(ID00467);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00468)==(ID00468);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00469)==(ID00469);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00470)==(ID00470);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00471)==(ID00471);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00472)==(ID00472);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00473)==(ID00473);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00474)==(ID00474);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00475)==(ID00475);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00476)==(ID00476);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00477)==(ID00477);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00478)==(ID00478);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00479)==(ID00479);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00480)==(ID00480);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00481)==(ID00481);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00482)==(ID00482);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00483)==(ID00483);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00484)==(ID00484);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00485)==(ID00485);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00486)==(ID00486);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00487)==(ID00487);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00488)==(ID00488);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00489)==(ID00489);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00490)==(ID00490);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00491)==(ID00491);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00492)==(ID00492);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00493)==(ID00493);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00494)==(ID00494);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00495)==(ID00495);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00496)==(ID00496);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00497)==(ID00497);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00498)==(ID00498);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00499)==(ID00499);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00500)==(ID00500);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00501)==(ID00501);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00502)==(ID00502);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00503)==(ID00503);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00504)==(ID00504);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00505)==(ID00505);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00506)==(ID00506);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00507)==(ID00507);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00508)==(ID00508);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00509)==(ID00509);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00510)==(ID00510);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00511)==(ID00511);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00512)==(ID00512);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00513)==(ID00513);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00514)==(ID00514);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00515)==(ID00515);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00516)==(ID00516);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00517)==(ID00517);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00518)==(ID00518);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00519)==(ID00519);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00520)==(ID00520);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00521)==(ID00521);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00522)==(ID00522);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00523)==(ID00523);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00524)==(ID00524);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00525)==(ID00525);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00526)==(ID00526);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00527)==(ID00527);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00528)==(ID00528);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00529)==(ID00529);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00530)==(ID00530);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00531)==(ID00531);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00532)==(ID00532);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00533)==(ID00533);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00534)==(ID00534);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00535)==(ID00535);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00536)==(ID00536);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00537)==(ID00537);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00538)==(ID00538);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00539)==(ID00539);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00540)==(ID00540);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00541)==(ID00541);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00542)==(ID00542);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00543)==(ID00543);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00544)==(ID00544);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00545)==(ID00545);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00546)==(ID00546);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00547)==(ID00547);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00548)==(ID00548);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00549)==(ID00549);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00550)==(ID00550);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00551)==(ID00551);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00552)==(ID00552);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00553)==(ID00553);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00554)==(ID00554);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00555)==(ID00555);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00556)==(ID00556);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00557)==(ID00557);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00558)==(ID00558);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00559)==(ID00559);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00560)==(ID00560);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00561)==(ID00561);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00562)==(ID00562);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00563)==(ID00563);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00564)==(ID00564);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00565)==(ID00565);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00566)==(ID00566);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00567)==(ID00567);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00568)==(ID00568);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00569)==(ID00569);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00570)==(ID00570);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00571)==(ID00571);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00572)==(ID00572);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00573)==(ID00573);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00574)==(ID00574);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00575)==(ID00575);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00576)==(ID00576);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00577)==(ID00577);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00578)==(ID00578);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00579)==(ID00579);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00580)==(ID00580);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00581)==(ID00581);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00582)==(ID00582);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00583)==(ID00583);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00584)==(ID00584);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00585)==(ID00585);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00586)==(ID00586);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00587)==(ID00587);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00588)==(ID00588);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00589)==(ID00589);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00590)==(ID00590);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00591)==(ID00591);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00592)==(ID00592);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00593)==(ID00593);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00594)==(ID00594);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00595)==(ID00595);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00596)==(ID00596);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00597)==(ID00597);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00598)==(ID00598);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00599)==(ID00599);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00600)==(ID00600);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00601)==(ID00601);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00602)==(ID00602);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00603)==(ID00603);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00604)==(ID00604);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00605)==(ID00605);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00606)==(ID00606);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00607)==(ID00607);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00608)==(ID00608);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00609)==(ID00609);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00610)==(ID00610);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00611)==(ID00611);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00612)==(ID00612);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00613)==(ID00613);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00614)==(ID00614);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00615)==(ID00615);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00616)==(ID00616);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00617)==(ID00617);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00618)==(ID00618);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00619)==(ID00619);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00620)==(ID00620);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00621)==(ID00621);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00622)==(ID00622);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00623)==(ID00623);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00624)==(ID00624);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00625)==(ID00625);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00626)==(ID00626);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00627)==(ID00627);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00628)==(ID00628);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00629)==(ID00629);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00630)==(ID00630);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00631)==(ID00631);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00632)==(ID00632);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00633)==(ID00633);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00634)==(ID00634);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00635)==(ID00635);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00636)==(ID00636);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00637)==(ID00637);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00638)==(ID00638);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00639)==(ID00639);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00640)==(ID00640);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00641)==(ID00641);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00642)==(ID00642);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00643)==(ID00643);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00644)==(ID00644);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00645)==(ID00645);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00646)==(ID00646);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00647)==(ID00647);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00648)==(ID00648);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00649)==(ID00649);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00650)==(ID00650);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00651)==(ID00651);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00652)==(ID00652);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00653)==(ID00653);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00654)==(ID00654);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00655)==(ID00655);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00656)==(ID00656);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00657)==(ID00657);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00658)==(ID00658);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00659)==(ID00659);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00660)==(ID00660);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00661)==(ID00661);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00662)==(ID00662);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00663)==(ID00663);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00664)==(ID00664);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00665)==(ID00665);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00666)==(ID00666);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00667)==(ID00667);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00668)==(ID00668);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00669)==(ID00669);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00670)==(ID00670);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00671)==(ID00671);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00672)==(ID00672);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00673)==(ID00673);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00674)==(ID00674);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00675)==(ID00675);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00676)==(ID00676);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00677)==(ID00677);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00678)==(ID00678);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00679)==(ID00679);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00680)==(ID00680);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00681)==(ID00681);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00682)==(ID00682);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00683)==(ID00683);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00684)==(ID00684);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00685)==(ID00685);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00686)==(ID00686);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00687)==(ID00687);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00688)==(ID00688);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00689)==(ID00689);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00690)==(ID00690);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00691)==(ID00691);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00692)==(ID00692);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00693)==(ID00693);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00694)==(ID00694);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00695)==(ID00695);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00696)==(ID00696);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00697)==(ID00697);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00698)==(ID00698);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00699)==(ID00699);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00700)==(ID00700);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00701)==(ID00701);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00702)==(ID00702);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00703)==(ID00703);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00704)==(ID00704);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00705)==(ID00705);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00706)==(ID00706);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00707)==(ID00707);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00708)==(ID00708);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00709)==(ID00709);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00710)==(ID00710);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00711)==(ID00711);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00712)==(ID00712);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00713)==(ID00713);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00714)==(ID00714);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00715)==(ID00715);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00716)==(ID00716);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00717)==(ID00717);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00718)==(ID00718);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00719)==(ID00719);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00720)==(ID00720);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00721)==(ID00721);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00722)==(ID00722);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00723)==(ID00723);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00724)==(ID00724);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00725)==(ID00725);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00726)==(ID00726);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00727)==(ID00727);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00728)==(ID00728);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00729)==(ID00729);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00730)==(ID00730);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00731)==(ID00731);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00732)==(ID00732);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00733)==(ID00733);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00734)==(ID00734);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00735)==(ID00735);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00736)==(ID00736);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00737)==(ID00737);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00738)==(ID00738);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00739)==(ID00739);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00740)==(ID00740);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00741)==(ID00741);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00742)==(ID00742);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00743)==(ID00743);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00744)==(ID00744);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00745)==(ID00745);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00746)==(ID00746);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00747)==(ID00747);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00748)==(ID00748);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00749)==(ID00749);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00750)==(ID00750);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00751)==(ID00751);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00752)==(ID00752);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00753)==(ID00753);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00754)==(ID00754);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00755)==(ID00755);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00756)==(ID00756);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00757)==(ID00757);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00758)==(ID00758);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00759)==(ID00759);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00760)==(ID00760);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00761)==(ID00761);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00762)==(ID00762);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00763)==(ID00763);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00764)==(ID00764);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00765)==(ID00765);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00766)==(ID00766);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00767)==(ID00767);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00768)==(ID00768);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00769)==(ID00769);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00770)==(ID00770);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00771)==(ID00771);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00772)==(ID00772);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00773)==(ID00773);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00774)==(ID00774);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00775)==(ID00775);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00776)==(ID00776);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00777)==(ID00777);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00778)==(ID00778);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00779)==(ID00779);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00780)==(ID00780);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00781)==(ID00781);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00782)==(ID00782);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00783)==(ID00783);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00784)==(ID00784);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00785)==(ID00785);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00786)==(ID00786);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00787)==(ID00787);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00788)==(ID00788);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00789)==(ID00789);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00790)==(ID00790);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00791)==(ID00791);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00792)==(ID00792);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00793)==(ID00793);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00794)==(ID00794);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00795)==(ID00795);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00796)==(ID00796);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00797)==(ID00797);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00798)==(ID00798);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00799)==(ID00799);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00800)==(ID00800);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00801)==(ID00801);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00802)==(ID00802);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00803)==(ID00803);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00804)==(ID00804);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00805)==(ID00805);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00806)==(ID00806);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00807)==(ID00807);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00808)==(ID00808);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00809)==(ID00809);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00810)==(ID00810);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00811)==(ID00811);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00812)==(ID00812);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00813)==(ID00813);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00814)==(ID00814);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00815)==(ID00815);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00816)==(ID00816);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00817)==(ID00817);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00818)==(ID00818);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00819)==(ID00819);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00820)==(ID00820);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00821)==(ID00821);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00822)==(ID00822);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00823)==(ID00823);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00824)==(ID00824);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00825)==(ID00825);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00826)==(ID00826);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00827)==(ID00827);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00828)==(ID00828);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00829)==(ID00829);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00830)==(ID00830);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00831)==(ID00831);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00832)==(ID00832);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00833)==(ID00833);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00834)==(ID00834);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00835)==(ID00835);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00836)==(ID00836);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00837)==(ID00837);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00838)==(ID00838);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00839)==(ID00839);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00840)==(ID00840);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00841)==(ID00841);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00842)==(ID00842);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00843)==(ID00843);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00844)==(ID00844);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00845)==(ID00845);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00846)==(ID00846);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00847)==(ID00847);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00848)==(ID00848);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00849)==(ID00849);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00850)==(ID00850);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00851)==(ID00851);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00852)==(ID00852);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00853)==(ID00853);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00854)==(ID00854);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00855)==(ID00855);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00856)==(ID00856);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00857)==(ID00857);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00858)==(ID00858);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00859)==(ID00859);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00860)==(ID00860);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00861)==(ID00861);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00862)==(ID00862);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00863)==(ID00863);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00864)==(ID00864);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00865)==(ID00865);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00866)==(ID00866);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00867)==(ID00867);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00868)==(ID00868);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00869)==(ID00869);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00870)==(ID00870);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00871)==(ID00871);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00872)==(ID00872);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00873)==(ID00873);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00874)==(ID00874);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00875)==(ID00875);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00876)==(ID00876);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00877)==(ID00877);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00878)==(ID00878);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00879)==(ID00879);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00880)==(ID00880);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00881)==(ID00881);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00882)==(ID00882);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00883)==(ID00883);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00884)==(ID00884);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00885)==(ID00885);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00886)==(ID00886);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00887)==(ID00887);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00888)==(ID00888);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00889)==(ID00889);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00890)==(ID00890);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00891)==(ID00891);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00892)==(ID00892);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00893)==(ID00893);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00894)==(ID00894);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00895)==(ID00895);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00896)==(ID00896);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00897)==(ID00897);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00898)==(ID00898);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00899)==(ID00899);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00900)==(ID00900);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00901)==(ID00901);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00902)==(ID00902);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00903)==(ID00903);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00904)==(ID00904);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00905)==(ID00905);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00906)==(ID00906);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00907)==(ID00907);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00908)==(ID00908);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00909)==(ID00909);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00910)==(ID00910);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00911)==(ID00911);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00912)==(ID00912);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00913)==(ID00913);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00914)==(ID00914);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00915)==(ID00915);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00916)==(ID00916);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00917)==(ID00917);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00918)==(ID00918);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00919)==(ID00919);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00920)==(ID00920);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00921)==(ID00921);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00922)==(ID00922);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00923)==(ID00923);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00924)==(ID00924);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00925)==(ID00925);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00926)==(ID00926);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00927)==(ID00927);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00928)==(ID00928);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00929)==(ID00929);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00930)==(ID00930);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00931)==(ID00931);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00932)==(ID00932);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00933)==(ID00933);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00934)==(ID00934);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00935)==(ID00935);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00936)==(ID00936);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00937)==(ID00937);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00938)==(ID00938);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00939)==(ID00939);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00940)==(ID00940);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00941)==(ID00941);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00942)==(ID00942);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00943)==(ID00943);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00944)==(ID00944);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00945)==(ID00945);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00946)==(ID00946);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00947)==(ID00947);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00948)==(ID00948);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00949)==(ID00949);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00950)==(ID00950);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00951)==(ID00951);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00952)==(ID00952);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00953)==(ID00953);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00954)==(ID00954);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00955)==(ID00955);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00956)==(ID00956);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00957)==(ID00957);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00958)==(ID00958);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00959)==(ID00959);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00960)==(ID00960);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00961)==(ID00961);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00962)==(ID00962);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00963)==(ID00963);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00964)==(ID00964);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00965)==(ID00965);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00966)==(ID00966);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00967)==(ID00967);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00968)==(ID00968);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00969)==(ID00969);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00970)==(ID00970);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00971)==(ID00971);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00972)==(ID00972);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00973)==(ID00973);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00974)==(ID00974);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00975)==(ID00975);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00976)==(ID00976);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00977)==(ID00977);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00978)==(ID00978);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00979)==(ID00979);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00980)==(ID00980);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00981)==(ID00981);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00982)==(ID00982);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00983)==(ID00983);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00984)==(ID00984);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00985)==(ID00985);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00986)==(ID00986);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00987)==(ID00987);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00988)==(ID00988);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00989)==(ID00989);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00990)==(ID00990);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00991)==(ID00991);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00992)==(ID00992);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00993)==(ID00993);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00994)==(ID00994);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00995)==(ID00995);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00996)==(ID00996);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00997)==(ID00997);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00998)==(ID00998);
  List_Header(Implementation(COMP_3seq1_OPS_IMP),ID00999)==(ID00999)
END
&
THEORY ListPreconditionX IS
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00000)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00000)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00001)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00001)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00002)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00002)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00003)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00003)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00004)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00004)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00005)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00005)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00006)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00006)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00007)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00007)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00008)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00008)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00009)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00009)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00010)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00010)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00011)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00011)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00012)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00012)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00013)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00013)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00014)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00014)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00015)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00015)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00016)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00016)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00017)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00017)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00018)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00018)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00019)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00019)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00020)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00020)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00021)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00021)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00022)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00022)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00023)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00023)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00024)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00024)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00025)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00025)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00026)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00026)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00027)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00027)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00028)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00028)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00029)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00029)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00030)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00030)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00031)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00031)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00032)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00032)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00033)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00033)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00034)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00034)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00035)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00035)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00036)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00036)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00037)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00037)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00038)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00038)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00039)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00039)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00040)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00040)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00041)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00041)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00042)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00042)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00043)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00043)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00044)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00044)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00045)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00045)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00046)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00046)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00047)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00047)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00048)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00048)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00049)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00049)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00050)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00050)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00051)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00051)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00052)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00052)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00053)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00053)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00054)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00054)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00055)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00055)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00056)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00056)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00057)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00057)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00058)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00058)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00059)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00059)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00060)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00060)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00061)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00061)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00062)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00062)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00063)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00063)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00064)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00064)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00065)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00065)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00066)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00066)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00067)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00067)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00068)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00068)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00069)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00069)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00070)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00070)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00071)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00071)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00072)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00072)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00073)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00073)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00074)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00074)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00075)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00075)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00076)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00076)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00077)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00077)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00078)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00078)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00079)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00079)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00080)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00080)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00081)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00081)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00082)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00082)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00083)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00083)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00084)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00084)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00085)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00085)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00086)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00086)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00087)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00087)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00088)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00088)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00089)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00089)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00090)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00090)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00091)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00091)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00092)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00092)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00093)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00093)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00094)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00094)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00095)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00095)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00096)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00096)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00097)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00097)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00098)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00098)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00099)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00099)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00100)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00100)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00101)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00101)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00102)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00102)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00103)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00103)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00104)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00104)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00105)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00105)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00106)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00106)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00107)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00107)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00108)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00108)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00109)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00109)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00110)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00110)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00111)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00111)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00112)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00112)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00113)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00113)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00114)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00114)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00115)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00115)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00116)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00116)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00117)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00117)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00118)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00118)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00119)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00119)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00120)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00120)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00121)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00121)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00122)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00122)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00123)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00123)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00124)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00124)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00125)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00125)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00126)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00126)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00127)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00127)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00128)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00128)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00129)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00129)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00130)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00130)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00131)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00131)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00132)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00132)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00133)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00133)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00134)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00134)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00135)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00135)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00136)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00136)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00137)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00137)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00138)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00138)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00139)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00139)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00140)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00140)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00141)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00141)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00142)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00142)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00143)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00143)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00144)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00144)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00145)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00145)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00146)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00146)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00147)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00147)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00148)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00148)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00149)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00149)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00150)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00150)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00151)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00151)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00152)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00152)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00153)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00153)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00154)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00154)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00155)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00155)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00156)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00156)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00157)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00157)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00158)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00158)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00159)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00159)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00160)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00160)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00161)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00161)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00162)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00162)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00163)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00163)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00164)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00164)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00165)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00165)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00166)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00166)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00167)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00167)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00168)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00168)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00169)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00169)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00170)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00170)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00171)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00171)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00172)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00172)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00173)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00173)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00174)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00174)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00175)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00175)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00176)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00176)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00177)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00177)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00178)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00178)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00179)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00179)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00180)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00180)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00181)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00181)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00182)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00182)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00183)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00183)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00184)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00184)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00185)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00185)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00186)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00186)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00187)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00187)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00188)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00188)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00189)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00189)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00190)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00190)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00191)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00191)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00192)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00192)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00193)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00193)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00194)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00194)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00195)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00195)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00196)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00196)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00197)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00197)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00198)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00198)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00199)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00199)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00200)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00200)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00201)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00201)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00202)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00202)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00203)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00203)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00204)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00204)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00205)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00205)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00206)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00206)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00207)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00207)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00208)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00208)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00209)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00209)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00210)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00210)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00211)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00211)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00212)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00212)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00213)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00213)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00214)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00214)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00215)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00215)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00216)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00216)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00217)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00217)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00218)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00218)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00219)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00219)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00220)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00220)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00221)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00221)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00222)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00222)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00223)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00223)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00224)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00224)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00225)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00225)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00226)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00226)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00227)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00227)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00228)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00228)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00229)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00229)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00230)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00230)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00231)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00231)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00232)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00232)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00233)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00233)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00234)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00234)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00235)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00235)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00236)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00236)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00237)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00237)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00238)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00238)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00239)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00239)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00240)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00240)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00241)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00241)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00242)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00242)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00243)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00243)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00244)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00244)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00245)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00245)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00246)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00246)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00247)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00247)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00248)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00248)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00249)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00249)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00250)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00250)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00251)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00251)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00252)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00252)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00253)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00253)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00254)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00254)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00255)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00255)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00256)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00256)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00257)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00257)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00258)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00258)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00259)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00259)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00260)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00260)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00261)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00261)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00262)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00262)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00263)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00263)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00264)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00264)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00265)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00265)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00266)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00266)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00267)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00267)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00268)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00268)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00269)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00269)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00270)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00270)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00271)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00271)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00272)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00272)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00273)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00273)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00274)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00274)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00275)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00275)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00276)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00276)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00277)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00277)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00278)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00278)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00279)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00279)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00280)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00280)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00281)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00281)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00282)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00282)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00283)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00283)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00284)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00284)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00285)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00285)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00286)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00286)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00287)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00287)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00288)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00288)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00289)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00289)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00290)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00290)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00291)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00291)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00292)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00292)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00293)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00293)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00294)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00294)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00295)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00295)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00296)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00296)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00297)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00297)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00298)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00298)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00299)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00299)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00300)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00300)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00301)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00301)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00302)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00302)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00303)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00303)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00304)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00304)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00305)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00305)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00306)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00306)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00307)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00307)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00308)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00308)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00309)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00309)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00310)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00310)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00311)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00311)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00312)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00312)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00313)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00313)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00314)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00314)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00315)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00315)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00316)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00316)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00317)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00317)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00318)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00318)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00319)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00319)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00320)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00320)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00321)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00321)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00322)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00322)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00323)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00323)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00324)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00324)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00325)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00325)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00326)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00326)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00327)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00327)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00328)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00328)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00329)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00329)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00330)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00330)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00331)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00331)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00332)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00332)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00333)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00333)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00334)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00334)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00335)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00335)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00336)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00336)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00337)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00337)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00338)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00338)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00339)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00339)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00340)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00340)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00341)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00341)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00342)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00342)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00343)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00343)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00344)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00344)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00345)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00345)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00346)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00346)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00347)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00347)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00348)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00348)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00349)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00349)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00350)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00350)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00351)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00351)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00352)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00352)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00353)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00353)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00354)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00354)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00355)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00355)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00356)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00356)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00357)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00357)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00358)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00358)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00359)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00359)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00360)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00360)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00361)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00361)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00362)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00362)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00363)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00363)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00364)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00364)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00365)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00365)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00366)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00366)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00367)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00367)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00368)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00368)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00369)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00369)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00370)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00370)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00371)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00371)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00372)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00372)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00373)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00373)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00374)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00374)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00375)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00375)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00376)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00376)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00377)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00377)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00378)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00378)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00379)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00379)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00380)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00380)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00381)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00381)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00382)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00382)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00383)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00383)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00384)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00384)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00385)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00385)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00386)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00386)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00387)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00387)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00388)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00388)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00389)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00389)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00390)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00390)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00391)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00391)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00392)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00392)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00393)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00393)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00394)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00394)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00395)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00395)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00396)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00396)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00397)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00397)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00398)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00398)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00399)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00399)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00400)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00400)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00401)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00401)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00402)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00402)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00403)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00403)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00404)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00404)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00405)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00405)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00406)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00406)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00407)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00407)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00408)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00408)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00409)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00409)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00410)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00410)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00411)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00411)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00412)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00412)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00413)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00413)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00414)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00414)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00415)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00415)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00416)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00416)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00417)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00417)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00418)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00418)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00419)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00419)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00420)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00420)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00421)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00421)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00422)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00422)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00423)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00423)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00424)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00424)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00425)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00425)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00426)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00426)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00427)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00427)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00428)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00428)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00429)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00429)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00430)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00430)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00431)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00431)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00432)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00432)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00433)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00433)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00434)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00434)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00435)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00435)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00436)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00436)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00437)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00437)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00438)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00438)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00439)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00439)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00440)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00440)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00441)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00441)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00442)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00442)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00443)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00443)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00444)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00444)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00445)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00445)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00446)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00446)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00447)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00447)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00448)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00448)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00449)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00449)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00450)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00450)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00451)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00451)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00452)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00452)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00453)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00453)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00454)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00454)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00455)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00455)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00456)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00456)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00457)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00457)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00458)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00458)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00459)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00459)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00460)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00460)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00461)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00461)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00462)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00462)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00463)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00463)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00464)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00464)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00465)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00465)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00466)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00466)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00467)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00467)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00468)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00468)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00469)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00469)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00470)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00470)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00471)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00471)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00472)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00472)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00473)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00473)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00474)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00474)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00475)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00475)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00476)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00476)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00477)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00477)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00478)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00478)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00479)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00479)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00480)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00480)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00481)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00481)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00482)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00482)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00483)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00483)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00484)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00484)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00485)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00485)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00486)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00486)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00487)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00487)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00488)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00488)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00489)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00489)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00490)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00490)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00491)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00491)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00492)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00492)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00493)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00493)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00494)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00494)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00495)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00495)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00496)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00496)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00497)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00497)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00498)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00498)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00499)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00499)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00500)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00500)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00501)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00501)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00502)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00502)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00503)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00503)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00504)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00504)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00505)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00505)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00506)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00506)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00507)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00507)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00508)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00508)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00509)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00509)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00510)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00510)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00511)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00511)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00512)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00512)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00513)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00513)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00514)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00514)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00515)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00515)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00516)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00516)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00517)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00517)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00518)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00518)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00519)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00519)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00520)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00520)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00521)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00521)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00522)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00522)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00523)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00523)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00524)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00524)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00525)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00525)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00526)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00526)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00527)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00527)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00528)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00528)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00529)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00529)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00530)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00530)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00531)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00531)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00532)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00532)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00533)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00533)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00534)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00534)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00535)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00535)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00536)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00536)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00537)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00537)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00538)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00538)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00539)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00539)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00540)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00540)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00541)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00541)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00542)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00542)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00543)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00543)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00544)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00544)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00545)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00545)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00546)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00546)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00547)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00547)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00548)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00548)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00549)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00549)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00550)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00550)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00551)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00551)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00552)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00552)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00553)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00553)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00554)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00554)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00555)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00555)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00556)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00556)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00557)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00557)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00558)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00558)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00559)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00559)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00560)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00560)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00561)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00561)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00562)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00562)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00563)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00563)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00564)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00564)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00565)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00565)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00566)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00566)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00567)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00567)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00568)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00568)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00569)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00569)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00570)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00570)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00571)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00571)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00572)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00572)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00573)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00573)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00574)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00574)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00575)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00575)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00576)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00576)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00577)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00577)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00578)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00578)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00579)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00579)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00580)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00580)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00581)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00581)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00582)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00582)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00583)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00583)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00584)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00584)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00585)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00585)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00586)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00586)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00587)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00587)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00588)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00588)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00589)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00589)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00590)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00590)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00591)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00591)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00592)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00592)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00593)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00593)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00594)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00594)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00595)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00595)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00596)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00596)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00597)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00597)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00598)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00598)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00599)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00599)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00600)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00600)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00601)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00601)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00602)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00602)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00603)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00603)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00604)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00604)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00605)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00605)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00606)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00606)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00607)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00607)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00608)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00608)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00609)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00609)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00610)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00610)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00611)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00611)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00612)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00612)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00613)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00613)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00614)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00614)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00615)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00615)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00616)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00616)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00617)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00617)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00618)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00618)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00619)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00619)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00620)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00620)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00621)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00621)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00622)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00622)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00623)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00623)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00624)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00624)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00625)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00625)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00626)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00626)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00627)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00627)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00628)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00628)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00629)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00629)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00630)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00630)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00631)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00631)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00632)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00632)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00633)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00633)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00634)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00634)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00635)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00635)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00636)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00636)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00637)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00637)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00638)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00638)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00639)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00639)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00640)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00640)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00641)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00641)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00642)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00642)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00643)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00643)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00644)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00644)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00645)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00645)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00646)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00646)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00647)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00647)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00648)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00648)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00649)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00649)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00650)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00650)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00651)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00651)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00652)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00652)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00653)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00653)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00654)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00654)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00655)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00655)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00656)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00656)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00657)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00657)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00658)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00658)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00659)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00659)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00660)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00660)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00661)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00661)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00662)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00662)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00663)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00663)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00664)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00664)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00665)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00665)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00666)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00666)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00667)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00667)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00668)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00668)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00669)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00669)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00670)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00670)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00671)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00671)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00672)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00672)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00673)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00673)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00674)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00674)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00675)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00675)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00676)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00676)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00677)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00677)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00678)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00678)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00679)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00679)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00680)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00680)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00681)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00681)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00682)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00682)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00683)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00683)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00684)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00684)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00685)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00685)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00686)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00686)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00687)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00687)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00688)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00688)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00689)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00689)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00690)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00690)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00691)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00691)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00692)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00692)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00693)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00693)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00694)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00694)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00695)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00695)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00696)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00696)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00697)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00697)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00698)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00698)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00699)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00699)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00700)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00700)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00701)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00701)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00702)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00702)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00703)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00703)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00704)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00704)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00705)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00705)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00706)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00706)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00707)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00707)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00708)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00708)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00709)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00709)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00710)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00710)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00711)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00711)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00712)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00712)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00713)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00713)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00714)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00714)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00715)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00715)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00716)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00716)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00717)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00717)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00718)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00718)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00719)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00719)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00720)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00720)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00721)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00721)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00722)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00722)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00723)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00723)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00724)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00724)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00725)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00725)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00726)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00726)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00727)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00727)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00728)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00728)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00729)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00729)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00730)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00730)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00731)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00731)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00732)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00732)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00733)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00733)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00734)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00734)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00735)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00735)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00736)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00736)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00737)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00737)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00738)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00738)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00739)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00739)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00740)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00740)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00741)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00741)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00742)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00742)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00743)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00743)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00744)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00744)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00745)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00745)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00746)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00746)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00747)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00747)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00748)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00748)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00749)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00749)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00750)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00750)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00751)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00751)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00752)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00752)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00753)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00753)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00754)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00754)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00755)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00755)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00756)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00756)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00757)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00757)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00758)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00758)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00759)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00759)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00760)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00760)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00761)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00761)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00762)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00762)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00763)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00763)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00764)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00764)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00765)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00765)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00766)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00766)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00767)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00767)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00768)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00768)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00769)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00769)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00770)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00770)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00771)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00771)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00772)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00772)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00773)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00773)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00774)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00774)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00775)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00775)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00776)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00776)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00777)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00777)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00778)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00778)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00779)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00779)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00780)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00780)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00781)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00781)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00782)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00782)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00783)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00783)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00784)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00784)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00785)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00785)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00786)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00786)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00787)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00787)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00788)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00788)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00789)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00789)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00790)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00790)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00791)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00791)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00792)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00792)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00793)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00793)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00794)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00794)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00795)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00795)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00796)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00796)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00797)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00797)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00798)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00798)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00799)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00799)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00800)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00800)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00801)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00801)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00802)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00802)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00803)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00803)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00804)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00804)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00805)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00805)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00806)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00806)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00807)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00807)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00808)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00808)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00809)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00809)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00810)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00810)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00811)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00811)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00812)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00812)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00813)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00813)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00814)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00814)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00815)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00815)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00816)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00816)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00817)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00817)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00818)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00818)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00819)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00819)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00820)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00820)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00821)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00821)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00822)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00822)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00823)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00823)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00824)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00824)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00825)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00825)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00826)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00826)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00827)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00827)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00828)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00828)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00829)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00829)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00830)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00830)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00831)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00831)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00832)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00832)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00833)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00833)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00834)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00834)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00835)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00835)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00836)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00836)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00837)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00837)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00838)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00838)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00839)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00839)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00840)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00840)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00841)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00841)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00842)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00842)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00843)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00843)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00844)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00844)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00845)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00845)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00846)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00846)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00847)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00847)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00848)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00848)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00849)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00849)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00850)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00850)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00851)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00851)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00852)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00852)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00853)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00853)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00854)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00854)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00855)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00855)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00856)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00856)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00857)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00857)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00858)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00858)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00859)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00859)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00860)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00860)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00861)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00861)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00862)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00862)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00863)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00863)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00864)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00864)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00865)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00865)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00866)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00866)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00867)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00867)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00868)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00868)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00869)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00869)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00870)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00870)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00871)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00871)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00872)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00872)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00873)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00873)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00874)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00874)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00875)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00875)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00876)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00876)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00877)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00877)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00878)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00878)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00879)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00879)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00880)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00880)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00881)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00881)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00882)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00882)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00883)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00883)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00884)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00884)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00885)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00885)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00886)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00886)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00887)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00887)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00888)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00888)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00889)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00889)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00890)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00890)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00891)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00891)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00892)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00892)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00893)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00893)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00894)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00894)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00895)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00895)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00896)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00896)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00897)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00897)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00898)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00898)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00899)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00899)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00900)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00900)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00901)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00901)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00902)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00902)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00903)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00903)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00904)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00904)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00905)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00905)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00906)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00906)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00907)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00907)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00908)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00908)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00909)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00909)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00910)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00910)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00911)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00911)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00912)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00912)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00913)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00913)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00914)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00914)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00915)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00915)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00916)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00916)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00917)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00917)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00918)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00918)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00919)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00919)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00920)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00920)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00921)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00921)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00922)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00922)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00923)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00923)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00924)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00924)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00925)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00925)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00926)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00926)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00927)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00927)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00928)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00928)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00929)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00929)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00930)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00930)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00931)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00931)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00932)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00932)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00933)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00933)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00934)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00934)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00935)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00935)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00936)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00936)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00937)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00937)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00938)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00938)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00939)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00939)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00940)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00940)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00941)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00941)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00942)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00942)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00943)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00943)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00944)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00944)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00945)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00945)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00946)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00946)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00947)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00947)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00948)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00948)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00949)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00949)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00950)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00950)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00951)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00951)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00952)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00952)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00953)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00953)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00954)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00954)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00955)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00955)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00956)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00956)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00957)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00957)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00958)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00958)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00959)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00959)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00960)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00960)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00961)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00961)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00962)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00962)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00963)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00963)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00964)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00964)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00965)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00965)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00966)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00966)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00967)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00967)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00968)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00968)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00969)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00969)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00970)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00970)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00971)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00971)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00972)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00972)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00973)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00973)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00974)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00974)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00975)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00975)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00976)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00976)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00977)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00977)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00978)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00978)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00979)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00979)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00980)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00980)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00981)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00981)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00982)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00982)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00983)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00983)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00984)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00984)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00985)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00985)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00986)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00986)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00987)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00987)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00988)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00988)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00989)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00989)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00990)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00990)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00991)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00991)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00992)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00992)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00993)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00993)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00994)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00994)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00995)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00995)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00996)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00996)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00997)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00997)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00998)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00998)==(btrue);
  Own_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00999)==(btrue);
  List_Precondition(Implementation(COMP_3seq1_OPS_IMP),ID00999)==(btrue)
END
&
THEORY ListSubstitutionX IS
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00999)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00998)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00997)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0);(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00996)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00995)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00994)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1)))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00993)==(btrue | counter>max_counter ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END))) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1))) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00992)==(btrue | counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00991)==(btrue | (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00990)==(btrue | check_boolexp:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00989)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00988)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00987)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00986)==(btrue | check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00985)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00984)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> (check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00983)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0)) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00982)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00981)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00980)==(btrue | counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00979)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00978)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00977)==(btrue | counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00976)==(btrue | (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00975)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00974)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00973)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00972)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00971)==(btrue | counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00970)==(btrue | (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00969)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00968)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00967)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00966)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1);(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00965)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00964)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00963)==(btrue | counter>max_counter ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0))) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1))) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00962)==(btrue | counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00961)==(btrue | (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00960)==(btrue | (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00959)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00958)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00957)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00956)==(btrue | (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00955)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00954)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00953)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00952)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0)) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00951)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00950)==(btrue | counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00949)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00948)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00947)==(btrue | check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00946)==(btrue | (1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00945)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00944)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00943)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00942)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00941)==(btrue | check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00940)==(btrue | (1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00939)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00938)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00937)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00936)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00935)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00934)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00933)==(btrue | counter>max_counter ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1))) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00932)==(btrue | counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00931)==(btrue | (1: INT | check_OPER_CALL:=1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00930)==(btrue | (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00929)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00928)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00927)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00926)==(btrue | (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00925)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> (check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00924)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> ((check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00923)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00922)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00921)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00920)==(btrue | counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00919)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00918)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00917)==(btrue | (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00916)==(btrue | counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00915)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00914)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00913)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00912)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00911)==(btrue | (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00910)==(btrue | counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00909)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00908)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00907)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1);(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00906)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00905)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00904)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00903)==(btrue | counter>max_counter ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1))) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)))) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00902)==(btrue | counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00901)==(btrue | counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00900)==(btrue | (1: INT | check_OPER_CALL:=1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00899)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00898)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00897)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00896)==(btrue | (1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00895)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00894)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> ((1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00893)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1)) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00892)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00891)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00890)==(btrue | counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00889)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00888)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00887)==(btrue | (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00886)==(btrue | check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00885)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00884)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00883)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00882)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00881)==(btrue | (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00880)==(btrue | check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00879)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00878)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00877)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00876)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0));(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00875)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0)))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00874)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00873)==(btrue | counter>max_counter ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1))) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)))) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00872)==(btrue | counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00871)==(btrue | check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00870)==(btrue | counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00869)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00868)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00867)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00866)==(btrue | counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00865)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> ((check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00864)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00863)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00862)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1)) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00861)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00860)==(btrue | counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00859)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00858)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00857)==(btrue | check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00856)==(btrue | (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00855)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00854)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00853)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00852)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00851)==(btrue | check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00850)==(btrue | (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00849)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00848)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00847)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00846)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END);(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00845)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00844)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0)))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00843)==(btrue | counter>max_counter ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))))) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END))) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00842)==(btrue | counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00841)==(btrue | (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00840)==(btrue | check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00839)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00838)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00837)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00836)==(btrue | check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00835)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> ((1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00834)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00833)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00832)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00831)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00830)==(btrue | counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00829)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00828)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00827)==(btrue | (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00826)==(btrue | (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00825)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00824)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00823)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00822)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00821)==(btrue | (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00820)==(btrue | (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00819)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00818)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00817)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0));(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00816)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0);(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00815)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00814)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00813)==(btrue | counter>max_counter ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)))) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00812)==(btrue | counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00811)==(btrue | (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00810)==(btrue | (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00809)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00808)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00807)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00806)==(btrue | (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00805)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00804)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00803)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1)) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00802)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00801)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00800)==(btrue | counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00799)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00798)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00797)==(btrue | (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00796)==(btrue | check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00795)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00794)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00793)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00792)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00791)==(btrue | (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00790)==(btrue | check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00789)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00788)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00787)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END);(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00786)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00785)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1)))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00784)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00783)==(btrue | counter>max_counter ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)))) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00782)==(btrue | counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00781)==(btrue | check_boolexp:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00780)==(btrue | (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00779)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00778)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00777)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00776)==(btrue | (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00775)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00774)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00773)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00772)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1)) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00771)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00770)==(btrue | counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00769)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00768)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00767)==(btrue | (1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00766)==(btrue | (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00765)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00764)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00763)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00762)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00761)==(btrue | (1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00760)==(btrue | (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00759)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00758)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00757)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0);(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00756)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00755)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00754)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1)))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00753)==(btrue | counter>max_counter ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END))) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1))) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00752)==(btrue | counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00751)==(btrue | (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00750)==(btrue | check_boolexp:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00749)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00748)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00747)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00746)==(btrue | check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00745)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00744)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> (check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00743)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0)) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00742)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00741)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00740)==(btrue | counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00739)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00738)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00737)==(btrue | counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00736)==(btrue | (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00735)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00734)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00733)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00732)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00731)==(btrue | counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00730)==(btrue | (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00729)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00728)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00727)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00726)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1);(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00725)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00724)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00723)==(btrue | counter>max_counter ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0))) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1))) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00722)==(btrue | counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00721)==(btrue | (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00720)==(btrue | (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00719)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00718)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00717)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00716)==(btrue | (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00715)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00714)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00713)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00712)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0)) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00711)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00710)==(btrue | counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00709)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00708)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00707)==(btrue | check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00706)==(btrue | (1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00705)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00704)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00703)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00702)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00701)==(btrue | check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00700)==(btrue | (1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00699)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00698)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00697)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00696)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00695)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00694)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00693)==(btrue | counter>max_counter ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1))) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00692)==(btrue | counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00691)==(btrue | (1: INT | check_OPER_CALL:=1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00690)==(btrue | (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00689)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00688)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00687)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00686)==(btrue | (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00685)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> (check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00684)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> ((check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00683)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00682)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00681)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00680)==(btrue | counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00679)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00678)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00677)==(btrue | (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00676)==(btrue | counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00675)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00674)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00673)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00672)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00671)==(btrue | (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00670)==(btrue | counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00669)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00668)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00667)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1);(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00666)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00665)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00664)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00663)==(btrue | counter>max_counter ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1))) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)))) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00662)==(btrue | counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00661)==(btrue | counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00660)==(btrue | (1: INT | check_OPER_CALL:=1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00659)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00658)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00657)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00656)==(btrue | (1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00655)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00654)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> ((1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00653)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1)) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00652)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00651)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00650)==(btrue | counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00649)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00648)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00647)==(btrue | (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00646)==(btrue | check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00645)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00644)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00643)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00642)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00641)==(btrue | (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00640)==(btrue | check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00639)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00638)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00637)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00636)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0));(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00635)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0)))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00634)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00633)==(btrue | counter>max_counter ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1))) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)))) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00632)==(btrue | counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00631)==(btrue | check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00630)==(btrue | counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00629)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00628)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00627)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00626)==(btrue | counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00625)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> ((check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00624)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00623)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00622)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1)) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00621)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00620)==(btrue | counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00619)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00618)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00617)==(btrue | check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00616)==(btrue | (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00615)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00614)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00613)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00612)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00611)==(btrue | check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00610)==(btrue | (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00609)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00608)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00607)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00606)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END);(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00605)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00604)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0)))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00603)==(btrue | counter>max_counter ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))))) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END))) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00602)==(btrue | counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00601)==(btrue | (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00600)==(btrue | check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00599)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00598)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00597)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00596)==(btrue | check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00595)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> ((1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00594)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00593)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00592)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00591)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00590)==(btrue | counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00589)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00588)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00587)==(btrue | (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00586)==(btrue | (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00585)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00584)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00583)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00582)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00581)==(btrue | (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00580)==(btrue | (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00579)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00578)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00577)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0));(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00576)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0);(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00575)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00574)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00573)==(btrue | counter>max_counter ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)))) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00572)==(btrue | counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00571)==(btrue | (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00570)==(btrue | (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00569)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00568)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00567)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00566)==(btrue | (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00565)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00564)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00563)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1)) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00562)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00561)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00560)==(btrue | counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00559)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00558)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00557)==(btrue | (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00556)==(btrue | check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00555)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00554)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00553)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00552)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00551)==(btrue | (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00550)==(btrue | check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00549)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00548)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00547)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END);(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00546)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00545)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1)))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00544)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00543)==(btrue | counter>max_counter ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)))) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00542)==(btrue | counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00541)==(btrue | check_boolexp:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00540)==(btrue | (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00539)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00538)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00537)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00536)==(btrue | (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00535)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00534)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00533)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00532)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1)) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00531)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00530)==(btrue | counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00529)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00528)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00527)==(btrue | (1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00526)==(btrue | (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00525)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00524)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00523)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00522)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00521)==(btrue | (1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00520)==(btrue | (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00519)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00518)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00517)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0);(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00516)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00515)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00514)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1)))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00513)==(btrue | counter>max_counter ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END))) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1))) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00512)==(btrue | counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00511)==(btrue | (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00510)==(btrue | check_boolexp:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00509)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00508)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00507)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00506)==(btrue | check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00505)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00504)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> (check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00503)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0)) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00502)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00501)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00500)==(btrue | counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00499)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00498)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00497)==(btrue | counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00496)==(btrue | (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00495)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00494)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00493)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00492)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00491)==(btrue | counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00490)==(btrue | (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00489)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00488)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00487)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00486)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1);(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00485)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00484)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00483)==(btrue | counter>max_counter ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0))) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1))) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00482)==(btrue | counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00481)==(btrue | (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00480)==(btrue | (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00479)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00478)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00477)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00476)==(btrue | (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00475)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00474)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00473)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00472)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0)) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00471)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00470)==(btrue | counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00469)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00468)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00467)==(btrue | check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00466)==(btrue | (1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00465)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00464)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00463)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00462)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00461)==(btrue | check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00460)==(btrue | (1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00459)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00458)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00457)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00456)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00455)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00454)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00453)==(btrue | counter>max_counter ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1))) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00452)==(btrue | counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00451)==(btrue | (1: INT | check_OPER_CALL:=1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00450)==(btrue | (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00449)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00448)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00447)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00446)==(btrue | (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00445)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> (check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00444)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> ((check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00443)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00442)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00441)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00440)==(btrue | counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00439)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00438)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00437)==(btrue | (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00436)==(btrue | counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00435)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00434)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00433)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00432)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00431)==(btrue | (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00430)==(btrue | counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00429)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00428)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00427)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1);(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00426)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00425)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00424)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00423)==(btrue | counter>max_counter ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1))) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)))) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00422)==(btrue | counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00421)==(btrue | counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00420)==(btrue | (1: INT | check_OPER_CALL:=1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00419)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00418)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00417)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00416)==(btrue | (1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00415)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00414)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> ((1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00413)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1)) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00412)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00411)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00410)==(btrue | counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00409)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00408)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00407)==(btrue | (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00406)==(btrue | check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00405)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00404)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00403)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00402)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00401)==(btrue | (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00400)==(btrue | check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00399)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00398)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00397)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00396)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0));(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00395)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0)))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00394)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00393)==(btrue | counter>max_counter ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1))) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)))) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00392)==(btrue | counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00391)==(btrue | check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00390)==(btrue | counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00389)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00388)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00387)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00386)==(btrue | counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00385)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> ((check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00384)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00383)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00382)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1)) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00381)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00380)==(btrue | counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00379)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00378)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00377)==(btrue | check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00376)==(btrue | (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00375)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00374)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00373)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00372)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00371)==(btrue | check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00370)==(btrue | (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00369)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00368)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00367)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00366)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END);(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00365)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00364)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0)))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00363)==(btrue | counter>max_counter ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))))) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END))) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00362)==(btrue | counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00361)==(btrue | (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00360)==(btrue | check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00359)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00358)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00357)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00356)==(btrue | check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00355)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> ((1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00354)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00353)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00352)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00351)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00350)==(btrue | counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00349)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00348)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00347)==(btrue | (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00346)==(btrue | (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00345)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00344)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00343)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00342)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00341)==(btrue | (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00340)==(btrue | (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00339)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00338)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00337)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0));(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00336)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0);(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00335)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00334)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00333)==(btrue | counter>max_counter ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)))) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00332)==(btrue | counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00331)==(btrue | (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00330)==(btrue | (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00329)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00328)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00327)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00326)==(btrue | (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00325)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00324)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00323)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1)) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00322)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00321)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00320)==(btrue | counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00319)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00318)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00317)==(btrue | (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00316)==(btrue | check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00315)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00314)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00313)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00312)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00311)==(btrue | (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00310)==(btrue | check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00309)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00308)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00307)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END);(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00306)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00305)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1)))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00304)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00303)==(btrue | counter>max_counter ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)))) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00302)==(btrue | counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00301)==(btrue | check_boolexp:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00300)==(btrue | (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00299)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00298)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00297)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00296)==(btrue | (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00295)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00294)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00293)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00292)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1)) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00291)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00290)==(btrue | counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00289)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00288)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00287)==(btrue | (1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00286)==(btrue | (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00285)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00284)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00283)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00282)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00281)==(btrue | (1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00280)==(btrue | (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00279)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00278)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00277)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0);(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00276)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00275)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00274)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1)))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00273)==(btrue | counter>max_counter ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END))) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1))) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00272)==(btrue | counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00271)==(btrue | (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00270)==(btrue | check_boolexp:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00269)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00268)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00267)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00266)==(btrue | check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00265)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00264)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> (check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00263)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0)) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00262)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00261)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00260)==(btrue | counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00259)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00258)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00257)==(btrue | counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00256)==(btrue | (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00255)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00254)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00253)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00252)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00251)==(btrue | counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00250)==(btrue | (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00249)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00248)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00247)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00246)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1);(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00245)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00244)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00243)==(btrue | counter>max_counter ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0))) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1))) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00242)==(btrue | counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00241)==(btrue | (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00240)==(btrue | (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00239)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00238)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00237)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00236)==(btrue | (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00235)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00234)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00233)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00232)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0)) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00231)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00230)==(btrue | counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00229)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00228)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00227)==(btrue | check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00226)==(btrue | (1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00225)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00224)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00223)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00222)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00221)==(btrue | check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00220)==(btrue | (1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00219)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00218)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00217)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00216)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00215)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00214)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00213)==(btrue | counter>max_counter ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1))) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00212)==(btrue | counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00211)==(btrue | (1: INT | check_OPER_CALL:=1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00210)==(btrue | (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00209)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00208)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00207)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00206)==(btrue | (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00205)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> (check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00204)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> ((check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00203)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00202)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00201)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00200)==(btrue | counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00199)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00198)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00197)==(btrue | (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00196)==(btrue | counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00195)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00194)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00193)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00192)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00191)==(btrue | (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00190)==(btrue | counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00189)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00188)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00187)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1);(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00186)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00185)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00184)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00183)==(btrue | counter>max_counter ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1))) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)))) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00182)==(btrue | counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00181)==(btrue | counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00180)==(btrue | (1: INT | check_OPER_CALL:=1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00179)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00178)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00177)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00176)==(btrue | (1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00175)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00174)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> ((1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00173)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1)) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00172)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00171)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00170)==(btrue | counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00169)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00168)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00167)==(btrue | (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00166)==(btrue | check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00165)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00164)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00163)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00162)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00161)==(btrue | (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00160)==(btrue | check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00159)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00158)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00157)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00156)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0));(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00155)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0)))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00154)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00153)==(btrue | counter>max_counter ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1))) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)))) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00152)==(btrue | counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00151)==(btrue | check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00150)==(btrue | counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00149)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00148)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00147)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00146)==(btrue | counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00145)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> ((check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00144)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00143)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00142)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1)) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00141)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00140)==(btrue | counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00139)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00138)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00137)==(btrue | check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00136)==(btrue | (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00135)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00134)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00133)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00132)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00131)==(btrue | check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00130)==(btrue | (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00129)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00128)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00127)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00126)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END);(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00125)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00124)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0)))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00123)==(btrue | counter>max_counter ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))))) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END))) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00122)==(btrue | counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00121)==(btrue | (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00120)==(btrue | check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00119)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00118)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00117)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00116)==(btrue | check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00115)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> ((1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00114)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00113)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00112)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00111)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00110)==(btrue | counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00109)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00108)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00107)==(btrue | (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00106)==(btrue | (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00105)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00104)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00103)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00102)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00101)==(btrue | (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00100)==(btrue | (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00099)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00098)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00097)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0));(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00096)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0);(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00095)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00094)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00093)==(btrue | counter>max_counter ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)))) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00092)==(btrue | counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00091)==(btrue | (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00090)==(btrue | (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00089)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00088)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00087)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00086)==(btrue | (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00085)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00084)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00083)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1)) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00082)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00081)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00080)==(btrue | counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00079)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00078)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00077)==(btrue | (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00076)==(btrue | check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00075)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00074)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00073)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00072)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00071)==(btrue | (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00070)==(btrue | check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00069)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00068)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00067)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END);(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00066)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00065)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1)))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00064)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00063)==(btrue | counter>max_counter ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)))) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00062)==(btrue | counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00061)==(btrue | check_boolexp:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00060)==(btrue | (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00059)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00058)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00057)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00056)==(btrue | (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00055)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00054)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00053)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00052)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1)) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00051)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00050)==(btrue | counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00049)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00048)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00047)==(btrue | (1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00046)==(btrue | (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00045)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00044)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00043)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00042)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00041)==(btrue | (1: INT | check_OPER_CALL:=1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00040)==(btrue | (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00039)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00038)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00037)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0);(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00036)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00035)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00034)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1)))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00033)==(btrue | counter>max_counter ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END))) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1))) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00032)==(btrue | counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00031)==(btrue | (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00030)==(btrue | check_boolexp:=bool(counter = 0);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00029)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00028)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00027)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00026)==(btrue | check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00025)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00024)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> (check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00023)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & not(counter = 1) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> check_boolexp:=bool(counter = 0)) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00022)==(btrue | counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter>max_counter) ==> (counter>max_counter ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)) [] not(counter>max_counter) ==> (not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & not(counter = 1) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00021)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00020)==(btrue | counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00019)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00018)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00017)==(btrue | counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00016)==(btrue | (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00015)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00014)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);WHILE counter>max_counter & check_WHILE<1000 DO counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);WHILE counter>max_counter & check_WHILE<1000 DO check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END) [] not(counter = 0) & not(counter = 1) ==> WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00013)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO (1: INT | check_OPER_CALL:=1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00012)==(btrue | counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> (counter>max_counter ==> WHILE counter>max_counter & check_WHILE<1000 DO (0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END [] not(counter>max_counter) ==> WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00011)==(btrue | counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10));(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00010)==(btrue | (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(1: INT | check_OPER_CALL:=1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00009)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00008)==(btrue | WHILE counter>max_counter & check_WHILE<1000 DO not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END);(check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1) INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00007)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);check_boolexp:=bool(counter = 0)) [] not(counter = 0) & not(counter = 1) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(1: INT | check_OPER_CALL:=1)) [] not(counter = 0) & not(counter = 1) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00006)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)) [] not(counter = 0) & not(counter = 1) ==> (1: INT | check_OPER_CALL:=1);(not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))) [] not(counter = 0) & not(counter = 1) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00005)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3))))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00004)==(btrue | not(counter = 1) & counter = 0 ==> ((check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1);(counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> (counter>max_counter ==> check_boolexp:=bool(counter = 0) [] not(counter>max_counter) ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1)))) [] not(counter = 0) & counter = 1 ==> ((check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3);(counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10)))))) [] not(counter = 0) & not(counter = 1) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00003)==(btrue | counter>max_counter ==> (counter>max_counter ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)) [] not(counter>max_counter) ==> (counter>max_counter ==> ((0: INT | check_WHILE:=0);WHILE check_WHILE<1000 DO check_WHILE+1: INT & check_WHILE: INT & 1: INT | check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END) [] not(counter>max_counter) ==> check_boolexp:=bool(counter = 0))) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter>max_counter ==> (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1) [] not(counter>max_counter) ==> (1: INT | check_OPER_CALL:=1))) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (counter>max_counter ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)) [] not(counter>max_counter) ==> ((counter+1: INT & counter: INT & 1: INT | check_SEQUENCE:=counter+1);cond1:=bool(counter = 0)))));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00002)==(btrue | counter>max_counter ==> (1: INT | check_OPER_CALL:=1) [] not(counter>max_counter) ==> (counter>max_counter ==> (counter = 0 ==> (check_IF+1: INT & check_IF: INT & 1: INT | check_IF:=check_IF+1) [] not(counter = 0) ==> (counter = 0 ==> (check_IF+3: INT & check_IF: INT & 3: INT | check_IF:=check_IF+3) [] not(counter = 0) ==> (check_IF+10: INT & check_IF: INT & 10: INT | check_IF:=check_IF+10))) [] not(counter>max_counter) ==> (check_CASE = 0 ==> (check_CASE+1: INT & check_CASE: INT & 1: INT | check_CASE:=check_CASE+1) [] not(check_CASE = 0) ==> (check_CASE+3: INT & check_CASE: INT & 3: INT | check_CASE:=check_CASE+3)));(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00001)==(btrue | (check_BECOME+1: INT & check_BECOME: INT & 1: INT | check_BECOME:=check_BECOME+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  Expanded_List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00000)==(btrue | (check_BLOCK+1: INT & check_BLOCK: INT & 1: INT | check_BLOCK:=check_BLOCK+1);(counter+1: INT & counter: INT & 1: INT | counter:=counter+1));
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00000)==(BEGIN BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00001)==(BEGIN BEGIN check_BECOME:=check_BECOME+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00002)==(IF counter>max_counter THEN BEGIN check_OPER_CALL:=1 END ELSIF counter>max_counter THEN BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END ELSE BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00003)==(IF counter>max_counter THEN IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END ELSIF counter>max_counter THEN IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END ELSE IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00004)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END ELSE IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00005)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END ELSE IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00006)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00007)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00008)==(WHILE counter>max_counter & check_WHILE<1000 DO CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00009)==(WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00010)==(BEGIN check_BECOME:=check_BECOME+1;check_OPER_CALL:=1 END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00011)==(BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00012)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00013)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00014)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00015)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_boolexp:=bool(counter = 0) END ELSE BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00016)==(BEGIN check_BECOME:=check_BECOME+1 END;BEGIN check_OPER_CALL:=1 END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00017)==(BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END;BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00018)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00019)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00020)==(BEGIN IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00021)==(BEGIN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00022)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00023)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00024)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00025)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00026)==(check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1;check_OPER_CALL:=1;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00027)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00028)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00029)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00030)==(BEGIN BEGIN check_boolexp:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00031)==(BEGIN BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00032)==(IF counter>max_counter THEN BEGIN check_BECOME:=check_BECOME+1 END ELSIF counter>max_counter THEN BEGIN check_OPER_CALL:=1 END ELSE BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00033)==(IF counter>max_counter THEN IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END ELSIF counter>max_counter THEN IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END ELSE IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00034)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END ELSE IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00035)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END ELSE IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00036)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00037)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00038)==(WHILE counter>max_counter & check_WHILE<1000 DO CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00039)==(WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00040)==(BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1 END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00041)==(BEGIN check_OPER_CALL:=1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00042)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00043)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00044)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00045)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END ELSE BEGIN check_boolexp:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00046)==(BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END;BEGIN check_BECOME:=check_BECOME+1 END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00047)==(BEGIN check_OPER_CALL:=1 END;BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00048)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00049)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00050)==(BEGIN IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00051)==(BEGIN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00052)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00053)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00054)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00055)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00056)==(check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00057)==(WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00058)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00059)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00060)==(BEGIN BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00061)==(BEGIN BEGIN check_boolexp:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00062)==(IF counter>max_counter THEN BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END ELSIF counter>max_counter THEN BEGIN check_BECOME:=check_BECOME+1 END ELSE BEGIN check_OPER_CALL:=1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00063)==(IF counter>max_counter THEN IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END ELSIF counter>max_counter THEN IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END ELSE IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00064)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END ELSE IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00065)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END ELSE IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00066)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00067)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00068)==(WHILE counter>max_counter & check_WHILE<1000 DO CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00069)==(WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00070)==(BEGIN check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00071)==(BEGIN check_BECOME:=check_BECOME+1;check_OPER_CALL:=1 END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00072)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00073)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00074)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00075)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END ELSE BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00076)==(BEGIN check_boolexp:=bool(counter = 0) END;BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00077)==(BEGIN check_BECOME:=check_BECOME+1 END;BEGIN check_OPER_CALL:=1 END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00078)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00079)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00080)==(BEGIN IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00081)==(BEGIN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00082)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00083)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00084)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00085)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00086)==(check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00087)==(WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00088)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00089)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00090)==(BEGIN BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00091)==(BEGIN BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00092)==(IF counter>max_counter THEN BEGIN check_boolexp:=bool(counter = 0) END ELSIF counter>max_counter THEN BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END ELSE BEGIN check_BECOME:=check_BECOME+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00093)==(IF counter>max_counter THEN IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END ELSIF counter>max_counter THEN IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END ELSE IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00094)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END ELSE IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00095)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END ELSE IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00096)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00097)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00098)==(WHILE counter>max_counter & check_WHILE<1000 DO CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00099)==(WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00100)==(BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0) END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00101)==(BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1 END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00102)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00103)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00104)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00105)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END OR 1 THEN check_CASE:=check_CASE+3;BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END ELSE BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00106)==(BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END;BEGIN check_boolexp:=bool(counter = 0) END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00107)==(BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END;BEGIN check_BECOME:=check_BECOME+1 END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00108)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00109)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00110)==(BEGIN IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00111)==(BEGIN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00112)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00113)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00114)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00115)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00116)==(CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00117)==(WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00118)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00119)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00120)==(BEGIN BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00121)==(BEGIN BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00122)==(IF counter>max_counter THEN BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END ELSIF counter>max_counter THEN BEGIN check_boolexp:=bool(counter = 0) END ELSE BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00123)==(IF counter>max_counter THEN IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END ELSIF counter>max_counter THEN IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END ELSE IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00124)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END ELSE IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00125)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END ELSE IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00126)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00127)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00128)==(WHILE counter>max_counter & check_WHILE<1000 DO CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00129)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00130)==(BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00131)==(BEGIN check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00132)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00133)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00134)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00135)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_OPER_CALL:=1 END OR 1 THEN check_CASE:=check_CASE+3;BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END ELSE BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00136)==(BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END;BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00137)==(BEGIN check_boolexp:=bool(counter = 0) END;BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00138)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00139)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00140)==(BEGIN IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00141)==(BEGIN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00142)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00143)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00144)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00145)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1;check_OPER_CALL:=1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00146)==(IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00147)==(WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00148)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00149)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00150)==(BEGIN BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00151)==(BEGIN BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00152)==(IF counter>max_counter THEN BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END ELSIF counter>max_counter THEN BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END ELSE BEGIN check_boolexp:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00153)==(IF counter>max_counter THEN IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END ELSIF counter>max_counter THEN IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END ELSE IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00154)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END ELSE IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00155)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END ELSE IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00156)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00157)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00158)==(WHILE counter>max_counter & check_WHILE<1000 DO CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00159)==(WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00160)==(BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00161)==(BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0) END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00162)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00163)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00164)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00165)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BECOME:=check_BECOME+1 END OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_OPER_CALL:=1 END ELSE BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00166)==(BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END;BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00167)==(BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END;BEGIN check_boolexp:=bool(counter = 0) END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00168)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00169)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00170)==(BEGIN IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00171)==(BEGIN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00172)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00173)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00174)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00175)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00176)==(check_OPER_CALL:=1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00177)==(WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00178)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00179)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00180)==(BEGIN BEGIN check_OPER_CALL:=1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00181)==(BEGIN BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00182)==(IF counter>max_counter THEN BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END ELSIF counter>max_counter THEN BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END ELSE BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00183)==(IF counter>max_counter THEN IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END ELSIF counter>max_counter THEN IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END ELSE IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00184)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END ELSE IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00185)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END ELSE IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00186)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00187)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00188)==(WHILE counter>max_counter & check_WHILE<1000 DO CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00189)==(WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00190)==(BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00191)==(BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00192)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00193)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00194)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00195)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BECOME:=check_BECOME+1 END ELSE BEGIN check_OPER_CALL:=1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00196)==(BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END;BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00197)==(BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END;BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00198)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00199)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00200)==(BEGIN IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00201)==(BEGIN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00202)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00203)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00204)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1;check_OPER_CALL:=1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00205)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00206)==(check_BECOME:=check_BECOME+1;check_OPER_CALL:=1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00207)==(WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00208)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00209)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00210)==(BEGIN BEGIN check_BECOME:=check_BECOME+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00211)==(BEGIN BEGIN check_OPER_CALL:=1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00212)==(IF counter>max_counter THEN BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END ELSIF counter>max_counter THEN BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END ELSE BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00213)==(IF counter>max_counter THEN IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END ELSIF counter>max_counter THEN IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END ELSE IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00214)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END ELSE IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00215)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END ELSE IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00216)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00217)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00218)==(WHILE counter>max_counter & check_WHILE<1000 DO CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00219)==(WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00220)==(BEGIN check_OPER_CALL:=1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00221)==(BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00222)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00223)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00224)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00225)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_boolexp:=bool(counter = 0) END OR 1 THEN check_CASE:=check_CASE+3;BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END ELSE BEGIN check_BECOME:=check_BECOME+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00226)==(BEGIN check_OPER_CALL:=1 END;BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00227)==(BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END;BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00228)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00229)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00230)==(BEGIN IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00231)==(BEGIN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00232)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00233)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00234)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00235)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00236)==(BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1;check_OPER_CALL:=1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00237)==(WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00238)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00239)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00240)==(BEGIN BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00241)==(BEGIN BEGIN check_BECOME:=check_BECOME+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00242)==(IF counter>max_counter THEN BEGIN check_OPER_CALL:=1 END ELSIF counter>max_counter THEN BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END ELSE BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00243)==(IF counter>max_counter THEN IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END ELSIF counter>max_counter THEN IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END ELSE IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00244)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END ELSE IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00245)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END ELSE IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00246)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00247)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00248)==(WHILE counter>max_counter & check_WHILE<1000 DO CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00249)==(WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00250)==(BEGIN check_BECOME:=check_BECOME+1;check_OPER_CALL:=1 END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00251)==(BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00252)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00253)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00254)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00255)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_boolexp:=bool(counter = 0) END ELSE BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00256)==(BEGIN check_BECOME:=check_BECOME+1 END;BEGIN check_OPER_CALL:=1 END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00257)==(BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END;BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00258)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00259)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00260)==(BEGIN IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00261)==(BEGIN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00262)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00263)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00264)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00265)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00266)==(check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1;check_OPER_CALL:=1;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00267)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00268)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00269)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00270)==(BEGIN BEGIN check_boolexp:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00271)==(BEGIN BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00272)==(IF counter>max_counter THEN BEGIN check_BECOME:=check_BECOME+1 END ELSIF counter>max_counter THEN BEGIN check_OPER_CALL:=1 END ELSE BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00273)==(IF counter>max_counter THEN IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END ELSIF counter>max_counter THEN IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END ELSE IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00274)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END ELSE IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00275)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END ELSE IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00276)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00277)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00278)==(WHILE counter>max_counter & check_WHILE<1000 DO CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00279)==(WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00280)==(BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1 END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00281)==(BEGIN check_OPER_CALL:=1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00282)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00283)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00284)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00285)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END ELSE BEGIN check_boolexp:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00286)==(BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END;BEGIN check_BECOME:=check_BECOME+1 END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00287)==(BEGIN check_OPER_CALL:=1 END;BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00288)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00289)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00290)==(BEGIN IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00291)==(BEGIN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00292)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00293)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00294)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00295)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00296)==(check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00297)==(WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00298)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00299)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00300)==(BEGIN BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00301)==(BEGIN BEGIN check_boolexp:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00302)==(IF counter>max_counter THEN BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END ELSIF counter>max_counter THEN BEGIN check_BECOME:=check_BECOME+1 END ELSE BEGIN check_OPER_CALL:=1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00303)==(IF counter>max_counter THEN IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END ELSIF counter>max_counter THEN IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END ELSE IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00304)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END ELSE IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00305)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END ELSE IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00306)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00307)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00308)==(WHILE counter>max_counter & check_WHILE<1000 DO CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00309)==(WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00310)==(BEGIN check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00311)==(BEGIN check_BECOME:=check_BECOME+1;check_OPER_CALL:=1 END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00312)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00313)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00314)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00315)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END ELSE BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00316)==(BEGIN check_boolexp:=bool(counter = 0) END;BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00317)==(BEGIN check_BECOME:=check_BECOME+1 END;BEGIN check_OPER_CALL:=1 END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00318)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00319)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00320)==(BEGIN IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00321)==(BEGIN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00322)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00323)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00324)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00325)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00326)==(check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00327)==(WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00328)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00329)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00330)==(BEGIN BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00331)==(BEGIN BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00332)==(IF counter>max_counter THEN BEGIN check_boolexp:=bool(counter = 0) END ELSIF counter>max_counter THEN BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END ELSE BEGIN check_BECOME:=check_BECOME+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00333)==(IF counter>max_counter THEN IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END ELSIF counter>max_counter THEN IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END ELSE IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00334)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END ELSE IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00335)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END ELSE IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00336)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00337)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00338)==(WHILE counter>max_counter & check_WHILE<1000 DO CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00339)==(WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00340)==(BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0) END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00341)==(BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1 END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00342)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00343)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00344)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00345)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END OR 1 THEN check_CASE:=check_CASE+3;BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END ELSE BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00346)==(BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END;BEGIN check_boolexp:=bool(counter = 0) END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00347)==(BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END;BEGIN check_BECOME:=check_BECOME+1 END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00348)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00349)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00350)==(BEGIN IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00351)==(BEGIN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00352)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00353)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00354)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00355)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00356)==(CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00357)==(WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00358)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00359)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00360)==(BEGIN BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00361)==(BEGIN BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00362)==(IF counter>max_counter THEN BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END ELSIF counter>max_counter THEN BEGIN check_boolexp:=bool(counter = 0) END ELSE BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00363)==(IF counter>max_counter THEN IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END ELSIF counter>max_counter THEN IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END ELSE IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00364)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END ELSE IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00365)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END ELSE IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00366)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00367)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00368)==(WHILE counter>max_counter & check_WHILE<1000 DO CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00369)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00370)==(BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00371)==(BEGIN check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00372)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00373)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00374)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00375)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_OPER_CALL:=1 END OR 1 THEN check_CASE:=check_CASE+3;BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END ELSE BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00376)==(BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END;BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00377)==(BEGIN check_boolexp:=bool(counter = 0) END;BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00378)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00379)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00380)==(BEGIN IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00381)==(BEGIN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00382)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00383)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00384)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00385)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1;check_OPER_CALL:=1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00386)==(IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00387)==(WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00388)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00389)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00390)==(BEGIN BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00391)==(BEGIN BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00392)==(IF counter>max_counter THEN BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END ELSIF counter>max_counter THEN BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END ELSE BEGIN check_boolexp:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00393)==(IF counter>max_counter THEN IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END ELSIF counter>max_counter THEN IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END ELSE IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00394)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END ELSE IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00395)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END ELSE IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00396)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00397)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00398)==(WHILE counter>max_counter & check_WHILE<1000 DO CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00399)==(WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00400)==(BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00401)==(BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0) END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00402)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00403)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00404)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00405)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BECOME:=check_BECOME+1 END OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_OPER_CALL:=1 END ELSE BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00406)==(BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END;BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00407)==(BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END;BEGIN check_boolexp:=bool(counter = 0) END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00408)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00409)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00410)==(BEGIN IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00411)==(BEGIN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00412)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00413)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00414)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00415)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00416)==(check_OPER_CALL:=1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00417)==(WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00418)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00419)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00420)==(BEGIN BEGIN check_OPER_CALL:=1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00421)==(BEGIN BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00422)==(IF counter>max_counter THEN BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END ELSIF counter>max_counter THEN BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END ELSE BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00423)==(IF counter>max_counter THEN IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END ELSIF counter>max_counter THEN IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END ELSE IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00424)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END ELSE IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00425)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END ELSE IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00426)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00427)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00428)==(WHILE counter>max_counter & check_WHILE<1000 DO CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00429)==(WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00430)==(BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00431)==(BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00432)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00433)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00434)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00435)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BECOME:=check_BECOME+1 END ELSE BEGIN check_OPER_CALL:=1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00436)==(BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END;BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00437)==(BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END;BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00438)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00439)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00440)==(BEGIN IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00441)==(BEGIN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00442)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00443)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00444)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1;check_OPER_CALL:=1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00445)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00446)==(check_BECOME:=check_BECOME+1;check_OPER_CALL:=1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00447)==(WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00448)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00449)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00450)==(BEGIN BEGIN check_BECOME:=check_BECOME+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00451)==(BEGIN BEGIN check_OPER_CALL:=1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00452)==(IF counter>max_counter THEN BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END ELSIF counter>max_counter THEN BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END ELSE BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00453)==(IF counter>max_counter THEN IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END ELSIF counter>max_counter THEN IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END ELSE IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00454)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END ELSE IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00455)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END ELSE IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00456)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00457)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00458)==(WHILE counter>max_counter & check_WHILE<1000 DO CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00459)==(WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00460)==(BEGIN check_OPER_CALL:=1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00461)==(BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00462)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00463)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00464)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00465)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_boolexp:=bool(counter = 0) END OR 1 THEN check_CASE:=check_CASE+3;BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END ELSE BEGIN check_BECOME:=check_BECOME+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00466)==(BEGIN check_OPER_CALL:=1 END;BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00467)==(BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END;BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00468)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00469)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00470)==(BEGIN IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00471)==(BEGIN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00472)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00473)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00474)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00475)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00476)==(BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1;check_OPER_CALL:=1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00477)==(WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00478)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00479)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00480)==(BEGIN BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00481)==(BEGIN BEGIN check_BECOME:=check_BECOME+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00482)==(IF counter>max_counter THEN BEGIN check_OPER_CALL:=1 END ELSIF counter>max_counter THEN BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END ELSE BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00483)==(IF counter>max_counter THEN IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END ELSIF counter>max_counter THEN IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END ELSE IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00484)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END ELSE IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00485)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END ELSE IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00486)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00487)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00488)==(WHILE counter>max_counter & check_WHILE<1000 DO CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00489)==(WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00490)==(BEGIN check_BECOME:=check_BECOME+1;check_OPER_CALL:=1 END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00491)==(BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00492)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00493)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00494)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00495)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_boolexp:=bool(counter = 0) END ELSE BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00496)==(BEGIN check_BECOME:=check_BECOME+1 END;BEGIN check_OPER_CALL:=1 END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00497)==(BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END;BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00498)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00499)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00500)==(BEGIN IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00501)==(BEGIN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00502)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00503)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00504)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00505)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00506)==(check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1;check_OPER_CALL:=1;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00507)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00508)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00509)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00510)==(BEGIN BEGIN check_boolexp:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00511)==(BEGIN BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00512)==(IF counter>max_counter THEN BEGIN check_BECOME:=check_BECOME+1 END ELSIF counter>max_counter THEN BEGIN check_OPER_CALL:=1 END ELSE BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00513)==(IF counter>max_counter THEN IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END ELSIF counter>max_counter THEN IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END ELSE IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00514)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END ELSE IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00515)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END ELSE IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00516)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00517)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00518)==(WHILE counter>max_counter & check_WHILE<1000 DO CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00519)==(WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00520)==(BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1 END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00521)==(BEGIN check_OPER_CALL:=1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00522)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00523)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00524)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00525)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END ELSE BEGIN check_boolexp:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00526)==(BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END;BEGIN check_BECOME:=check_BECOME+1 END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00527)==(BEGIN check_OPER_CALL:=1 END;BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00528)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00529)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00530)==(BEGIN IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00531)==(BEGIN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00532)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00533)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00534)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00535)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00536)==(check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00537)==(WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00538)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00539)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00540)==(BEGIN BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00541)==(BEGIN BEGIN check_boolexp:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00542)==(IF counter>max_counter THEN BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END ELSIF counter>max_counter THEN BEGIN check_BECOME:=check_BECOME+1 END ELSE BEGIN check_OPER_CALL:=1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00543)==(IF counter>max_counter THEN IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END ELSIF counter>max_counter THEN IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END ELSE IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00544)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END ELSE IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00545)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END ELSE IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00546)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00547)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00548)==(WHILE counter>max_counter & check_WHILE<1000 DO CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00549)==(WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00550)==(BEGIN check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00551)==(BEGIN check_BECOME:=check_BECOME+1;check_OPER_CALL:=1 END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00552)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00553)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00554)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00555)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END ELSE BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00556)==(BEGIN check_boolexp:=bool(counter = 0) END;BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00557)==(BEGIN check_BECOME:=check_BECOME+1 END;BEGIN check_OPER_CALL:=1 END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00558)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00559)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00560)==(BEGIN IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00561)==(BEGIN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00562)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00563)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00564)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00565)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00566)==(check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00567)==(WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00568)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00569)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00570)==(BEGIN BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00571)==(BEGIN BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00572)==(IF counter>max_counter THEN BEGIN check_boolexp:=bool(counter = 0) END ELSIF counter>max_counter THEN BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END ELSE BEGIN check_BECOME:=check_BECOME+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00573)==(IF counter>max_counter THEN IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END ELSIF counter>max_counter THEN IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END ELSE IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00574)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END ELSE IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00575)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END ELSE IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00576)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00577)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00578)==(WHILE counter>max_counter & check_WHILE<1000 DO CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00579)==(WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00580)==(BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0) END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00581)==(BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1 END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00582)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00583)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00584)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00585)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END OR 1 THEN check_CASE:=check_CASE+3;BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END ELSE BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00586)==(BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END;BEGIN check_boolexp:=bool(counter = 0) END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00587)==(BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END;BEGIN check_BECOME:=check_BECOME+1 END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00588)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00589)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00590)==(BEGIN IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00591)==(BEGIN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00592)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00593)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00594)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00595)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00596)==(CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00597)==(WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00598)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00599)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00600)==(BEGIN BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00601)==(BEGIN BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00602)==(IF counter>max_counter THEN BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END ELSIF counter>max_counter THEN BEGIN check_boolexp:=bool(counter = 0) END ELSE BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00603)==(IF counter>max_counter THEN IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END ELSIF counter>max_counter THEN IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END ELSE IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00604)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END ELSE IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00605)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END ELSE IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00606)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00607)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00608)==(WHILE counter>max_counter & check_WHILE<1000 DO CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00609)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00610)==(BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00611)==(BEGIN check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00612)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00613)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00614)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00615)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_OPER_CALL:=1 END OR 1 THEN check_CASE:=check_CASE+3;BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END ELSE BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00616)==(BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END;BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00617)==(BEGIN check_boolexp:=bool(counter = 0) END;BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00618)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00619)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00620)==(BEGIN IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00621)==(BEGIN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00622)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00623)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00624)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00625)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1;check_OPER_CALL:=1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00626)==(IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00627)==(WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00628)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00629)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00630)==(BEGIN BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00631)==(BEGIN BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00632)==(IF counter>max_counter THEN BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END ELSIF counter>max_counter THEN BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END ELSE BEGIN check_boolexp:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00633)==(IF counter>max_counter THEN IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END ELSIF counter>max_counter THEN IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END ELSE IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00634)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END ELSE IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00635)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END ELSE IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00636)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00637)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00638)==(WHILE counter>max_counter & check_WHILE<1000 DO CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00639)==(WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00640)==(BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00641)==(BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0) END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00642)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00643)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00644)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00645)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BECOME:=check_BECOME+1 END OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_OPER_CALL:=1 END ELSE BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00646)==(BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END;BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00647)==(BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END;BEGIN check_boolexp:=bool(counter = 0) END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00648)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00649)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00650)==(BEGIN IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00651)==(BEGIN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00652)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00653)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00654)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00655)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00656)==(check_OPER_CALL:=1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00657)==(WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00658)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00659)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00660)==(BEGIN BEGIN check_OPER_CALL:=1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00661)==(BEGIN BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00662)==(IF counter>max_counter THEN BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END ELSIF counter>max_counter THEN BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END ELSE BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00663)==(IF counter>max_counter THEN IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END ELSIF counter>max_counter THEN IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END ELSE IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00664)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END ELSE IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00665)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END ELSE IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00666)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00667)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00668)==(WHILE counter>max_counter & check_WHILE<1000 DO CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00669)==(WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00670)==(BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00671)==(BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00672)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00673)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00674)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00675)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BECOME:=check_BECOME+1 END ELSE BEGIN check_OPER_CALL:=1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00676)==(BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END;BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00677)==(BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END;BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00678)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00679)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00680)==(BEGIN IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00681)==(BEGIN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00682)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00683)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00684)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1;check_OPER_CALL:=1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00685)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00686)==(check_BECOME:=check_BECOME+1;check_OPER_CALL:=1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00687)==(WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00688)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00689)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00690)==(BEGIN BEGIN check_BECOME:=check_BECOME+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00691)==(BEGIN BEGIN check_OPER_CALL:=1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00692)==(IF counter>max_counter THEN BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END ELSIF counter>max_counter THEN BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END ELSE BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00693)==(IF counter>max_counter THEN IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END ELSIF counter>max_counter THEN IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END ELSE IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00694)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END ELSE IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00695)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END ELSE IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00696)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00697)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00698)==(WHILE counter>max_counter & check_WHILE<1000 DO CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00699)==(WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00700)==(BEGIN check_OPER_CALL:=1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00701)==(BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00702)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00703)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00704)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00705)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_boolexp:=bool(counter = 0) END OR 1 THEN check_CASE:=check_CASE+3;BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END ELSE BEGIN check_BECOME:=check_BECOME+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00706)==(BEGIN check_OPER_CALL:=1 END;BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00707)==(BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END;BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00708)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00709)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00710)==(BEGIN IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00711)==(BEGIN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00712)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00713)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00714)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00715)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00716)==(BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1;check_OPER_CALL:=1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00717)==(WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00718)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00719)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00720)==(BEGIN BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00721)==(BEGIN BEGIN check_BECOME:=check_BECOME+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00722)==(IF counter>max_counter THEN BEGIN check_OPER_CALL:=1 END ELSIF counter>max_counter THEN BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END ELSE BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00723)==(IF counter>max_counter THEN IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END ELSIF counter>max_counter THEN IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END ELSE IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00724)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END ELSE IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00725)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END ELSE IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00726)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00727)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00728)==(WHILE counter>max_counter & check_WHILE<1000 DO CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00729)==(WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00730)==(BEGIN check_BECOME:=check_BECOME+1;check_OPER_CALL:=1 END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00731)==(BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00732)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00733)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00734)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00735)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_boolexp:=bool(counter = 0) END ELSE BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00736)==(BEGIN check_BECOME:=check_BECOME+1 END;BEGIN check_OPER_CALL:=1 END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00737)==(BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END;BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00738)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00739)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00740)==(BEGIN IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00741)==(BEGIN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00742)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00743)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00744)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00745)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00746)==(check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1;check_OPER_CALL:=1;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00747)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00748)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00749)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00750)==(BEGIN BEGIN check_boolexp:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00751)==(BEGIN BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00752)==(IF counter>max_counter THEN BEGIN check_BECOME:=check_BECOME+1 END ELSIF counter>max_counter THEN BEGIN check_OPER_CALL:=1 END ELSE BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00753)==(IF counter>max_counter THEN IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END ELSIF counter>max_counter THEN IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END ELSE IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00754)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END ELSE IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00755)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END ELSE IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00756)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00757)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00758)==(WHILE counter>max_counter & check_WHILE<1000 DO CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00759)==(WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00760)==(BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1 END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00761)==(BEGIN check_OPER_CALL:=1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00762)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00763)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00764)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00765)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END ELSE BEGIN check_boolexp:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00766)==(BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END;BEGIN check_BECOME:=check_BECOME+1 END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00767)==(BEGIN check_OPER_CALL:=1 END;BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00768)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00769)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00770)==(BEGIN IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00771)==(BEGIN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00772)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00773)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00774)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00775)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00776)==(check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00777)==(WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00778)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00779)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00780)==(BEGIN BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00781)==(BEGIN BEGIN check_boolexp:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00782)==(IF counter>max_counter THEN BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END ELSIF counter>max_counter THEN BEGIN check_BECOME:=check_BECOME+1 END ELSE BEGIN check_OPER_CALL:=1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00783)==(IF counter>max_counter THEN IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END ELSIF counter>max_counter THEN IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END ELSE IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00784)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END ELSE IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00785)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END ELSE IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00786)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00787)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00788)==(WHILE counter>max_counter & check_WHILE<1000 DO CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00789)==(WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00790)==(BEGIN check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00791)==(BEGIN check_BECOME:=check_BECOME+1;check_OPER_CALL:=1 END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00792)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00793)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00794)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00795)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END ELSE BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00796)==(BEGIN check_boolexp:=bool(counter = 0) END;BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00797)==(BEGIN check_BECOME:=check_BECOME+1 END;BEGIN check_OPER_CALL:=1 END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00798)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00799)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00800)==(BEGIN IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00801)==(BEGIN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00802)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00803)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00804)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00805)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00806)==(check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00807)==(WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00808)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00809)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00810)==(BEGIN BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00811)==(BEGIN BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00812)==(IF counter>max_counter THEN BEGIN check_boolexp:=bool(counter = 0) END ELSIF counter>max_counter THEN BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END ELSE BEGIN check_BECOME:=check_BECOME+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00813)==(IF counter>max_counter THEN IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END ELSIF counter>max_counter THEN IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END ELSE IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00814)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END ELSE IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00815)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END ELSE IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00816)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00817)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00818)==(WHILE counter>max_counter & check_WHILE<1000 DO CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00819)==(WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00820)==(BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0) END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00821)==(BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1 END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00822)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00823)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00824)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00825)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END OR 1 THEN check_CASE:=check_CASE+3;BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END ELSE BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00826)==(BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END;BEGIN check_boolexp:=bool(counter = 0) END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00827)==(BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END;BEGIN check_BECOME:=check_BECOME+1 END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00828)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00829)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00830)==(BEGIN IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00831)==(BEGIN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00832)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00833)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00834)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00835)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00836)==(CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00837)==(WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00838)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00839)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00840)==(BEGIN BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00841)==(BEGIN BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00842)==(IF counter>max_counter THEN BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END ELSIF counter>max_counter THEN BEGIN check_boolexp:=bool(counter = 0) END ELSE BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00843)==(IF counter>max_counter THEN IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END ELSIF counter>max_counter THEN IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END ELSE IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00844)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END ELSE IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00845)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END ELSE IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00846)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00847)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00848)==(WHILE counter>max_counter & check_WHILE<1000 DO CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00849)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00850)==(BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00851)==(BEGIN check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00852)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00853)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00854)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00855)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_OPER_CALL:=1 END OR 1 THEN check_CASE:=check_CASE+3;BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END ELSE BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00856)==(BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END;BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00857)==(BEGIN check_boolexp:=bool(counter = 0) END;BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00858)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00859)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00860)==(BEGIN IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00861)==(BEGIN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00862)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00863)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00864)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00865)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1;check_OPER_CALL:=1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00866)==(IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00867)==(WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00868)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00869)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00870)==(BEGIN BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00871)==(BEGIN BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00872)==(IF counter>max_counter THEN BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END ELSIF counter>max_counter THEN BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END ELSE BEGIN check_boolexp:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00873)==(IF counter>max_counter THEN IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END ELSIF counter>max_counter THEN IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END ELSE IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00874)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END ELSE IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00875)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END ELSE IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00876)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00877)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00878)==(WHILE counter>max_counter & check_WHILE<1000 DO CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00879)==(WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00880)==(BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00881)==(BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0) END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00882)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00883)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00884)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00885)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BECOME:=check_BECOME+1 END OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_OPER_CALL:=1 END ELSE BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00886)==(BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END;BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00887)==(BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END;BEGIN check_boolexp:=bool(counter = 0) END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00888)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00889)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00890)==(BEGIN IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00891)==(BEGIN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00892)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00893)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00894)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00895)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00896)==(check_OPER_CALL:=1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00897)==(WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00898)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00899)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00900)==(BEGIN BEGIN check_OPER_CALL:=1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00901)==(BEGIN BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00902)==(IF counter>max_counter THEN BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END ELSIF counter>max_counter THEN BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END ELSE BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00903)==(IF counter>max_counter THEN IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END ELSIF counter>max_counter THEN IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END ELSE IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00904)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END ELSE IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00905)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END ELSE IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00906)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00907)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00908)==(WHILE counter>max_counter & check_WHILE<1000 DO CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00909)==(WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00910)==(BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00911)==(BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00912)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00913)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00914)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00915)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BECOME:=check_BECOME+1 END ELSE BEGIN check_OPER_CALL:=1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00916)==(BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END;BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00917)==(BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END;BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00918)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00919)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00920)==(BEGIN IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00921)==(BEGIN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00922)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00923)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00924)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1;check_OPER_CALL:=1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00925)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00926)==(check_BECOME:=check_BECOME+1;check_OPER_CALL:=1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00927)==(WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00928)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00929)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00930)==(BEGIN BEGIN check_BECOME:=check_BECOME+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00931)==(BEGIN BEGIN check_OPER_CALL:=1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00932)==(IF counter>max_counter THEN BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END ELSIF counter>max_counter THEN BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END ELSE BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00933)==(IF counter>max_counter THEN IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END ELSIF counter>max_counter THEN IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END ELSE IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00934)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END ELSE IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00935)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END ELSE IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00936)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00937)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00938)==(WHILE counter>max_counter & check_WHILE<1000 DO CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00939)==(WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00940)==(BEGIN check_OPER_CALL:=1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00941)==(BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00942)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00943)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00944)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00945)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_boolexp:=bool(counter = 0) END OR 1 THEN check_CASE:=check_CASE+3;BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END ELSE BEGIN check_BECOME:=check_BECOME+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00946)==(BEGIN check_OPER_CALL:=1 END;BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00947)==(BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END;BEGIN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00948)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00949)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00950)==(BEGIN IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00951)==(BEGIN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00952)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00953)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00954)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00955)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00956)==(BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1;check_OPER_CALL:=1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00957)==(WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00958)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00959)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00960)==(BEGIN BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00961)==(BEGIN BEGIN check_BECOME:=check_BECOME+1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00962)==(IF counter>max_counter THEN BEGIN check_OPER_CALL:=1 END ELSIF counter>max_counter THEN BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END ELSE BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00963)==(IF counter>max_counter THEN IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END ELSIF counter>max_counter THEN IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END ELSE IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00964)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END ELSE IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00965)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END ELSE IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00966)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00967)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00968)==(WHILE counter>max_counter & check_WHILE<1000 DO CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00969)==(WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00970)==(BEGIN check_BECOME:=check_BECOME+1;check_OPER_CALL:=1 END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00971)==(BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00972)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00973)==(IF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO BEGIN check_BLOCK:=check_BLOCK+1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSIF counter>max_counter THEN WHILE counter>max_counter & check_WHILE<1000 DO check_BECOME:=check_BECOME+1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_OPER_CALL:=1;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00974)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END ELSE WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00975)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_boolexp:=bool(counter = 0) END ELSE BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00976)==(BEGIN check_BECOME:=check_BECOME+1 END;BEGIN check_OPER_CALL:=1 END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00977)==(BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END;BEGIN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00978)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00979)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00980)==(BEGIN IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00981)==(BEGIN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END OR 1 THEN check_CASE:=check_CASE+3;check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00982)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1 OR 1 THEN check_CASE:=check_CASE+3;check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00983)==(IF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END ELSIF counter>max_counter THEN CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END ELSE CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00984)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END OR 1 THEN check_CASE:=check_CASE+3;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00985)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_BECOME:=check_BECOME+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00986)==(check_boolexp:=bool(counter = 0);BEGIN check_BLOCK:=check_BLOCK+1 END;check_BECOME:=check_BECOME+1;check_OPER_CALL:=1;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00987)==(WHILE counter>max_counter & check_WHILE<1000 DO IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;WHILE counter>max_counter & check_WHILE<1000 DO CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00988)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_SEQUENCE:=counter+1;cond1:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00989)==(WHILE counter>max_counter & check_WHILE<1000 DO WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00990)==(BEGIN BEGIN check_boolexp:=bool(counter = 0) END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00991)==(BEGIN BEGIN BEGIN check_BLOCK:=check_BLOCK+1 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00992)==(IF counter>max_counter THEN BEGIN check_BECOME:=check_BECOME+1 END ELSIF counter>max_counter THEN BEGIN check_OPER_CALL:=1 END ELSE BEGIN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00993)==(IF counter>max_counter THEN IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END ELSIF counter>max_counter THEN IF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSIF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END ELSE IF counter>max_counter THEN check_OPER_CALL:=1 ELSIF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00994)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSIF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN BEGIN check_BLOCK:=check_BLOCK+1 END ELSIF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END ELSE IF counter>max_counter THEN IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSIF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00995)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter>max_counter THEN check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSIF counter>max_counter THEN check_boolexp:=bool(counter = 0) ELSE BEGIN check_BLOCK:=check_BLOCK+1 END END OR 1 THEN check_CASE:=check_CASE+3;IF counter>max_counter THEN check_BECOME:=check_BECOME+1 ELSIF counter>max_counter THEN check_OPER_CALL:=1 ELSE IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END END ELSE IF counter>max_counter THEN CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSIF counter>max_counter THEN check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) ELSE check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00996)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_boolexp:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;BEGIN check_BLOCK:=check_BLOCK+1 END ELSE check_BECOME:=check_BECOME+1 END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_OPER_CALL:=1 OR 1 THEN check_CASE:=check_CASE+3;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END ELSE CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00997)==(CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) OR 1 THEN check_CASE:=check_CASE+3;check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END ELSE check_boolexp:=bool(counter = 0) END END;CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;BEGIN check_BLOCK:=check_BLOCK+1 END OR 1 THEN check_CASE:=check_CASE+3;check_BECOME:=check_BECOME+1 ELSE check_OPER_CALL:=1 END END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00998)==(WHILE counter>max_counter & check_WHILE<1000 DO CASE counter OF EITHER 0 THEN check_CASE:=check_CASE+1;IF counter = 0 THEN check_IF:=check_IF+1 ELSIF counter = 0 THEN check_IF:=check_IF+3 ELSE check_IF:=check_IF+10 END OR 1 THEN check_CASE:=check_CASE+3;CASE check_CASE OF EITHER 0 THEN check_CASE:=check_CASE+1 ELSE check_CASE:=check_CASE+3 END END ELSE check_SEQUENCE:=counter+1;cond1:=bool(counter = 0) END END;check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1);
  List_Substitution(Implementation(COMP_3seq1_OPS_IMP),ID00999)==(WHILE counter>max_counter & check_WHILE<1000 DO check_WHILE:=0;WHILE check_WHILE<1000 DO check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 1000-check_WHILE END;check_boolexp:=bool(counter = 0);check_WHILE:=check_WHILE+1 INVARIANT 1 = 1 VARIANT 100000-check_WHILE END;counter:=counter+1)
END
&
THEORY ListConstantsX IS
  List_Valuable_Constants(Implementation(COMP_3seq1_OPS_IMP))==(const1);
  Inherited_List_Constants(Implementation(COMP_3seq1_OPS_IMP))==(?);
  List_Constants(Implementation(COMP_3seq1_OPS_IMP))==(const1)
END
&
THEORY ListSetsX IS
  Context_List_Enumerated(Implementation(COMP_3seq1_OPS_IMP))==(?);
  Context_List_Defered(Implementation(COMP_3seq1_OPS_IMP))==(?);
  Context_List_Sets(Implementation(COMP_3seq1_OPS_IMP))==(?);
  List_Own_Enumerated(Implementation(COMP_3seq1_OPS_IMP))==(?);
  List_Valuable_Sets(Implementation(COMP_3seq1_OPS_IMP))==(?);
  Inherited_List_Enumerated(Implementation(COMP_3seq1_OPS_IMP))==(?);
  Inherited_List_Defered(Implementation(COMP_3seq1_OPS_IMP))==(?);
  Inherited_List_Sets(Implementation(COMP_3seq1_OPS_IMP))==(?);
  List_Enumerated(Implementation(COMP_3seq1_OPS_IMP))==(?);
  List_Defered(Implementation(COMP_3seq1_OPS_IMP))==(?);
  List_Sets(Implementation(COMP_3seq1_OPS_IMP))==(?)
END
&
THEORY ListHiddenConstantsX IS
  Abstract_List_HiddenConstants(Implementation(COMP_3seq1_OPS_IMP))==(?);
  Expanded_List_HiddenConstants(Implementation(COMP_3seq1_OPS_IMP))==(?);
  List_HiddenConstants(Implementation(COMP_3seq1_OPS_IMP))==(?);
  External_List_HiddenConstants(Implementation(COMP_3seq1_OPS_IMP))==(?)
END
&
THEORY ListPropertiesX IS
  Abstract_List_Properties(Implementation(COMP_3seq1_OPS_IMP))==(btrue);
  Context_List_Properties(Implementation(COMP_3seq1_OPS_IMP))==(btrue);
  Inherited_List_Properties(Implementation(COMP_3seq1_OPS_IMP))==(btrue);
  List_Properties(Implementation(COMP_3seq1_OPS_IMP))==(const1: INT)
END
&
THEORY ListValuesX IS
  Precond_Valued_Objects(Implementation(COMP_3seq1_OPS_IMP))==(btrue);
  Values_Subs(Implementation(COMP_3seq1_OPS_IMP))==(const1: 1024);
  List_Values(Implementation(COMP_3seq1_OPS_IMP))==(const1 = 1024)
END
&
THEORY ListSeenInfoX END
&
THEORY ListIncludedOperationsX IS
  List_Included_Operations(Implementation(COMP_3seq1_OPS_IMP),Machine(COMPIMP))==(do_int)
END
&
THEORY InheritedEnvX IS
  Constants(Implementation(COMP_3seq1_OPS_IMP))==(Type(const1) == Cst(btype(INTEGER,?,?)));
  VisibleVariables(Implementation(COMP_3seq1_OPS_IMP))==(Type(counter) == Mvv(btype(INTEGER,?,?));Type(max_counter) == Mvv(btype(INTEGER,?,?));Type(cond1) == Mvv(btype(BOOL,?,?));Type(check_boolexp) == Mvv(btype(BOOL,?,?));Type(check_BLOCK) == Mvv(btype(INTEGER,?,?));Type(check_BECOME) == Mvv(btype(INTEGER,?,?));Type(check_IF) == Mvv(btype(INTEGER,?,?));Type(check_CASE) == Mvv(btype(INTEGER,?,?));Type(check_SEQUENCE) == Mvv(btype(INTEGER,?,?));Type(check_WHILE) == Mvv(btype(INTEGER,?,?));Type(check_OPER_CALL) == Mvv(btype(INTEGER,?,?)));
  Operations(Implementation(COMP_3seq1_OPS_IMP))==(Type(ID00999) == Cst(No_type,No_type);Type(ID00998) == Cst(No_type,No_type);Type(ID00997) == Cst(No_type,No_type);Type(ID00996) == Cst(No_type,No_type);Type(ID00995) == Cst(No_type,No_type);Type(ID00994) == Cst(No_type,No_type);Type(ID00993) == Cst(No_type,No_type);Type(ID00992) == Cst(No_type,No_type);Type(ID00991) == Cst(No_type,No_type);Type(ID00990) == Cst(No_type,No_type);Type(ID00989) == Cst(No_type,No_type);Type(ID00988) == Cst(No_type,No_type);Type(ID00987) == Cst(No_type,No_type);Type(ID00986) == Cst(No_type,No_type);Type(ID00985) == Cst(No_type,No_type);Type(ID00984) == Cst(No_type,No_type);Type(ID00983) == Cst(No_type,No_type);Type(ID00982) == Cst(No_type,No_type);Type(ID00981) == Cst(No_type,No_type);Type(ID00980) == Cst(No_type,No_type);Type(ID00979) == Cst(No_type,No_type);Type(ID00978) == Cst(No_type,No_type);Type(ID00977) == Cst(No_type,No_type);Type(ID00976) == Cst(No_type,No_type);Type(ID00975) == Cst(No_type,No_type);Type(ID00974) == Cst(No_type,No_type);Type(ID00973) == Cst(No_type,No_type);Type(ID00972) == Cst(No_type,No_type);Type(ID00971) == Cst(No_type,No_type);Type(ID00970) == Cst(No_type,No_type);Type(ID00969) == Cst(No_type,No_type);Type(ID00968) == Cst(No_type,No_type);Type(ID00967) == Cst(No_type,No_type);Type(ID00966) == Cst(No_type,No_type);Type(ID00965) == Cst(No_type,No_type);Type(ID00964) == Cst(No_type,No_type);Type(ID00963) == Cst(No_type,No_type);Type(ID00962) == Cst(No_type,No_type);Type(ID00961) == Cst(No_type,No_type);Type(ID00960) == Cst(No_type,No_type);Type(ID00959) == Cst(No_type,No_type);Type(ID00958) == Cst(No_type,No_type);Type(ID00957) == Cst(No_type,No_type);Type(ID00956) == Cst(No_type,No_type);Type(ID00955) == Cst(No_type,No_type);Type(ID00954) == Cst(No_type,No_type);Type(ID00953) == Cst(No_type,No_type);Type(ID00952) == Cst(No_type,No_type);Type(ID00951) == Cst(No_type,No_type);Type(ID00950) == Cst(No_type,No_type);Type(ID00949) == Cst(No_type,No_type);Type(ID00948) == Cst(No_type,No_type);Type(ID00947) == Cst(No_type,No_type);Type(ID00946) == Cst(No_type,No_type);Type(ID00945) == Cst(No_type,No_type);Type(ID00944) == Cst(No_type,No_type);Type(ID00943) == Cst(No_type,No_type);Type(ID00942) == Cst(No_type,No_type);Type(ID00941) == Cst(No_type,No_type);Type(ID00940) == Cst(No_type,No_type);Type(ID00939) == Cst(No_type,No_type);Type(ID00938) == Cst(No_type,No_type);Type(ID00937) == Cst(No_type,No_type);Type(ID00936) == Cst(No_type,No_type);Type(ID00935) == Cst(No_type,No_type);Type(ID00934) == Cst(No_type,No_type);Type(ID00933) == Cst(No_type,No_type);Type(ID00932) == Cst(No_type,No_type);Type(ID00931) == Cst(No_type,No_type);Type(ID00930) == Cst(No_type,No_type);Type(ID00929) == Cst(No_type,No_type);Type(ID00928) == Cst(No_type,No_type);Type(ID00927) == Cst(No_type,No_type);Type(ID00926) == Cst(No_type,No_type);Type(ID00925) == Cst(No_type,No_type);Type(ID00924) == Cst(No_type,No_type);Type(ID00923) == Cst(No_type,No_type);Type(ID00922) == Cst(No_type,No_type);Type(ID00921) == Cst(No_type,No_type);Type(ID00920) == Cst(No_type,No_type);Type(ID00919) == Cst(No_type,No_type);Type(ID00918) == Cst(No_type,No_type);Type(ID00917) == Cst(No_type,No_type);Type(ID00916) == Cst(No_type,No_type);Type(ID00915) == Cst(No_type,No_type);Type(ID00914) == Cst(No_type,No_type);Type(ID00913) == Cst(No_type,No_type);Type(ID00912) == Cst(No_type,No_type);Type(ID00911) == Cst(No_type,No_type);Type(ID00910) == Cst(No_type,No_type);Type(ID00909) == Cst(No_type,No_type);Type(ID00908) == Cst(No_type,No_type);Type(ID00907) == Cst(No_type,No_type);Type(ID00906) == Cst(No_type,No_type);Type(ID00905) == Cst(No_type,No_type);Type(ID00904) == Cst(No_type,No_type);Type(ID00903) == Cst(No_type,No_type);Type(ID00902) == Cst(No_type,No_type);Type(ID00901) == Cst(No_type,No_type);Type(ID00900) == Cst(No_type,No_type);Type(ID00899) == Cst(No_type,No_type);Type(ID00898) == Cst(No_type,No_type);Type(ID00897) == Cst(No_type,No_type);Type(ID00896) == Cst(No_type,No_type);Type(ID00895) == Cst(No_type,No_type);Type(ID00894) == Cst(No_type,No_type);Type(ID00893) == Cst(No_type,No_type);Type(ID00892) == Cst(No_type,No_type);Type(ID00891) == Cst(No_type,No_type);Type(ID00890) == Cst(No_type,No_type);Type(ID00889) == Cst(No_type,No_type);Type(ID00888) == Cst(No_type,No_type);Type(ID00887) == Cst(No_type,No_type);Type(ID00886) == Cst(No_type,No_type);Type(ID00885) == Cst(No_type,No_type);Type(ID00884) == Cst(No_type,No_type);Type(ID00883) == Cst(No_type,No_type);Type(ID00882) == Cst(No_type,No_type);Type(ID00881) == Cst(No_type,No_type);Type(ID00880) == Cst(No_type,No_type);Type(ID00879) == Cst(No_type,No_type);Type(ID00878) == Cst(No_type,No_type);Type(ID00877) == Cst(No_type,No_type);Type(ID00876) == Cst(No_type,No_type);Type(ID00875) == Cst(No_type,No_type);Type(ID00874) == Cst(No_type,No_type);Type(ID00873) == Cst(No_type,No_type);Type(ID00872) == Cst(No_type,No_type);Type(ID00871) == Cst(No_type,No_type);Type(ID00870) == Cst(No_type,No_type);Type(ID00869) == Cst(No_type,No_type);Type(ID00868) == Cst(No_type,No_type);Type(ID00867) == Cst(No_type,No_type);Type(ID00866) == Cst(No_type,No_type);Type(ID00865) == Cst(No_type,No_type);Type(ID00864) == Cst(No_type,No_type);Type(ID00863) == Cst(No_type,No_type);Type(ID00862) == Cst(No_type,No_type);Type(ID00861) == Cst(No_type,No_type);Type(ID00860) == Cst(No_type,No_type);Type(ID00859) == Cst(No_type,No_type);Type(ID00858) == Cst(No_type,No_type);Type(ID00857) == Cst(No_type,No_type);Type(ID00856) == Cst(No_type,No_type);Type(ID00855) == Cst(No_type,No_type);Type(ID00854) == Cst(No_type,No_type);Type(ID00853) == Cst(No_type,No_type);Type(ID00852) == Cst(No_type,No_type);Type(ID00851) == Cst(No_type,No_type);Type(ID00850) == Cst(No_type,No_type);Type(ID00849) == Cst(No_type,No_type);Type(ID00848) == Cst(No_type,No_type);Type(ID00847) == Cst(No_type,No_type);Type(ID00846) == Cst(No_type,No_type);Type(ID00845) == Cst(No_type,No_type);Type(ID00844) == Cst(No_type,No_type);Type(ID00843) == Cst(No_type,No_type);Type(ID00842) == Cst(No_type,No_type);Type(ID00841) == Cst(No_type,No_type);Type(ID00840) == Cst(No_type,No_type);Type(ID00839) == Cst(No_type,No_type);Type(ID00838) == Cst(No_type,No_type);Type(ID00837) == Cst(No_type,No_type);Type(ID00836) == Cst(No_type,No_type);Type(ID00835) == Cst(No_type,No_type);Type(ID00834) == Cst(No_type,No_type);Type(ID00833) == Cst(No_type,No_type);Type(ID00832) == Cst(No_type,No_type);Type(ID00831) == Cst(No_type,No_type);Type(ID00830) == Cst(No_type,No_type);Type(ID00829) == Cst(No_type,No_type);Type(ID00828) == Cst(No_type,No_type);Type(ID00827) == Cst(No_type,No_type);Type(ID00826) == Cst(No_type,No_type);Type(ID00825) == Cst(No_type,No_type);Type(ID00824) == Cst(No_type,No_type);Type(ID00823) == Cst(No_type,No_type);Type(ID00822) == Cst(No_type,No_type);Type(ID00821) == Cst(No_type,No_type);Type(ID00820) == Cst(No_type,No_type);Type(ID00819) == Cst(No_type,No_type);Type(ID00818) == Cst(No_type,No_type);Type(ID00817) == Cst(No_type,No_type);Type(ID00816) == Cst(No_type,No_type);Type(ID00815) == Cst(No_type,No_type);Type(ID00814) == Cst(No_type,No_type);Type(ID00813) == Cst(No_type,No_type);Type(ID00812) == Cst(No_type,No_type);Type(ID00811) == Cst(No_type,No_type);Type(ID00810) == Cst(No_type,No_type);Type(ID00809) == Cst(No_type,No_type);Type(ID00808) == Cst(No_type,No_type);Type(ID00807) == Cst(No_type,No_type);Type(ID00806) == Cst(No_type,No_type);Type(ID00805) == Cst(No_type,No_type);Type(ID00804) == Cst(No_type,No_type);Type(ID00803) == Cst(No_type,No_type);Type(ID00802) == Cst(No_type,No_type);Type(ID00801) == Cst(No_type,No_type);Type(ID00800) == Cst(No_type,No_type);Type(ID00799) == Cst(No_type,No_type);Type(ID00798) == Cst(No_type,No_type);Type(ID00797) == Cst(No_type,No_type);Type(ID00796) == Cst(No_type,No_type);Type(ID00795) == Cst(No_type,No_type);Type(ID00794) == Cst(No_type,No_type);Type(ID00793) == Cst(No_type,No_type);Type(ID00792) == Cst(No_type,No_type);Type(ID00791) == Cst(No_type,No_type);Type(ID00790) == Cst(No_type,No_type);Type(ID00789) == Cst(No_type,No_type);Type(ID00788) == Cst(No_type,No_type);Type(ID00787) == Cst(No_type,No_type);Type(ID00786) == Cst(No_type,No_type);Type(ID00785) == Cst(No_type,No_type);Type(ID00784) == Cst(No_type,No_type);Type(ID00783) == Cst(No_type,No_type);Type(ID00782) == Cst(No_type,No_type);Type(ID00781) == Cst(No_type,No_type);Type(ID00780) == Cst(No_type,No_type);Type(ID00779) == Cst(No_type,No_type);Type(ID00778) == Cst(No_type,No_type);Type(ID00777) == Cst(No_type,No_type);Type(ID00776) == Cst(No_type,No_type);Type(ID00775) == Cst(No_type,No_type);Type(ID00774) == Cst(No_type,No_type);Type(ID00773) == Cst(No_type,No_type);Type(ID00772) == Cst(No_type,No_type);Type(ID00771) == Cst(No_type,No_type);Type(ID00770) == Cst(No_type,No_type);Type(ID00769) == Cst(No_type,No_type);Type(ID00768) == Cst(No_type,No_type);Type(ID00767) == Cst(No_type,No_type);Type(ID00766) == Cst(No_type,No_type);Type(ID00765) == Cst(No_type,No_type);Type(ID00764) == Cst(No_type,No_type);Type(ID00763) == Cst(No_type,No_type);Type(ID00762) == Cst(No_type,No_type);Type(ID00761) == Cst(No_type,No_type);Type(ID00760) == Cst(No_type,No_type);Type(ID00759) == Cst(No_type,No_type);Type(ID00758) == Cst(No_type,No_type);Type(ID00757) == Cst(No_type,No_type);Type(ID00756) == Cst(No_type,No_type);Type(ID00755) == Cst(No_type,No_type);Type(ID00754) == Cst(No_type,No_type);Type(ID00753) == Cst(No_type,No_type);Type(ID00752) == Cst(No_type,No_type);Type(ID00751) == Cst(No_type,No_type);Type(ID00750) == Cst(No_type,No_type);Type(ID00749) == Cst(No_type,No_type);Type(ID00748) == Cst(No_type,No_type);Type(ID00747) == Cst(No_type,No_type);Type(ID00746) == Cst(No_type,No_type);Type(ID00745) == Cst(No_type,No_type);Type(ID00744) == Cst(No_type,No_type);Type(ID00743) == Cst(No_type,No_type);Type(ID00742) == Cst(No_type,No_type);Type(ID00741) == Cst(No_type,No_type);Type(ID00740) == Cst(No_type,No_type);Type(ID00739) == Cst(No_type,No_type);Type(ID00738) == Cst(No_type,No_type);Type(ID00737) == Cst(No_type,No_type);Type(ID00736) == Cst(No_type,No_type);Type(ID00735) == Cst(No_type,No_type);Type(ID00734) == Cst(No_type,No_type);Type(ID00733) == Cst(No_type,No_type);Type(ID00732) == Cst(No_type,No_type);Type(ID00731) == Cst(No_type,No_type);Type(ID00730) == Cst(No_type,No_type);Type(ID00729) == Cst(No_type,No_type);Type(ID00728) == Cst(No_type,No_type);Type(ID00727) == Cst(No_type,No_type);Type(ID00726) == Cst(No_type,No_type);Type(ID00725) == Cst(No_type,No_type);Type(ID00724) == Cst(No_type,No_type);Type(ID00723) == Cst(No_type,No_type);Type(ID00722) == Cst(No_type,No_type);Type(ID00721) == Cst(No_type,No_type);Type(ID00720) == Cst(No_type,No_type);Type(ID00719) == Cst(No_type,No_type);Type(ID00718) == Cst(No_type,No_type);Type(ID00717) == Cst(No_type,No_type);Type(ID00716) == Cst(No_type,No_type);Type(ID00715) == Cst(No_type,No_type);Type(ID00714) == Cst(No_type,No_type);Type(ID00713) == Cst(No_type,No_type);Type(ID00712) == Cst(No_type,No_type);Type(ID00711) == Cst(No_type,No_type);Type(ID00710) == Cst(No_type,No_type);Type(ID00709) == Cst(No_type,No_type);Type(ID00708) == Cst(No_type,No_type);Type(ID00707) == Cst(No_type,No_type);Type(ID00706) == Cst(No_type,No_type);Type(ID00705) == Cst(No_type,No_type);Type(ID00704) == Cst(No_type,No_type);Type(ID00703) == Cst(No_type,No_type);Type(ID00702) == Cst(No_type,No_type);Type(ID00701) == Cst(No_type,No_type);Type(ID00700) == Cst(No_type,No_type);Type(ID00699) == Cst(No_type,No_type);Type(ID00698) == Cst(No_type,No_type);Type(ID00697) == Cst(No_type,No_type);Type(ID00696) == Cst(No_type,No_type);Type(ID00695) == Cst(No_type,No_type);Type(ID00694) == Cst(No_type,No_type);Type(ID00693) == Cst(No_type,No_type);Type(ID00692) == Cst(No_type,No_type);Type(ID00691) == Cst(No_type,No_type);Type(ID00690) == Cst(No_type,No_type);Type(ID00689) == Cst(No_type,No_type);Type(ID00688) == Cst(No_type,No_type);Type(ID00687) == Cst(No_type,No_type);Type(ID00686) == Cst(No_type,No_type);Type(ID00685) == Cst(No_type,No_type);Type(ID00684) == Cst(No_type,No_type);Type(ID00683) == Cst(No_type,No_type);Type(ID00682) == Cst(No_type,No_type);Type(ID00681) == Cst(No_type,No_type);Type(ID00680) == Cst(No_type,No_type);Type(ID00679) == Cst(No_type,No_type);Type(ID00678) == Cst(No_type,No_type);Type(ID00677) == Cst(No_type,No_type);Type(ID00676) == Cst(No_type,No_type);Type(ID00675) == Cst(No_type,No_type);Type(ID00674) == Cst(No_type,No_type);Type(ID00673) == Cst(No_type,No_type);Type(ID00672) == Cst(No_type,No_type);Type(ID00671) == Cst(No_type,No_type);Type(ID00670) == Cst(No_type,No_type);Type(ID00669) == Cst(No_type,No_type);Type(ID00668) == Cst(No_type,No_type);Type(ID00667) == Cst(No_type,No_type);Type(ID00666) == Cst(No_type,No_type);Type(ID00665) == Cst(No_type,No_type);Type(ID00664) == Cst(No_type,No_type);Type(ID00663) == Cst(No_type,No_type);Type(ID00662) == Cst(No_type,No_type);Type(ID00661) == Cst(No_type,No_type);Type(ID00660) == Cst(No_type,No_type);Type(ID00659) == Cst(No_type,No_type);Type(ID00658) == Cst(No_type,No_type);Type(ID00657) == Cst(No_type,No_type);Type(ID00656) == Cst(No_type,No_type);Type(ID00655) == Cst(No_type,No_type);Type(ID00654) == Cst(No_type,No_type);Type(ID00653) == Cst(No_type,No_type);Type(ID00652) == Cst(No_type,No_type);Type(ID00651) == Cst(No_type,No_type);Type(ID00650) == Cst(No_type,No_type);Type(ID00649) == Cst(No_type,No_type);Type(ID00648) == Cst(No_type,No_type);Type(ID00647) == Cst(No_type,No_type);Type(ID00646) == Cst(No_type,No_type);Type(ID00645) == Cst(No_type,No_type);Type(ID00644) == Cst(No_type,No_type);Type(ID00643) == Cst(No_type,No_type);Type(ID00642) == Cst(No_type,No_type);Type(ID00641) == Cst(No_type,No_type);Type(ID00640) == Cst(No_type,No_type);Type(ID00639) == Cst(No_type,No_type);Type(ID00638) == Cst(No_type,No_type);Type(ID00637) == Cst(No_type,No_type);Type(ID00636) == Cst(No_type,No_type);Type(ID00635) == Cst(No_type,No_type);Type(ID00634) == Cst(No_type,No_type);Type(ID00633) == Cst(No_type,No_type);Type(ID00632) == Cst(No_type,No_type);Type(ID00631) == Cst(No_type,No_type);Type(ID00630) == Cst(No_type,No_type);Type(ID00629) == Cst(No_type,No_type);Type(ID00628) == Cst(No_type,No_type);Type(ID00627) == Cst(No_type,No_type);Type(ID00626) == Cst(No_type,No_type);Type(ID00625) == Cst(No_type,No_type);Type(ID00624) == Cst(No_type,No_type);Type(ID00623) == Cst(No_type,No_type);Type(ID00622) == Cst(No_type,No_type);Type(ID00621) == Cst(No_type,No_type);Type(ID00620) == Cst(No_type,No_type);Type(ID00619) == Cst(No_type,No_type);Type(ID00618) == Cst(No_type,No_type);Type(ID00617) == Cst(No_type,No_type);Type(ID00616) == Cst(No_type,No_type);Type(ID00615) == Cst(No_type,No_type);Type(ID00614) == Cst(No_type,No_type);Type(ID00613) == Cst(No_type,No_type);Type(ID00612) == Cst(No_type,No_type);Type(ID00611) == Cst(No_type,No_type);Type(ID00610) == Cst(No_type,No_type);Type(ID00609) == Cst(No_type,No_type);Type(ID00608) == Cst(No_type,No_type);Type(ID00607) == Cst(No_type,No_type);Type(ID00606) == Cst(No_type,No_type);Type(ID00605) == Cst(No_type,No_type);Type(ID00604) == Cst(No_type,No_type);Type(ID00603) == Cst(No_type,No_type);Type(ID00602) == Cst(No_type,No_type);Type(ID00601) == Cst(No_type,No_type);Type(ID00600) == Cst(No_type,No_type);Type(ID00599) == Cst(No_type,No_type);Type(ID00598) == Cst(No_type,No_type);Type(ID00597) == Cst(No_type,No_type);Type(ID00596) == Cst(No_type,No_type);Type(ID00595) == Cst(No_type,No_type);Type(ID00594) == Cst(No_type,No_type);Type(ID00593) == Cst(No_type,No_type);Type(ID00592) == Cst(No_type,No_type);Type(ID00591) == Cst(No_type,No_type);Type(ID00590) == Cst(No_type,No_type);Type(ID00589) == Cst(No_type,No_type);Type(ID00588) == Cst(No_type,No_type);Type(ID00587) == Cst(No_type,No_type);Type(ID00586) == Cst(No_type,No_type);Type(ID00585) == Cst(No_type,No_type);Type(ID00584) == Cst(No_type,No_type);Type(ID00583) == Cst(No_type,No_type);Type(ID00582) == Cst(No_type,No_type);Type(ID00581) == Cst(No_type,No_type);Type(ID00580) == Cst(No_type,No_type);Type(ID00579) == Cst(No_type,No_type);Type(ID00578) == Cst(No_type,No_type);Type(ID00577) == Cst(No_type,No_type);Type(ID00576) == Cst(No_type,No_type);Type(ID00575) == Cst(No_type,No_type);Type(ID00574) == Cst(No_type,No_type);Type(ID00573) == Cst(No_type,No_type);Type(ID00572) == Cst(No_type,No_type);Type(ID00571) == Cst(No_type,No_type);Type(ID00570) == Cst(No_type,No_type);Type(ID00569) == Cst(No_type,No_type);Type(ID00568) == Cst(No_type,No_type);Type(ID00567) == Cst(No_type,No_type);Type(ID00566) == Cst(No_type,No_type);Type(ID00565) == Cst(No_type,No_type);Type(ID00564) == Cst(No_type,No_type);Type(ID00563) == Cst(No_type,No_type);Type(ID00562) == Cst(No_type,No_type);Type(ID00561) == Cst(No_type,No_type);Type(ID00560) == Cst(No_type,No_type);Type(ID00559) == Cst(No_type,No_type);Type(ID00558) == Cst(No_type,No_type);Type(ID00557) == Cst(No_type,No_type);Type(ID00556) == Cst(No_type,No_type);Type(ID00555) == Cst(No_type,No_type);Type(ID00554) == Cst(No_type,No_type);Type(ID00553) == Cst(No_type,No_type);Type(ID00552) == Cst(No_type,No_type);Type(ID00551) == Cst(No_type,No_type);Type(ID00550) == Cst(No_type,No_type);Type(ID00549) == Cst(No_type,No_type);Type(ID00548) == Cst(No_type,No_type);Type(ID00547) == Cst(No_type,No_type);Type(ID00546) == Cst(No_type,No_type);Type(ID00545) == Cst(No_type,No_type);Type(ID00544) == Cst(No_type,No_type);Type(ID00543) == Cst(No_type,No_type);Type(ID00542) == Cst(No_type,No_type);Type(ID00541) == Cst(No_type,No_type);Type(ID00540) == Cst(No_type,No_type);Type(ID00539) == Cst(No_type,No_type);Type(ID00538) == Cst(No_type,No_type);Type(ID00537) == Cst(No_type,No_type);Type(ID00536) == Cst(No_type,No_type);Type(ID00535) == Cst(No_type,No_type);Type(ID00534) == Cst(No_type,No_type);Type(ID00533) == Cst(No_type,No_type);Type(ID00532) == Cst(No_type,No_type);Type(ID00531) == Cst(No_type,No_type);Type(ID00530) == Cst(No_type,No_type);Type(ID00529) == Cst(No_type,No_type);Type(ID00528) == Cst(No_type,No_type);Type(ID00527) == Cst(No_type,No_type);Type(ID00526) == Cst(No_type,No_type);Type(ID00525) == Cst(No_type,No_type);Type(ID00524) == Cst(No_type,No_type);Type(ID00523) == Cst(No_type,No_type);Type(ID00522) == Cst(No_type,No_type);Type(ID00521) == Cst(No_type,No_type);Type(ID00520) == Cst(No_type,No_type);Type(ID00519) == Cst(No_type,No_type);Type(ID00518) == Cst(No_type,No_type);Type(ID00517) == Cst(No_type,No_type);Type(ID00516) == Cst(No_type,No_type);Type(ID00515) == Cst(No_type,No_type);Type(ID00514) == Cst(No_type,No_type);Type(ID00513) == Cst(No_type,No_type);Type(ID00512) == Cst(No_type,No_type);Type(ID00511) == Cst(No_type,No_type);Type(ID00510) == Cst(No_type,No_type);Type(ID00509) == Cst(No_type,No_type);Type(ID00508) == Cst(No_type,No_type);Type(ID00507) == Cst(No_type,No_type);Type(ID00506) == Cst(No_type,No_type);Type(ID00505) == Cst(No_type,No_type);Type(ID00504) == Cst(No_type,No_type);Type(ID00503) == Cst(No_type,No_type);Type(ID00502) == Cst(No_type,No_type);Type(ID00501) == Cst(No_type,No_type);Type(ID00500) == Cst(No_type,No_type);Type(ID00499) == Cst(No_type,No_type);Type(ID00498) == Cst(No_type,No_type);Type(ID00497) == Cst(No_type,No_type);Type(ID00496) == Cst(No_type,No_type);Type(ID00495) == Cst(No_type,No_type);Type(ID00494) == Cst(No_type,No_type);Type(ID00493) == Cst(No_type,No_type);Type(ID00492) == Cst(No_type,No_type);Type(ID00491) == Cst(No_type,No_type);Type(ID00490) == Cst(No_type,No_type);Type(ID00489) == Cst(No_type,No_type);Type(ID00488) == Cst(No_type,No_type);Type(ID00487) == Cst(No_type,No_type);Type(ID00486) == Cst(No_type,No_type);Type(ID00485) == Cst(No_type,No_type);Type(ID00484) == Cst(No_type,No_type);Type(ID00483) == Cst(No_type,No_type);Type(ID00482) == Cst(No_type,No_type);Type(ID00481) == Cst(No_type,No_type);Type(ID00480) == Cst(No_type,No_type);Type(ID00479) == Cst(No_type,No_type);Type(ID00478) == Cst(No_type,No_type);Type(ID00477) == Cst(No_type,No_type);Type(ID00476) == Cst(No_type,No_type);Type(ID00475) == Cst(No_type,No_type);Type(ID00474) == Cst(No_type,No_type);Type(ID00473) == Cst(No_type,No_type);Type(ID00472) == Cst(No_type,No_type);Type(ID00471) == Cst(No_type,No_type);Type(ID00470) == Cst(No_type,No_type);Type(ID00469) == Cst(No_type,No_type);Type(ID00468) == Cst(No_type,No_type);Type(ID00467) == Cst(No_type,No_type);Type(ID00466) == Cst(No_type,No_type);Type(ID00465) == Cst(No_type,No_type);Type(ID00464) == Cst(No_type,No_type);Type(ID00463) == Cst(No_type,No_type);Type(ID00462) == Cst(No_type,No_type);Type(ID00461) == Cst(No_type,No_type);Type(ID00460) == Cst(No_type,No_type);Type(ID00459) == Cst(No_type,No_type);Type(ID00458) == Cst(No_type,No_type);Type(ID00457) == Cst(No_type,No_type);Type(ID00456) == Cst(No_type,No_type);Type(ID00455) == Cst(No_type,No_type);Type(ID00454) == Cst(No_type,No_type);Type(ID00453) == Cst(No_type,No_type);Type(ID00452) == Cst(No_type,No_type);Type(ID00451) == Cst(No_type,No_type);Type(ID00450) == Cst(No_type,No_type);Type(ID00449) == Cst(No_type,No_type);Type(ID00448) == Cst(No_type,No_type);Type(ID00447) == Cst(No_type,No_type);Type(ID00446) == Cst(No_type,No_type);Type(ID00445) == Cst(No_type,No_type);Type(ID00444) == Cst(No_type,No_type);Type(ID00443) == Cst(No_type,No_type);Type(ID00442) == Cst(No_type,No_type);Type(ID00441) == Cst(No_type,No_type);Type(ID00440) == Cst(No_type,No_type);Type(ID00439) == Cst(No_type,No_type);Type(ID00438) == Cst(No_type,No_type);Type(ID00437) == Cst(No_type,No_type);Type(ID00436) == Cst(No_type,No_type);Type(ID00435) == Cst(No_type,No_type);Type(ID00434) == Cst(No_type,No_type);Type(ID00433) == Cst(No_type,No_type);Type(ID00432) == Cst(No_type,No_type);Type(ID00431) == Cst(No_type,No_type);Type(ID00430) == Cst(No_type,No_type);Type(ID00429) == Cst(No_type,No_type);Type(ID00428) == Cst(No_type,No_type);Type(ID00427) == Cst(No_type,No_type);Type(ID00426) == Cst(No_type,No_type);Type(ID00425) == Cst(No_type,No_type);Type(ID00424) == Cst(No_type,No_type);Type(ID00423) == Cst(No_type,No_type);Type(ID00422) == Cst(No_type,No_type);Type(ID00421) == Cst(No_type,No_type);Type(ID00420) == Cst(No_type,No_type);Type(ID00419) == Cst(No_type,No_type);Type(ID00418) == Cst(No_type,No_type);Type(ID00417) == Cst(No_type,No_type);Type(ID00416) == Cst(No_type,No_type);Type(ID00415) == Cst(No_type,No_type);Type(ID00414) == Cst(No_type,No_type);Type(ID00413) == Cst(No_type,No_type);Type(ID00412) == Cst(No_type,No_type);Type(ID00411) == Cst(No_type,No_type);Type(ID00410) == Cst(No_type,No_type);Type(ID00409) == Cst(No_type,No_type);Type(ID00408) == Cst(No_type,No_type);Type(ID00407) == Cst(No_type,No_type);Type(ID00406) == Cst(No_type,No_type);Type(ID00405) == Cst(No_type,No_type);Type(ID00404) == Cst(No_type,No_type);Type(ID00403) == Cst(No_type,No_type);Type(ID00402) == Cst(No_type,No_type);Type(ID00401) == Cst(No_type,No_type);Type(ID00400) == Cst(No_type,No_type);Type(ID00399) == Cst(No_type,No_type);Type(ID00398) == Cst(No_type,No_type);Type(ID00397) == Cst(No_type,No_type);Type(ID00396) == Cst(No_type,No_type);Type(ID00395) == Cst(No_type,No_type);Type(ID00394) == Cst(No_type,No_type);Type(ID00393) == Cst(No_type,No_type);Type(ID00392) == Cst(No_type,No_type);Type(ID00391) == Cst(No_type,No_type);Type(ID00390) == Cst(No_type,No_type);Type(ID00389) == Cst(No_type,No_type);Type(ID00388) == Cst(No_type,No_type);Type(ID00387) == Cst(No_type,No_type);Type(ID00386) == Cst(No_type,No_type);Type(ID00385) == Cst(No_type,No_type);Type(ID00384) == Cst(No_type,No_type);Type(ID00383) == Cst(No_type,No_type);Type(ID00382) == Cst(No_type,No_type);Type(ID00381) == Cst(No_type,No_type);Type(ID00380) == Cst(No_type,No_type);Type(ID00379) == Cst(No_type,No_type);Type(ID00378) == Cst(No_type,No_type);Type(ID00377) == Cst(No_type,No_type);Type(ID00376) == Cst(No_type,No_type);Type(ID00375) == Cst(No_type,No_type);Type(ID00374) == Cst(No_type,No_type);Type(ID00373) == Cst(No_type,No_type);Type(ID00372) == Cst(No_type,No_type);Type(ID00371) == Cst(No_type,No_type);Type(ID00370) == Cst(No_type,No_type);Type(ID00369) == Cst(No_type,No_type);Type(ID00368) == Cst(No_type,No_type);Type(ID00367) == Cst(No_type,No_type);Type(ID00366) == Cst(No_type,No_type);Type(ID00365) == Cst(No_type,No_type);Type(ID00364) == Cst(No_type,No_type);Type(ID00363) == Cst(No_type,No_type);Type(ID00362) == Cst(No_type,No_type);Type(ID00361) == Cst(No_type,No_type);Type(ID00360) == Cst(No_type,No_type);Type(ID00359) == Cst(No_type,No_type);Type(ID00358) == Cst(No_type,No_type);Type(ID00357) == Cst(No_type,No_type);Type(ID00356) == Cst(No_type,No_type);Type(ID00355) == Cst(No_type,No_type);Type(ID00354) == Cst(No_type,No_type);Type(ID00353) == Cst(No_type,No_type);Type(ID00352) == Cst(No_type,No_type);Type(ID00351) == Cst(No_type,No_type);Type(ID00350) == Cst(No_type,No_type);Type(ID00349) == Cst(No_type,No_type);Type(ID00348) == Cst(No_type,No_type);Type(ID00347) == Cst(No_type,No_type);Type(ID00346) == Cst(No_type,No_type);Type(ID00345) == Cst(No_type,No_type);Type(ID00344) == Cst(No_type,No_type);Type(ID00343) == Cst(No_type,No_type);Type(ID00342) == Cst(No_type,No_type);Type(ID00341) == Cst(No_type,No_type);Type(ID00340) == Cst(No_type,No_type);Type(ID00339) == Cst(No_type,No_type);Type(ID00338) == Cst(No_type,No_type);Type(ID00337) == Cst(No_type,No_type);Type(ID00336) == Cst(No_type,No_type);Type(ID00335) == Cst(No_type,No_type);Type(ID00334) == Cst(No_type,No_type);Type(ID00333) == Cst(No_type,No_type);Type(ID00332) == Cst(No_type,No_type);Type(ID00331) == Cst(No_type,No_type);Type(ID00330) == Cst(No_type,No_type);Type(ID00329) == Cst(No_type,No_type);Type(ID00328) == Cst(No_type,No_type);Type(ID00327) == Cst(No_type,No_type);Type(ID00326) == Cst(No_type,No_type);Type(ID00325) == Cst(No_type,No_type);Type(ID00324) == Cst(No_type,No_type);Type(ID00323) == Cst(No_type,No_type);Type(ID00322) == Cst(No_type,No_type);Type(ID00321) == Cst(No_type,No_type);Type(ID00320) == Cst(No_type,No_type);Type(ID00319) == Cst(No_type,No_type);Type(ID00318) == Cst(No_type,No_type);Type(ID00317) == Cst(No_type,No_type);Type(ID00316) == Cst(No_type,No_type);Type(ID00315) == Cst(No_type,No_type);Type(ID00314) == Cst(No_type,No_type);Type(ID00313) == Cst(No_type,No_type);Type(ID00312) == Cst(No_type,No_type);Type(ID00311) == Cst(No_type,No_type);Type(ID00310) == Cst(No_type,No_type);Type(ID00309) == Cst(No_type,No_type);Type(ID00308) == Cst(No_type,No_type);Type(ID00307) == Cst(No_type,No_type);Type(ID00306) == Cst(No_type,No_type);Type(ID00305) == Cst(No_type,No_type);Type(ID00304) == Cst(No_type,No_type);Type(ID00303) == Cst(No_type,No_type);Type(ID00302) == Cst(No_type,No_type);Type(ID00301) == Cst(No_type,No_type);Type(ID00300) == Cst(No_type,No_type);Type(ID00299) == Cst(No_type,No_type);Type(ID00298) == Cst(No_type,No_type);Type(ID00297) == Cst(No_type,No_type);Type(ID00296) == Cst(No_type,No_type);Type(ID00295) == Cst(No_type,No_type);Type(ID00294) == Cst(No_type,No_type);Type(ID00293) == Cst(No_type,No_type);Type(ID00292) == Cst(No_type,No_type);Type(ID00291) == Cst(No_type,No_type);Type(ID00290) == Cst(No_type,No_type);Type(ID00289) == Cst(No_type,No_type);Type(ID00288) == Cst(No_type,No_type);Type(ID00287) == Cst(No_type,No_type);Type(ID00286) == Cst(No_type,No_type);Type(ID00285) == Cst(No_type,No_type);Type(ID00284) == Cst(No_type,No_type);Type(ID00283) == Cst(No_type,No_type);Type(ID00282) == Cst(No_type,No_type);Type(ID00281) == Cst(No_type,No_type);Type(ID00280) == Cst(No_type,No_type);Type(ID00279) == Cst(No_type,No_type);Type(ID00278) == Cst(No_type,No_type);Type(ID00277) == Cst(No_type,No_type);Type(ID00276) == Cst(No_type,No_type);Type(ID00275) == Cst(No_type,No_type);Type(ID00274) == Cst(No_type,No_type);Type(ID00273) == Cst(No_type,No_type);Type(ID00272) == Cst(No_type,No_type);Type(ID00271) == Cst(No_type,No_type);Type(ID00270) == Cst(No_type,No_type);Type(ID00269) == Cst(No_type,No_type);Type(ID00268) == Cst(No_type,No_type);Type(ID00267) == Cst(No_type,No_type);Type(ID00266) == Cst(No_type,No_type);Type(ID00265) == Cst(No_type,No_type);Type(ID00264) == Cst(No_type,No_type);Type(ID00263) == Cst(No_type,No_type);Type(ID00262) == Cst(No_type,No_type);Type(ID00261) == Cst(No_type,No_type);Type(ID00260) == Cst(No_type,No_type);Type(ID00259) == Cst(No_type,No_type);Type(ID00258) == Cst(No_type,No_type);Type(ID00257) == Cst(No_type,No_type);Type(ID00256) == Cst(No_type,No_type);Type(ID00255) == Cst(No_type,No_type);Type(ID00254) == Cst(No_type,No_type);Type(ID00253) == Cst(No_type,No_type);Type(ID00252) == Cst(No_type,No_type);Type(ID00251) == Cst(No_type,No_type);Type(ID00250) == Cst(No_type,No_type);Type(ID00249) == Cst(No_type,No_type);Type(ID00248) == Cst(No_type,No_type);Type(ID00247) == Cst(No_type,No_type);Type(ID00246) == Cst(No_type,No_type);Type(ID00245) == Cst(No_type,No_type);Type(ID00244) == Cst(No_type,No_type);Type(ID00243) == Cst(No_type,No_type);Type(ID00242) == Cst(No_type,No_type);Type(ID00241) == Cst(No_type,No_type);Type(ID00240) == Cst(No_type,No_type);Type(ID00239) == Cst(No_type,No_type);Type(ID00238) == Cst(No_type,No_type);Type(ID00237) == Cst(No_type,No_type);Type(ID00236) == Cst(No_type,No_type);Type(ID00235) == Cst(No_type,No_type);Type(ID00234) == Cst(No_type,No_type);Type(ID00233) == Cst(No_type,No_type);Type(ID00232) == Cst(No_type,No_type);Type(ID00231) == Cst(No_type,No_type);Type(ID00230) == Cst(No_type,No_type);Type(ID00229) == Cst(No_type,No_type);Type(ID00228) == Cst(No_type,No_type);Type(ID00227) == Cst(No_type,No_type);Type(ID00226) == Cst(No_type,No_type);Type(ID00225) == Cst(No_type,No_type);Type(ID00224) == Cst(No_type,No_type);Type(ID00223) == Cst(No_type,No_type);Type(ID00222) == Cst(No_type,No_type);Type(ID00221) == Cst(No_type,No_type);Type(ID00220) == Cst(No_type,No_type);Type(ID00219) == Cst(No_type,No_type);Type(ID00218) == Cst(No_type,No_type);Type(ID00217) == Cst(No_type,No_type);Type(ID00216) == Cst(No_type,No_type);Type(ID00215) == Cst(No_type,No_type);Type(ID00214) == Cst(No_type,No_type);Type(ID00213) == Cst(No_type,No_type);Type(ID00212) == Cst(No_type,No_type);Type(ID00211) == Cst(No_type,No_type);Type(ID00210) == Cst(No_type,No_type);Type(ID00209) == Cst(No_type,No_type);Type(ID00208) == Cst(No_type,No_type);Type(ID00207) == Cst(No_type,No_type);Type(ID00206) == Cst(No_type,No_type);Type(ID00205) == Cst(No_type,No_type);Type(ID00204) == Cst(No_type,No_type);Type(ID00203) == Cst(No_type,No_type);Type(ID00202) == Cst(No_type,No_type);Type(ID00201) == Cst(No_type,No_type);Type(ID00200) == Cst(No_type,No_type);Type(ID00199) == Cst(No_type,No_type);Type(ID00198) == Cst(No_type,No_type);Type(ID00197) == Cst(No_type,No_type);Type(ID00196) == Cst(No_type,No_type);Type(ID00195) == Cst(No_type,No_type);Type(ID00194) == Cst(No_type,No_type);Type(ID00193) == Cst(No_type,No_type);Type(ID00192) == Cst(No_type,No_type);Type(ID00191) == Cst(No_type,No_type);Type(ID00190) == Cst(No_type,No_type);Type(ID00189) == Cst(No_type,No_type);Type(ID00188) == Cst(No_type,No_type);Type(ID00187) == Cst(No_type,No_type);Type(ID00186) == Cst(No_type,No_type);Type(ID00185) == Cst(No_type,No_type);Type(ID00184) == Cst(No_type,No_type);Type(ID00183) == Cst(No_type,No_type);Type(ID00182) == Cst(No_type,No_type);Type(ID00181) == Cst(No_type,No_type);Type(ID00180) == Cst(No_type,No_type);Type(ID00179) == Cst(No_type,No_type);Type(ID00178) == Cst(No_type,No_type);Type(ID00177) == Cst(No_type,No_type);Type(ID00176) == Cst(No_type,No_type);Type(ID00175) == Cst(No_type,No_type);Type(ID00174) == Cst(No_type,No_type);Type(ID00173) == Cst(No_type,No_type);Type(ID00172) == Cst(No_type,No_type);Type(ID00171) == Cst(No_type,No_type);Type(ID00170) == Cst(No_type,No_type);Type(ID00169) == Cst(No_type,No_type);Type(ID00168) == Cst(No_type,No_type);Type(ID00167) == Cst(No_type,No_type);Type(ID00166) == Cst(No_type,No_type);Type(ID00165) == Cst(No_type,No_type);Type(ID00164) == Cst(No_type,No_type);Type(ID00163) == Cst(No_type,No_type);Type(ID00162) == Cst(No_type,No_type);Type(ID00161) == Cst(No_type,No_type);Type(ID00160) == Cst(No_type,No_type);Type(ID00159) == Cst(No_type,No_type);Type(ID00158) == Cst(No_type,No_type);Type(ID00157) == Cst(No_type,No_type);Type(ID00156) == Cst(No_type,No_type);Type(ID00155) == Cst(No_type,No_type);Type(ID00154) == Cst(No_type,No_type);Type(ID00153) == Cst(No_type,No_type);Type(ID00152) == Cst(No_type,No_type);Type(ID00151) == Cst(No_type,No_type);Type(ID00150) == Cst(No_type,No_type);Type(ID00149) == Cst(No_type,No_type);Type(ID00148) == Cst(No_type,No_type);Type(ID00147) == Cst(No_type,No_type);Type(ID00146) == Cst(No_type,No_type);Type(ID00145) == Cst(No_type,No_type);Type(ID00144) == Cst(No_type,No_type);Type(ID00143) == Cst(No_type,No_type);Type(ID00142) == Cst(No_type,No_type);Type(ID00141) == Cst(No_type,No_type);Type(ID00140) == Cst(No_type,No_type);Type(ID00139) == Cst(No_type,No_type);Type(ID00138) == Cst(No_type,No_type);Type(ID00137) == Cst(No_type,No_type);Type(ID00136) == Cst(No_type,No_type);Type(ID00135) == Cst(No_type,No_type);Type(ID00134) == Cst(No_type,No_type);Type(ID00133) == Cst(No_type,No_type);Type(ID00132) == Cst(No_type,No_type);Type(ID00131) == Cst(No_type,No_type);Type(ID00130) == Cst(No_type,No_type);Type(ID00129) == Cst(No_type,No_type);Type(ID00128) == Cst(No_type,No_type);Type(ID00127) == Cst(No_type,No_type);Type(ID00126) == Cst(No_type,No_type);Type(ID00125) == Cst(No_type,No_type);Type(ID00124) == Cst(No_type,No_type);Type(ID00123) == Cst(No_type,No_type);Type(ID00122) == Cst(No_type,No_type);Type(ID00121) == Cst(No_type,No_type);Type(ID00120) == Cst(No_type,No_type);Type(ID00119) == Cst(No_type,No_type);Type(ID00118) == Cst(No_type,No_type);Type(ID00117) == Cst(No_type,No_type);Type(ID00116) == Cst(No_type,No_type);Type(ID00115) == Cst(No_type,No_type);Type(ID00114) == Cst(No_type,No_type);Type(ID00113) == Cst(No_type,No_type);Type(ID00112) == Cst(No_type,No_type);Type(ID00111) == Cst(No_type,No_type);Type(ID00110) == Cst(No_type,No_type);Type(ID00109) == Cst(No_type,No_type);Type(ID00108) == Cst(No_type,No_type);Type(ID00107) == Cst(No_type,No_type);Type(ID00106) == Cst(No_type,No_type);Type(ID00105) == Cst(No_type,No_type);Type(ID00104) == Cst(No_type,No_type);Type(ID00103) == Cst(No_type,No_type);Type(ID00102) == Cst(No_type,No_type);Type(ID00101) == Cst(No_type,No_type);Type(ID00100) == Cst(No_type,No_type);Type(ID00099) == Cst(No_type,No_type);Type(ID00098) == Cst(No_type,No_type);Type(ID00097) == Cst(No_type,No_type);Type(ID00096) == Cst(No_type,No_type);Type(ID00095) == Cst(No_type,No_type);Type(ID00094) == Cst(No_type,No_type);Type(ID00093) == Cst(No_type,No_type);Type(ID00092) == Cst(No_type,No_type);Type(ID00091) == Cst(No_type,No_type);Type(ID00090) == Cst(No_type,No_type);Type(ID00089) == Cst(No_type,No_type);Type(ID00088) == Cst(No_type,No_type);Type(ID00087) == Cst(No_type,No_type);Type(ID00086) == Cst(No_type,No_type);Type(ID00085) == Cst(No_type,No_type);Type(ID00084) == Cst(No_type,No_type);Type(ID00083) == Cst(No_type,No_type);Type(ID00082) == Cst(No_type,No_type);Type(ID00081) == Cst(No_type,No_type);Type(ID00080) == Cst(No_type,No_type);Type(ID00079) == Cst(No_type,No_type);Type(ID00078) == Cst(No_type,No_type);Type(ID00077) == Cst(No_type,No_type);Type(ID00076) == Cst(No_type,No_type);Type(ID00075) == Cst(No_type,No_type);Type(ID00074) == Cst(No_type,No_type);Type(ID00073) == Cst(No_type,No_type);Type(ID00072) == Cst(No_type,No_type);Type(ID00071) == Cst(No_type,No_type);Type(ID00070) == Cst(No_type,No_type);Type(ID00069) == Cst(No_type,No_type);Type(ID00068) == Cst(No_type,No_type);Type(ID00067) == Cst(No_type,No_type);Type(ID00066) == Cst(No_type,No_type);Type(ID00065) == Cst(No_type,No_type);Type(ID00064) == Cst(No_type,No_type);Type(ID00063) == Cst(No_type,No_type);Type(ID00062) == Cst(No_type,No_type);Type(ID00061) == Cst(No_type,No_type);Type(ID00060) == Cst(No_type,No_type);Type(ID00059) == Cst(No_type,No_type);Type(ID00058) == Cst(No_type,No_type);Type(ID00057) == Cst(No_type,No_type);Type(ID00056) == Cst(No_type,No_type);Type(ID00055) == Cst(No_type,No_type);Type(ID00054) == Cst(No_type,No_type);Type(ID00053) == Cst(No_type,No_type);Type(ID00052) == Cst(No_type,No_type);Type(ID00051) == Cst(No_type,No_type);Type(ID00050) == Cst(No_type,No_type);Type(ID00049) == Cst(No_type,No_type);Type(ID00048) == Cst(No_type,No_type);Type(ID00047) == Cst(No_type,No_type);Type(ID00046) == Cst(No_type,No_type);Type(ID00045) == Cst(No_type,No_type);Type(ID00044) == Cst(No_type,No_type);Type(ID00043) == Cst(No_type,No_type);Type(ID00042) == Cst(No_type,No_type);Type(ID00041) == Cst(No_type,No_type);Type(ID00040) == Cst(No_type,No_type);Type(ID00039) == Cst(No_type,No_type);Type(ID00038) == Cst(No_type,No_type);Type(ID00037) == Cst(No_type,No_type);Type(ID00036) == Cst(No_type,No_type);Type(ID00035) == Cst(No_type,No_type);Type(ID00034) == Cst(No_type,No_type);Type(ID00033) == Cst(No_type,No_type);Type(ID00032) == Cst(No_type,No_type);Type(ID00031) == Cst(No_type,No_type);Type(ID00030) == Cst(No_type,No_type);Type(ID00029) == Cst(No_type,No_type);Type(ID00028) == Cst(No_type,No_type);Type(ID00027) == Cst(No_type,No_type);Type(ID00026) == Cst(No_type,No_type);Type(ID00025) == Cst(No_type,No_type);Type(ID00024) == Cst(No_type,No_type);Type(ID00023) == Cst(No_type,No_type);Type(ID00022) == Cst(No_type,No_type);Type(ID00021) == Cst(No_type,No_type);Type(ID00020) == Cst(No_type,No_type);Type(ID00019) == Cst(No_type,No_type);Type(ID00018) == Cst(No_type,No_type);Type(ID00017) == Cst(No_type,No_type);Type(ID00016) == Cst(No_type,No_type);Type(ID00015) == Cst(No_type,No_type);Type(ID00014) == Cst(No_type,No_type);Type(ID00013) == Cst(No_type,No_type);Type(ID00012) == Cst(No_type,No_type);Type(ID00011) == Cst(No_type,No_type);Type(ID00010) == Cst(No_type,No_type);Type(ID00009) == Cst(No_type,No_type);Type(ID00008) == Cst(No_type,No_type);Type(ID00007) == Cst(No_type,No_type);Type(ID00006) == Cst(No_type,No_type);Type(ID00005) == Cst(No_type,No_type);Type(ID00004) == Cst(No_type,No_type);Type(ID00003) == Cst(No_type,No_type);Type(ID00002) == Cst(No_type,No_type);Type(ID00001) == Cst(No_type,No_type);Type(ID00000) == Cst(No_type,No_type))
END
&
THEORY ListVisibleStaticX END
&
THEORY ListOfIdsX IS
  List_Of_Ids(Implementation(COMP_3seq1_OPS_IMP)) == (const1 | ? | ? | ? | ID00000,ID00001,ID00002,ID00003,ID00004,ID00005,ID00006,ID00007,ID00008,ID00009,ID00010,ID00011,ID00012,ID00013,ID00014,ID00015,ID00016,ID00017,ID00018,ID00019,ID00020,ID00021,ID00022,ID00023,ID00024,ID00025,ID00026,ID00027,ID00028,ID00029,ID00030,ID00031,ID00032,ID00033,ID00034,ID00035,ID00036,ID00037,ID00038,ID00039,ID00040,ID00041,ID00042,ID00043,ID00044,ID00045,ID00046,ID00047,ID00048,ID00049,ID00050,ID00051,ID00052,ID00053,ID00054,ID00055,ID00056,ID00057,ID00058,ID00059,ID00060,ID00061,ID00062,ID00063,ID00064,ID00065,ID00066,ID00067,ID00068,ID00069,ID00070,ID00071,ID00072,ID00073,ID00074,ID00075,ID00076,ID00077,ID00078,ID00079,ID00080,ID00081,ID00082,ID00083,ID00084,ID00085,ID00086,ID00087,ID00088,ID00089,ID00090,ID00091,ID00092,ID00093,ID00094,ID00095,ID00096,ID00097,ID00098,ID00099,ID00100,ID00101,ID00102,ID00103,ID00104,ID00105,ID00106,ID00107,ID00108,ID00109,ID00110,ID00111,ID00112,ID00113,ID00114,ID00115,ID00116,ID00117,ID00118,ID00119,ID00120,ID00121,ID00122,ID00123,ID00124,ID00125,ID00126,ID00127,ID00128,ID00129,ID00130,ID00131,ID00132,ID00133,ID00134,ID00135,ID00136,ID00137,ID00138,ID00139,ID00140,ID00141,ID00142,ID00143,ID00144,ID00145,ID00146,ID00147,ID00148,ID00149,ID00150,ID00151,ID00152,ID00153,ID00154,ID00155,ID00156,ID00157,ID00158,ID00159,ID00160,ID00161,ID00162,ID00163,ID00164,ID00165,ID00166,ID00167,ID00168,ID00169,ID00170,ID00171,ID00172,ID00173,ID00174,ID00175,ID00176,ID00177,ID00178,ID00179,ID00180,ID00181,ID00182,ID00183,ID00184,ID00185,ID00186,ID00187,ID00188,ID00189,ID00190,ID00191,ID00192,ID00193,ID00194,ID00195,ID00196,ID00197,ID00198,ID00199,ID00200,ID00201,ID00202,ID00203,ID00204,ID00205,ID00206,ID00207,ID00208,ID00209,ID00210,ID00211,ID00212,ID00213,ID00214,ID00215,ID00216,ID00217,ID00218,ID00219,ID00220,ID00221,ID00222,ID00223,ID00224,ID00225,ID00226,ID00227,ID00228,ID00229,ID00230,ID00231,ID00232,ID00233,ID00234,ID00235,ID00236,ID00237,ID00238,ID00239,ID00240,ID00241,ID00242,ID00243,ID00244,ID00245,ID00246,ID00247,ID00248,ID00249,ID00250,ID00251,ID00252,ID00253,ID00254,ID00255,ID00256,ID00257,ID00258,ID00259,ID00260,ID00261,ID00262,ID00263,ID00264,ID00265,ID00266,ID00267,ID00268,ID00269,ID00270,ID00271,ID00272,ID00273,ID00274,ID00275,ID00276,ID00277,ID00278,ID00279,ID00280,ID00281,ID00282,ID00283,ID00284,ID00285,ID00286,ID00287,ID00288,ID00289,ID00290,ID00291,ID00292,ID00293,ID00294,ID00295,ID00296,ID00297,ID00298,ID00299,ID00300,ID00301,ID00302,ID00303,ID00304,ID00305,ID00306,ID00307,ID00308,ID00309,ID00310,ID00311,ID00312,ID00313,ID00314,ID00315,ID00316,ID00317,ID00318,ID00319,ID00320,ID00321,ID00322,ID00323,ID00324,ID00325,ID00326,ID00327,ID00328,ID00329,ID00330,ID00331,ID00332,ID00333,ID00334,ID00335,ID00336,ID00337,ID00338,ID00339,ID00340,ID00341,ID00342,ID00343,ID00344,ID00345,ID00346,ID00347,ID00348,ID00349,ID00350,ID00351,ID00352,ID00353,ID00354,ID00355,ID00356,ID00357,ID00358,ID00359,ID00360,ID00361,ID00362,ID00363,ID00364,ID00365,ID00366,ID00367,ID00368,ID00369,ID00370,ID00371,ID00372,ID00373,ID00374,ID00375,ID00376,ID00377,ID00378,ID00379,ID00380,ID00381,ID00382,ID00383,ID00384,ID00385,ID00386,ID00387,ID00388,ID00389,ID00390,ID00391,ID00392,ID00393,ID00394,ID00395,ID00396,ID00397,ID00398,ID00399,ID00400,ID00401,ID00402,ID00403,ID00404,ID00405,ID00406,ID00407,ID00408,ID00409,ID00410,ID00411,ID00412,ID00413,ID00414,ID00415,ID00416,ID00417,ID00418,ID00419,ID00420,ID00421,ID00422,ID00423,ID00424,ID00425,ID00426,ID00427,ID00428,ID00429,ID00430,ID00431,ID00432,ID00433,ID00434,ID00435,ID00436,ID00437,ID00438,ID00439,ID00440,ID00441,ID00442,ID00443,ID00444,ID00445,ID00446,ID00447,ID00448,ID00449,ID00450,ID00451,ID00452,ID00453,ID00454,ID00455,ID00456,ID00457,ID00458,ID00459,ID00460,ID00461,ID00462,ID00463,ID00464,ID00465,ID00466,ID00467,ID00468,ID00469,ID00470,ID00471,ID00472,ID00473,ID00474,ID00475,ID00476,ID00477,ID00478,ID00479,ID00480,ID00481,ID00482,ID00483,ID00484,ID00485,ID00486,ID00487,ID00488,ID00489,ID00490,ID00491,ID00492,ID00493,ID00494,ID00495,ID00496,ID00497,ID00498,ID00499,ID00500,ID00501,ID00502,ID00503,ID00504,ID00505,ID00506,ID00507,ID00508,ID00509,ID00510,ID00511,ID00512,ID00513,ID00514,ID00515,ID00516,ID00517,ID00518,ID00519,ID00520,ID00521,ID00522,ID00523,ID00524,ID00525,ID00526,ID00527,ID00528,ID00529,ID00530,ID00531,ID00532,ID00533,ID00534,ID00535,ID00536,ID00537,ID00538,ID00539,ID00540,ID00541,ID00542,ID00543,ID00544,ID00545,ID00546,ID00547,ID00548,ID00549,ID00550,ID00551,ID00552,ID00553,ID00554,ID00555,ID00556,ID00557,ID00558,ID00559,ID00560,ID00561,ID00562,ID00563,ID00564,ID00565,ID00566,ID00567,ID00568,ID00569,ID00570,ID00571,ID00572,ID00573,ID00574,ID00575,ID00576,ID00577,ID00578,ID00579,ID00580,ID00581,ID00582,ID00583,ID00584,ID00585,ID00586,ID00587,ID00588,ID00589,ID00590,ID00591,ID00592,ID00593,ID00594,ID00595,ID00596,ID00597,ID00598,ID00599,ID00600,ID00601,ID00602,ID00603,ID00604,ID00605,ID00606,ID00607,ID00608,ID00609,ID00610,ID00611,ID00612,ID00613,ID00614,ID00615,ID00616,ID00617,ID00618,ID00619,ID00620,ID00621,ID00622,ID00623,ID00624,ID00625,ID00626,ID00627,ID00628,ID00629,ID00630,ID00631,ID00632,ID00633,ID00634,ID00635,ID00636,ID00637,ID00638,ID00639,ID00640,ID00641,ID00642,ID00643,ID00644,ID00645,ID00646,ID00647,ID00648,ID00649,ID00650,ID00651,ID00652,ID00653,ID00654,ID00655,ID00656,ID00657,ID00658,ID00659,ID00660,ID00661,ID00662,ID00663,ID00664,ID00665,ID00666,ID00667,ID00668,ID00669,ID00670,ID00671,ID00672,ID00673,ID00674,ID00675,ID00676,ID00677,ID00678,ID00679,ID00680,ID00681,ID00682,ID00683,ID00684,ID00685,ID00686,ID00687,ID00688,ID00689,ID00690,ID00691,ID00692,ID00693,ID00694,ID00695,ID00696,ID00697,ID00698,ID00699,ID00700,ID00701,ID00702,ID00703,ID00704,ID00705,ID00706,ID00707,ID00708,ID00709,ID00710,ID00711,ID00712,ID00713,ID00714,ID00715,ID00716,ID00717,ID00718,ID00719,ID00720,ID00721,ID00722,ID00723,ID00724,ID00725,ID00726,ID00727,ID00728,ID00729,ID00730,ID00731,ID00732,ID00733,ID00734,ID00735,ID00736,ID00737,ID00738,ID00739,ID00740,ID00741,ID00742,ID00743,ID00744,ID00745,ID00746,ID00747,ID00748,ID00749,ID00750,ID00751,ID00752,ID00753,ID00754,ID00755,ID00756,ID00757,ID00758,ID00759,ID00760,ID00761,ID00762,ID00763,ID00764,ID00765,ID00766,ID00767,ID00768,ID00769,ID00770,ID00771,ID00772,ID00773,ID00774,ID00775,ID00776,ID00777,ID00778,ID00779,ID00780,ID00781,ID00782,ID00783,ID00784,ID00785,ID00786,ID00787,ID00788,ID00789,ID00790,ID00791,ID00792,ID00793,ID00794,ID00795,ID00796,ID00797,ID00798,ID00799,ID00800,ID00801,ID00802,ID00803,ID00804,ID00805,ID00806,ID00807,ID00808,ID00809,ID00810,ID00811,ID00812,ID00813,ID00814,ID00815,ID00816,ID00817,ID00818,ID00819,ID00820,ID00821,ID00822,ID00823,ID00824,ID00825,ID00826,ID00827,ID00828,ID00829,ID00830,ID00831,ID00832,ID00833,ID00834,ID00835,ID00836,ID00837,ID00838,ID00839,ID00840,ID00841,ID00842,ID00843,ID00844,ID00845,ID00846,ID00847,ID00848,ID00849,ID00850,ID00851,ID00852,ID00853,ID00854,ID00855,ID00856,ID00857,ID00858,ID00859,ID00860,ID00861,ID00862,ID00863,ID00864,ID00865,ID00866,ID00867,ID00868,ID00869,ID00870,ID00871,ID00872,ID00873,ID00874,ID00875,ID00876,ID00877,ID00878,ID00879,ID00880,ID00881,ID00882,ID00883,ID00884,ID00885,ID00886,ID00887,ID00888,ID00889,ID00890,ID00891,ID00892,ID00893,ID00894,ID00895,ID00896,ID00897,ID00898,ID00899,ID00900,ID00901,ID00902,ID00903,ID00904,ID00905,ID00906,ID00907,ID00908,ID00909,ID00910,ID00911,ID00912,ID00913,ID00914,ID00915,ID00916,ID00917,ID00918,ID00919,ID00920,ID00921,ID00922,ID00923,ID00924,ID00925,ID00926,ID00927,ID00928,ID00929,ID00930,ID00931,ID00932,ID00933,ID00934,ID00935,ID00936,ID00937,ID00938,ID00939,ID00940,ID00941,ID00942,ID00943,ID00944,ID00945,ID00946,ID00947,ID00948,ID00949,ID00950,ID00951,ID00952,ID00953,ID00954,ID00955,ID00956,ID00957,ID00958,ID00959,ID00960,ID00961,ID00962,ID00963,ID00964,ID00965,ID00966,ID00967,ID00968,ID00969,ID00970,ID00971,ID00972,ID00973,ID00974,ID00975,ID00976,ID00977,ID00978,ID00979,ID00980,ID00981,ID00982,ID00983,ID00984,ID00985,ID00986,ID00987,ID00988,ID00989,ID00990,ID00991,ID00992,ID00993,ID00994,ID00995,ID00996,ID00997,ID00998,ID00999 | ? | imported(Machine(COMPIMP)) | ? | COMP_3seq1_OPS_IMP);
  List_Of_HiddenCst_Ids(Implementation(COMP_3seq1_OPS_IMP)) == (? | ?);
  List_Of_VisibleCst_Ids(Implementation(COMP_3seq1_OPS_IMP)) == (const1);
  List_Of_VisibleVar_Ids(Implementation(COMP_3seq1_OPS_IMP)) == (check_OPER_CALL,check_WHILE,check_SEQUENCE,check_CASE,check_IF,check_BECOME,check_BLOCK,check_boolexp,cond1,max_counter,counter | ?);
  List_Of_Ids_SeenBNU(Implementation(COMP_3seq1_OPS_IMP)) == (?: ?);
  List_Of_Ids(Machine(COMPIMP)) == (? | ? | ? | ? | do_int | ? | ? | ? | COMPIMP);
  List_Of_HiddenCst_Ids(Machine(COMPIMP)) == (? | ?);
  List_Of_VisibleCst_Ids(Machine(COMPIMP)) == (?);
  List_Of_VisibleVar_Ids(Machine(COMPIMP)) == (? | ?);
  List_Of_Ids_SeenBNU(Machine(COMPIMP)) == (?: ?)
END
&
THEORY ConstantsEnvX IS
  Constants(Implementation(COMP_3seq1_OPS_IMP)) == (Type(const1) == Cst(btype(INTEGER,?,?)))
END
&
THEORY VisibleVariablesEnvX IS
  VisibleVariables(Implementation(COMP_3seq1_OPS_IMP)) == (Type(check_OPER_CALL) == Mvv(btype(INTEGER,?,?));Type(check_WHILE) == Mvv(btype(INTEGER,?,?));Type(check_SEQUENCE) == Mvv(btype(INTEGER,?,?));Type(check_CASE) == Mvv(btype(INTEGER,?,?));Type(check_IF) == Mvv(btype(INTEGER,?,?));Type(check_BECOME) == Mvv(btype(INTEGER,?,?));Type(check_BLOCK) == Mvv(btype(INTEGER,?,?));Type(check_boolexp) == Mvv(btype(BOOL,?,?));Type(cond1) == Mvv(btype(BOOL,?,?));Type(max_counter) == Mvv(btype(INTEGER,?,?));Type(counter) == Mvv(btype(INTEGER,?,?)))
END
&
THEORY TCIntRdX IS
  predB0 == OK;
  extended_sees == KO;
  B0check_tab == KO;
  local_op == OK;
  abstract_constants_visible_in_values == KO;
  project_type == SOFTWARE_TYPE;
  event_b_deadlockfreeness == KO;
  variant_clause_mandatory == KO;
  event_b_coverage == KO;
  event_b_exclusivity == KO;
  genFeasibilityPO == KO
END
&
THEORY ListLocalOperationsX IS
  List_Local_Operations(Implementation(COMP_3seq1_OPS_IMP))==(?)
END
&
THEORY ListLocalInputX END
&
THEORY ListLocalOutputX END
&
THEORY ListLocalHeaderX END
&
THEORY ListLocalPreconditionX END
&
THEORY ListLocalSubstitutionX END
&
THEORY TypingPredicateX IS
  TypingPredicate(Implementation(COMP_3seq1_OPS_IMP))==(counter: INTEGER & max_counter: INTEGER & cond1: BOOL & check_boolexp: BOOL & check_BLOCK: INTEGER & check_BECOME: INTEGER & check_IF: INTEGER & check_CASE: INTEGER & check_SEQUENCE: INTEGER & check_WHILE: INTEGER & check_OPER_CALL: INTEGER)
END
&
THEORY ImportedVariablesListX IS
  ImportedVariablesList(Implementation(COMP_3seq1_OPS_IMP),Machine(COMPIMP))==(?);
  ImportedVisVariablesList(Implementation(COMP_3seq1_OPS_IMP),Machine(COMPIMP))==(?)
END
&
THEORY ListLocalOpInvariantX END
)
