IMPLEMENTATION
  COMP_2seq10_OPS_IMP
REFINES
  COMP_2seq10_OPS
CONCRETE_VARIABLES
  check_BECOME , check_BLOCK , check_CASE , check_IF , check_OPER_CALL , check_SEQUENCE , check_WHILE , check_boolexp , cond1 , counter , max_counter
INVARIANT
  check_BECOME : INT &
  check_BLOCK : INT &
  check_CASE : INT &
  check_IF : INT &
  check_OPER_CALL : INT &
  check_SEQUENCE : INT &
  check_WHILE : INT &
  check_boolexp : BOOL &
  cond1 : BOOL &
  counter : INT &
  max_counter : INT
INITIALISATION counter := 1 ; max_counter := 1024 ; cond1 := TRUE ; check_boolexp := TRUE ; check_BLOCK := 0 ; check_BECOME := 0 ; check_IF := 0 ; check_CASE := 0 ; check_SEQUENCE := 0 ; check_WHILE := 0 ; check_OPER_CALL := 0
OPERATIONS
    ID00000 =
    BEGIN
        /*Comb Block1*/
        WHILE counter > max_counter &  check_WHILE < 1000
        DO  check_boolexp := bool ( counter = 0 ) ;
            check_WHILE := check_WHILE + 1
        INVARIANT counter : NAT & max_counter : NAT & cond1 : BOOL & check_boolexp : BOOL & check_BLOCK : INT & check_BECOME : INT & check_IF : INT & check_CASE : INT & check_SEQUENCE : INT & check_WHILE : INT & check_OPER_CALL : INT
        VARIANT ( 100000 - check_WHILE ) END
        ;
        /*Comb inv Block2*/
        check_boolexp := bool ( counter = 0 ) ;
        IF counter = 0 THEN
            check_IF := check_IF + 1
        ELSIF counter = 0 THEN
            check_IF := check_IF + 3
        ELSE check_IF := check_IF + 10  END

        ;
        /* Block 3*/
        CASE counter OF EITHER 0 THEN check_CASE := check_CASE + 1 ; check_boolexp := bool ( counter = 0 ) OR 1 THEN check_CASE := check_CASE + 3 ; check_WHILE := 0 ;
                WHILE check_WHILE < counter DO
                    check_WHILE := check_WHILE + 1
                INVARIANT counter : NAT & max_counter : NAT & cond1 : BOOL & check_boolexp : BOOL & check_BLOCK : INT & check_BECOME : INT & check_IF : INT & check_CASE : INT & check_SEQUENCE : INT & check_WHILE : INT & check_OPER_CALL : INT
                VARIANT ( 1000 - check_WHILE ) END
            ELSE  check_WHILE := 0 ;
                WHILE check_WHILE < counter DO
                    check_WHILE := check_WHILE + 1
                INVARIANT counter : NAT & max_counter : NAT & cond1 : BOOL & check_boolexp : BOOL & check_BLOCK : INT & check_BECOME : INT & check_IF : INT & check_CASE : INT & check_SEQUENCE : INT & check_WHILE : INT & check_OPER_CALL : INT
                VARIANT ( 1000 - check_WHILE ) END
            END END
        ;
        /* Block 4*/
        WHILE counter > max_counter &  check_WHILE < 1000 DO check_boolexp := bool ( counter = 0 ) ; check_WHILE := check_WHILE + 1 INVARIANT counter : NAT & max_counter : NAT & cond1 : BOOL & check_boolexp : BOOL & check_BLOCK : INT & check_BECOME : INT & check_IF : INT & check_CASE : INT & check_SEQUENCE : INT & check_WHILE : INT & check_OPER_CALL : INT VARIANT ( 100000 - check_WHILE ) END
        ;
        /* Block 5*/
        WHILE counter > max_counter &  check_WHILE < 1000 DO check_boolexp := bool ( counter = 0 ) ; check_WHILE := check_WHILE + 1 INVARIANT counter : NAT & max_counter : NAT & cond1 : BOOL & check_boolexp : BOOL & check_BLOCK : INT & check_BECOME : INT & check_IF : INT & check_CASE : INT & check_SEQUENCE : INT & check_WHILE : INT & check_OPER_CALL : INT VARIANT ( 100000 - check_WHILE ) END
        ;
        /* Block 6*/

        BEGIN  check_boolexp := bool ( counter = 0 ) END ; IF counter > max_counter THEN check_BECOME := check_BECOME + 1
        ELSIF counter > max_counter THEN  check_BECOME := check_BECOME + 1
        ELSE  check_BECOME := check_BECOME + 1
        END
        ;
        /* Block 7*/
        WHILE counter > max_counter &  check_WHILE < 1000 DO check_boolexp := bool ( counter = 0 ) ; check_WHILE := check_WHILE + 1 INVARIANT counter : NAT & max_counter : NAT & cond1 : BOOL & check_boolexp : BOOL & check_BLOCK : INT & check_BECOME : INT & check_IF : INT & check_CASE : INT & check_SEQUENCE : INT & check_WHILE : INT & check_OPER_CALL : INT VARIANT ( 100000 - check_WHILE ) END
        ;
        /* Block 8*/
        WHILE counter > max_counter &  check_WHILE < 1000 DO check_boolexp := bool ( counter = 0 ) ; check_WHILE := check_WHILE + 1 INVARIANT counter : NAT & max_counter : NAT & cond1 : BOOL & check_boolexp : BOOL & check_BLOCK : INT & check_BECOME : INT & check_IF : INT & check_CASE : INT & check_SEQUENCE : INT & check_WHILE : INT & check_OPER_CALL : INT VARIANT ( 100000 - check_WHILE ) END
        ;
        /* Block 9*/
        check_boolexp := bool ( counter = 0 ) ;  BEGIN
            check_BLOCK := check_BLOCK + 1
        END

        ;
        /* Block 10*/
        check_boolexp := bool ( counter = 0 ) ;  IF counter = 0 THEN
            check_IF := check_IF + 1
        ELSIF counter = 0 THEN
            check_IF := check_IF + 3
        ELSE check_IF := check_IF + 10 END

        ;
        counter := ( counter + 1 )
    END ;

    ID00001 =
    BEGIN
        /*Comb Block1*/

        BEGIN  check_boolexp := bool ( counter = 0 ) END ; IF counter > max_counter THEN check_BECOME := check_BECOME + 1
        ELSIF counter > max_counter THEN  check_BECOME := check_BECOME + 1
        ELSE  check_BECOME := check_BECOME + 1
        END
        ;
        /*Comb inv Block2*/
        CASE counter OF EITHER 0 THEN check_CASE := check_CASE + 1 ; check_boolexp := bool ( counter = 0 ) OR 1 THEN check_CASE := check_CASE + 3 ; CASE check_CASE
                OF EITHER 0 THEN
                        check_CASE := check_CASE + 1
                    ELSE check_CASE := check_CASE + 3
                    END
                END ELSE  CASE check_CASE
                OF EITHER 0 THEN
                        check_CASE := check_CASE + 1
                    ELSE check_CASE := check_CASE + 3
                    END
                END END END
        ;
        /* Block 3*/

        BEGIN  check_boolexp := bool ( counter = 0 ) END ; IF counter > max_counter THEN check_BECOME := check_BECOME + 1
        ELSIF counter > max_counter THEN  check_BECOME := check_BECOME + 1
        ELSE  check_BECOME := check_BECOME + 1
        END
        ;
        /* Block 4*/
        CASE counter OF EITHER 0 THEN check_CASE := check_CASE + 1 ; check_boolexp := bool ( counter = 0 ) OR 1 THEN check_CASE := check_CASE + 3 ; BEGIN
                    check_BLOCK := check_BLOCK + 1
                END
            ELSE  BEGIN
                    check_BLOCK := check_BLOCK + 1
                END
            END END
        ;
        /* Block 5*/

        BEGIN  check_boolexp := bool ( counter = 0 ) END ; IF counter > max_counter THEN check_WHILE := 0 ;
            WHILE check_WHILE < counter DO
                check_WHILE := check_WHILE + 1
            INVARIANT counter : NAT & max_counter : NAT & cond1 : BOOL & check_boolexp : BOOL & check_BLOCK : INT & check_BECOME : INT & check_IF : INT & check_CASE : INT & check_SEQUENCE : INT & check_WHILE : INT & check_OPER_CALL : INT
            VARIANT ( 1000 - check_WHILE ) END
        ELSIF counter > max_counter THEN  check_WHILE := 0 ;
            WHILE check_WHILE < counter DO
                check_WHILE := check_WHILE + 1
            INVARIANT counter : NAT & max_counter : NAT & cond1 : BOOL & check_boolexp : BOOL & check_BLOCK : INT & check_BECOME : INT & check_IF : INT & check_CASE : INT & check_SEQUENCE : INT & check_WHILE : INT & check_OPER_CALL : INT
            VARIANT ( 1000 - check_WHILE ) END
        ELSE  check_WHILE := 0 ;
            WHILE check_WHILE < counter DO
                check_WHILE := check_WHILE + 1
            INVARIANT counter : NAT & max_counter : NAT & cond1 : BOOL & check_boolexp : BOOL & check_BLOCK : INT & check_BECOME : INT & check_IF : INT & check_CASE : INT & check_SEQUENCE : INT & check_WHILE : INT & check_OPER_CALL : INT
            VARIANT ( 1000 - check_WHILE ) END
        END
        ;
        /* Block 6*/

        BEGIN  check_boolexp := bool ( counter = 0 ) END ; IF counter > max_counter THEN IF counter = 0 THEN
                check_IF := check_IF + 1
            ELSIF counter = 0 THEN
                check_IF := check_IF + 3
            ELSE check_IF := check_IF + 10 END
        ELSIF counter > max_counter THEN  IF counter = 0 THEN
                check_IF := check_IF + 1
            ELSIF counter = 0 THEN
                check_IF := check_IF + 3
            ELSE check_IF := check_IF + 10 END
        ELSE  IF counter = 0 THEN
                check_IF := check_IF + 1
            ELSIF counter = 0 THEN
                check_IF := check_IF + 3
            ELSE check_IF := check_IF + 10 END
        END
        ;
        /* Block 7*/
        WHILE counter > max_counter &  check_WHILE < 1000 DO check_boolexp := bool ( counter = 0 ) ; check_WHILE := check_WHILE + 1 INVARIANT counter : NAT & max_counter : NAT & cond1 : BOOL & check_boolexp : BOOL & check_BLOCK : INT & check_BECOME : INT & check_IF : INT & check_CASE : INT & check_SEQUENCE : INT & check_WHILE : INT & check_OPER_CALL : INT VARIANT ( 100000 - check_WHILE ) END
        ;
        /* Block 8*/
        WHILE counter > max_counter &  check_WHILE < 1000 DO check_boolexp := bool ( counter = 0 ) ; check_WHILE := check_WHILE + 1 INVARIANT counter : NAT & max_counter : NAT & cond1 : BOOL & check_boolexp : BOOL & check_BLOCK : INT & check_BECOME : INT & check_IF : INT & check_CASE : INT & check_SEQUENCE : INT & check_WHILE : INT & check_OPER_CALL : INT VARIANT ( 100000 - check_WHILE ) END
        ;
        /* Block 9*/
        check_boolexp := bool ( counter = 0 ) ;  check_boolexp := bool ( counter = 0 )
        ;
        /* Block 10*/

        BEGIN  check_boolexp := bool ( counter = 0 ) END ; IF counter > max_counter THEN check_SEQUENCE := counter + 1 ;
            cond1 := bool ( counter = 0 )
        ELSIF counter > max_counter THEN  check_SEQUENCE := counter + 1 ;
            cond1 := bool ( counter = 0 )
        ELSE  check_SEQUENCE := counter + 1 ;
            cond1 := bool ( counter = 0 )
        END
        ;
        counter := ( counter + 1 )
    END ;

    ID00002 =
    BEGIN
        /*Comb Block1*/
        CASE counter OF
            EITHER 0 THEN
                check_CASE := check_CASE + 1 ; check_boolexp := bool ( counter = 0 )
            OR 1 THEN
                check_CASE := check_CASE + 3 ;
                CASE check_CASE OF
                    EITHER 0 THEN
                        check_CASE := check_CASE + 1
                    ELSE
                        check_CASE := check_CASE + 3
                    END
                END
            ELSE
                CASE check_CASE OF
                    EITHER 0 THEN
                        check_CASE := check_CASE + 1
                    ELSE
                        check_CASE := check_CASE + 3
                    END
                END
            END
        END ;
        /*Comb inv Block2*/

        BEGIN  check_boolexp := bool ( counter = 0 ) END ;
        IF counter > max_counter THEN
            IF counter = 0 THEN
                check_IF := check_IF + 1
            ELSIF counter = 0 THEN
                check_IF := check_IF + 3
            ELSE check_IF := check_IF + 10 END
        ELSIF counter > max_counter THEN
            IF counter = 0 THEN
                check_IF := check_IF + 1
            ELSIF counter = 0 THEN
                check_IF := check_IF + 3
            ELSE check_IF := check_IF + 10 END
        ELSE
            IF counter = 0 THEN
                check_IF := check_IF + 1
            ELSIF counter = 0 THEN
                check_IF := check_IF + 3
            ELSE check_IF := check_IF + 10 END
        END ;

        /* Block 3*/
        WHILE counter > max_counter &  check_WHILE < 1000 DO
            check_boolexp := bool ( counter = 0 ) ;
            check_WHILE := check_WHILE + 1
        INVARIANT counter : NAT & max_counter : NAT & cond1 : BOOL & check_boolexp : BOOL & check_BLOCK : INT & check_BECOME : INT & check_IF : INT & check_CASE : INT & check_SEQUENCE : INT & check_WHILE : INT & check_OPER_CALL : INT
        VARIANT ( 100000 - check_WHILE ) END ;

        /* Block 4*/
        check_boolexp := bool ( counter = 0 ) ;
        check_WHILE := 0 ;
        WHILE check_WHILE < counter DO
            check_WHILE := check_WHILE + 1
        INVARIANT counter : NAT & max_counter : NAT & cond1 : BOOL & check_boolexp : BOOL & check_BLOCK : INT & check_BECOME : INT & check_IF : INT & check_CASE : INT & check_SEQUENCE : INT & check_WHILE : INT & check_OPER_CALL : INT
        VARIANT ( 1000 - check_WHILE ) END ;

        /* Block 5*/

        BEGIN  check_boolexp := bool ( counter = 0 ) END ;
        IF counter > max_counter THEN
            IF counter = 0 THEN
                check_IF := check_IF + 1
            ELSIF counter = 0 THEN
                check_IF := check_IF + 3
            ELSE check_IF := check_IF + 10 END
        ELSIF counter > max_counter THEN
            IF counter = 0 THEN
                check_IF := check_IF + 1
            ELSIF counter = 0 THEN
                check_IF := check_IF + 3
            ELSE check_IF := check_IF + 10 END
        ELSE
            IF counter = 0 THEN
                check_IF := check_IF + 1
            ELSIF counter = 0 THEN
                check_IF := check_IF + 3
            ELSE check_IF := check_IF + 10 END
        END ;
        /* Block 6*/

        BEGIN  check_boolexp := bool ( counter = 0 ) END ;
        IF counter > max_counter THEN
            check_BECOME := check_BECOME + 1
        ELSIF counter > max_counter THEN
            check_BECOME := check_BECOME + 1
        ELSE
            check_BECOME := check_BECOME + 1
        END
        ;
        /* Block 7*/

        BEGIN  check_boolexp := bool ( counter = 0 ) END ;
        IF counter > max_counter THEN
            check_BECOME := check_BECOME + 1
        ELSIF counter > max_counter THEN
            check_BECOME := check_BECOME + 1
        ELSE
            check_BECOME := check_BECOME + 1
        END
        ;
        /* Block 8*/

        BEGIN  check_boolexp := bool ( counter = 0 ) END ;
        IF counter > max_counter THEN
            check_BECOME := check_BECOME + 1
        ELSIF counter > max_counter THEN
            check_BECOME := check_BECOME + 1
        ELSE
            check_BECOME := check_BECOME + 1
        END
        ;
        /* Block 9*/
        CASE counter OF
            EITHER 0 THEN
                check_CASE := check_CASE + 1 ;
                check_boolexp := bool ( counter = 0 )
            OR 1 THEN check_CASE := check_CASE + 3 ;
                BEGIN
                    check_BLOCK := check_BLOCK + 1
                END
            ELSE
                BEGIN
                    check_BLOCK := check_BLOCK + 1
                END
            END
        END ;

        /* Block 10*/

        BEGIN  check_boolexp := bool ( counter = 0 ) END ;
        IF counter > max_counter THEN  check_WHILE := 0 ;
            WHILE check_WHILE < counter DO
                check_WHILE := check_WHILE + 1
            INVARIANT counter : NAT & max_counter : NAT & cond1 : BOOL & check_boolexp : BOOL & check_BLOCK : INT & check_BECOME : INT & check_IF : INT & check_CASE : INT & check_SEQUENCE : INT & check_WHILE : INT & check_OPER_CALL : INT
            VARIANT ( 1000 - check_WHILE ) END
        ELSIF counter > max_counter THEN
            check_WHILE := 0 ;
            WHILE check_WHILE < counter DO
                check_WHILE := check_WHILE + 1
            INVARIANT counter : NAT & max_counter : NAT & cond1 : BOOL & check_boolexp : BOOL & check_BLOCK : INT & check_BECOME : INT & check_IF : INT & check_CASE : INT & check_SEQUENCE : INT & check_WHILE : INT & check_OPER_CALL : INT
            VARIANT ( 1000 - check_WHILE ) END
        ELSE
            check_WHILE := 0 ;
            WHILE check_WHILE < counter DO
                check_WHILE := check_WHILE + 1
            INVARIANT counter : NAT & max_counter : NAT & cond1 : BOOL & check_boolexp : BOOL & check_BLOCK : INT & check_BECOME : INT & check_IF : INT & check_CASE : INT & check_SEQUENCE : INT & check_WHILE : INT & check_OPER_CALL : INT
            VARIANT ( 1000 - check_WHILE ) END
        END ;
        counter := ( counter + 1 )
    END
END
