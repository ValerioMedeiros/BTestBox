IMPLEMENTATION
    TestSet_CODE_triple_case_else_while_i

REFINES
    TestSet_CODE_triple_case_else_while

IMPORTS
    triple_case_else_while

OPERATIONS
    verdict <-- TEST_0_optriple_case_else_while =
    BEGIN
        VAR aux1, aux2, aux3 IN
            aux1, aux2, aux3 <-- optriple_case_else_while(2, 0, 1);
            IF aux1 = 2 & aux2 = 0 & aux3 = 1 THEN
                verdict := TRUE
            ELSE
                verdict := FALSE
            END
        END
    END;

    verdict <-- TEST_1_optriple_case_else_while =
    BEGIN
        VAR aux1, aux2, aux3 IN
            aux1, aux2, aux3 <-- optriple_case_else_while(0, 0, 1);
            IF aux1 = 0 & aux2 = 0 & aux3 = 1 THEN
                verdict := TRUE
            ELSE
                verdict := FALSE
            END
        END
    END;

    verdict <-- TEST_2_optriple_case_else_while =
    BEGIN
        VAR aux1, aux2, aux3 IN
            aux1, aux2, aux3 <-- optriple_case_else_while(1, 0, 1);
            IF aux1 = 1 & aux2 = 0 & aux3 = 1 THEN
                verdict := TRUE
            ELSE
                verdict := FALSE
            END
        END
    END;

    verdict <-- TEST_3_optriple_case_else_while =
    BEGIN
        VAR aux1, aux2, aux3 IN
            aux1, aux2, aux3 <-- optriple_case_else_while(2, 5, 0);
            IF aux1 = 2 & aux2 = 5 & aux3 = 0 THEN
                verdict := TRUE
            ELSE
                verdict := FALSE
            END
        END
    END;

    verdict <-- TEST_4_optriple_case_else_while =
    BEGIN
        VAR aux1, aux2, aux3 IN
            aux1, aux2, aux3 <-- optriple_case_else_while(0, 5, 0);
            IF aux1 = 0 & aux2 = 5 & aux3 = 0 THEN
                verdict := TRUE
            ELSE
                verdict := FALSE
            END
        END
    END;

    verdict <-- TEST_5_optriple_case_else_while =
    BEGIN
        VAR aux1, aux2, aux3 IN
            aux1, aux2, aux3 <-- optriple_case_else_while(1, 5, 0);
            IF aux1 = 1 & aux2 = 5 & aux3 = 0 THEN
                verdict := TRUE
            ELSE
                verdict := FALSE
            END
        END
    END
END